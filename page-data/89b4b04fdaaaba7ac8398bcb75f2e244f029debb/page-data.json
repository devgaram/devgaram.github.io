{"componentChunkName":"component---src-templates-blog-post-js","path":"/89b4b04fdaaaba7ac8398bcb75f2e244f029debb","result":{"data":{"site":{"siteMetadata":{"title":"보노보노의 평화로운 개발 이야기"}},"current":{"repository":{"post":{"__typename":"GitHub_Blob","oid":"89b4b04fdaaaba7ac8398bcb75f2e244f029debb","text":"# 백준 2869 달팽이는 올라가고 싶다 Java\n\n- Title : 백준 2869 달팽이는 올라가고 싶다 Java\n- Date : 2019-12-10\n- Category: 알고리즘 풀이\n\n# 문제\n\n[달팽이는 올라가고 싶다](https://www.acmicpc.net/step/8)\n\n# 내 풀이\n\n하루에 a 만큼 올라가고 b 만큼 내려오므로 하루에 a-b 만큼 막대기에 올라가는 거와 같다. 정상에 도착하면 내려가지않으므로 c-a를 한다. (c-a) / (a-b) 의 값을 올림한 것이 소요된 일 수 이며 c-a를 했으므로 구한 값에 1을 더하면 된다.\n\n```java\nimport java.util.Scanner;\n\npublic class P2869 {\n\tpublic static void main(String[] args) {\n\t\tScanner sc = new Scanner(System.in);\n\t\tint a = sc.nextInt();\n\t\tint b = sc.nextInt();\n\t\tint c = sc.nextInt();\n\t\tSystem.out.println(Solution(a, b, c));\n\t}\n\n\tpublic static int Solution(double a, double b, double c) {\n\t\treturn (int) Math.ceil((c-a)/(a-b)) + 1;\n\n\t}\n}\n```\n"}}},"previous":{"repository":{"post":{"__typename":"GitHub_Blob","oid":"5912e74405510659e7c8587081bb3e7ed7afe56f","text":"# 백준 분수찾기 Java\n\n- Title : 백준 분수찾기 Java\n- Date : 2019-12-10\n- Category: 알고리즘 풀이\n\n# 문제\n\n[분수찾기](https://www.acmicpc.net/problem/1193)\n\n# 내 풀이\n\n자세히 살펴보면 다음과 같은 규칙이 있다.\n\n1/1 => 1 layer (이 라인에서 제일 큰 번호 : 1)  \n1/2 2/1 => 2 layer (이 라인에서 제일 큰 번호 : 3)  \n3/1 2/2 1/3 => 3 layer (이 라인에서 제일 큰 번호 : 6)  \n1/4 2/3 3/2 4/1 => 4 layer (이 라인에서 제일 큰 번호 : 10)  \n5/1 4/2 3/3 2/4 1/5 => 5 layer (이 라인에서 제일 큰 번호 : 15)\n\n- x layer에는 x 개의 분수가 있다.\n- x layer에서 제일 큰 번호는 1 + 2 + 3 + ... + x 이다. 즉 x \\* (x + 1) / 2\n- layer 번호가 짝수면, 제일 큰 번호의 분수를 기준으로 분자는 -1, 분모는 +1 을 한다.\n- layer 번호가 홀수면, 제일 큰 번호의 분수를 기준으로 분자는 +1, 분모는 -1 을 한다.\n\n위의 규칙을 이용하여 입력 N이 있는 layer와 그 layer의 제일 큰 번호를 찾고 layer의 홀/짝 여부를 통해 분자, 분모를 1 빼거나 더하면 된다.\n\n```java\nimport java.util.Scanner;\n\npublic class P1193 {\n\tpublic static void main(String[] args) {\n\t\tScanner sc = new Scanner(System.in);\n\t\tint N = sc.nextInt();\n\t\tSystem.out.println(Solution(N));\n\t}\n\n\tpublic static String Solution(int N) {\n\t\tint a = 1, b = 1;\n\t\tint num = 1, number = 1;\n\t\tint r = 0;\n\t\tint[] cal_a = {-1, 1};\n\t\tint[] cal_b = {1, -1};\n\n\t\twhile (number < N) {\n\t\t\tnum++;\n\t\t\tnumber += num;\n\n\t\t}\n\t\tr = num % 2;\n\t\tif (r == 0) a = num;\n\t\telse b = num;\n\n\t\twhile (number != N) {\n\t\t\ta += cal_a[r];\n\t\t\tb += cal_b[r];\n\t\t\tnumber--;\n\n\t\t}\n\t\treturn a+\"/\"+b;\n\t}\n}\n```\n"}}},"next":{"repository":{"post":{"__typename":"GitHub_Blob","oid":"148bb6e841674fd68d22916f49323b344c33e005","text":"# 프로그래머스 기지국 설치 javascript\n\n- Title : 프로그래머스 기지국 설치 javascript\n- Date : 2019-12-10\n- Category: 알고리즘 풀이\n\n# 문제\n\n[프로그래머스 기지국 설치](https://programmers.co.kr/learn/courses/30/lessons/12979)\n\n아파트의 개수 N, 현재 기지국이 설치된 아파트의 번호가 담긴 1차원 배열 stations, 전파의 도달 거리 W가 매개변수로 주어질 때, 모든 아파트에 전파를 전달하기 위해 증설해야 할 기지국 개수의 최솟값을 리턴하는 solution 함수를 완성하는 문제다.\n\n# 내 풀이\n\n떠올린 아이디어는 현재 설치된 기지국의 영향이 끼치는 곳에서 범위를 잘라주는 방식이었다.\n\n예를 들어 다음과 같이 초기 아파트의 상태가 있다면<br/>\n![1](/assets/images/2019-12-10-img/p1-1.png) <br/>\n![1](/assets/images/2019-12-10-img/p1-1-1.png) <br/>\n과 같이 분할을 한다.\n\n이 경우도 마찬가지다. <br/>\n![1](/assets/images/2019-12-10-img/p1-2-1.png) <br/>\n![1](/assets/images/2019-12-10-img/p1-2-1.png) <br/>\n\n```javascript\nfunction solution(n, stations, w) {\n  var answer = 0;\n  let s = 1;\n  const func = (s, e) => {\n    if (s > e) return;\n    answer++;\n    func(s + w + w + 1, e);\n  };\n  for (let i = 0; i < stations.length; i++) {\n    func(s, stations[i] - w - 1);\n    s = stations[i] + w + 1;\n  }\n  func(s, n);\n  return answer;\n}\n```\n\n# 다른 사람 풀이\n\n재귀 쓸 필요 없이 해당 범위 크기를 (2\\*w) + 1로 나눈 후 올림한 값을 구하면 그 범위 내 기지국 개수를 알아 낼 수 있다.\n\n```javascript\nfunction solution(n, stations, w) {\n  var answer = 0;\n  let s = 0;\n  for (var i = 0; i < stations.length; i++) {\n    var r = stations[i] - w - 1;\n    answer += Math.ceil((r - s) / (2 * w + 1));\n    s = stations[i] + w;\n  }\n  answer += Math.ceil((n - s) / (2 * w + 1));\n  return answer;\n}\n```\n"}}}},"pageContext":{"id":"89b4b04fdaaaba7ac8398bcb75f2e244f029debb","previousPostId":"5912e74405510659e7c8587081bb3e7ed7afe56f","nextPostId":"148bb6e841674fd68d22916f49323b344c33e005"}},"staticQueryHashes":["2685952063","2841359383"]}