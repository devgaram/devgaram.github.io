{"componentChunkName":"component---src-templates-blog-post-js","path":"/d79c410b05d91234e7105209de7dcf5c278166bf","result":{"data":{"site":{"siteMetadata":{"title":"보노보노의 평화로운 개발 이야기"}},"current":{"repository":{"post":{"__typename":"GitHub_Blob","oid":"d79c410b05d91234e7105209de7dcf5c278166bf","text":"# 백준 - 17143 낚시왕(C++)\n\n- Title : 백준 - 17143 낚시왕(C++)\n- Date : 2020-01-28\n- Category: 알고리즘 풀이\n\n# 낚시왕\n\n```cpp\n#include <iostream>\n#include <vector>\n#include <map>\n#include <cstring>\nusing namespace std;\n\nstruct Shark\n{\n\tint r;\n\tint c;\n\tint s; // 속력\n\tint d; // 이동\n\tint z; // 크기\n};\n\nint main() {\n\tint R, C, M;\n\tint r, c, s, d, z;\n\tmap<int, Shark> sharkmap; // 상어정보들 [크기, 정보구조체]\n\tmap<int, Shark>::iterator it;\n\tint row[5] = {0, -1, 1, 0, 0}; // 1:위, 2:아래, 3: 오른쪽, 4:왼쪽\n\tint col[5] = {0, 0, 0, 1, -1};\n\tint ans = 0;\n\n\tscanf(\"%d %d %d\", &R, &C, &M);\n\tint arr[R+1][C+1] = {0};\n\tint arrtmp[R+1][C+1] = {0};\n\tfor (int i=0; i<M; i++) {\n\t\tscanf(\"%d %d %d %d %d\", &r, &c, &s, &d, &z);\n\t\tarr[r][c] = z;\n\t\tShark tmp = {r, c, s, d, z};\n\t\tsharkmap.insert(make_pair(z, tmp));\n\t}\n\n\n\tint nr, nc, nd, move;\n\tfor (int i=1; i<=C; i++) {\n\n\n\t\t// 상어잡기\n\t\tfor (int j=1; j<=R; j++) {\n\t\t\tif (arr[j][i] > 0) {\n\t\t\t\tsharkmap.erase(arr[j][i]);\n\t\t\t\tans += arr[j][i];\n\t\t\t\tarr[j][i] = 0;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\n\t\t// 상어이동\n\t\tfor(it=sharkmap.begin(); it != sharkmap.end(); it++) {\n\t\t\tShark &shark = it -> second;\n\t\t\t// 오른쪽, 왼쪽\n\t\t\tif (shark.d == 3 || shark.d == 4) {\n\t\t\t\tmove = shark.s % ((C-1)*2);\t// 실제 이동해야할 MOVE\n\t\t\t\tnc = shark.c;\n\t\t\t\tnd = shark.d;\n\t\t\t\twhile (move > 0) {\n\t\t\t\t\tif (nc == 1) nd = 3;\n\t\t\t\t\telse if (nc == C) nd = 4;\n\t\t\t\t\tnc += col[nd];\n\t\t\t\t\tmove--;\n\t\t\t\t}\n\t\t\t\tshark.d = nd;\n\t\t\t\tshark.c = nc;\n\t\t\t}\n\t\t\t// 위, 아래\n\t\t\telse if (shark.d == 1 || shark.d == 2) {\n\t\t\t\tmove = shark.s % ((R-1)*2);\t// 실제 이동해야할 MOVE\n\t\t\t\tnr = shark.r;\n\t\t\t\tnd = shark.d;\n\t\t\t\twhile (move > 0) {\n\t\t\t\t\tif (nr == 1) nd = 2;\n\t\t\t\t\telse if (nr == R) nd = 1;\n\t\t\t\t\tnr += row[nd];\n\t\t\t\t\tmove--;\n\t\t\t\t}\n\t\t\t\tshark.d = nd;\n\t\t\t\tshark.r = nr;\n\t\t\t}\n\t\t\t// 상어 먹기\n\t\t\tif (arrtmp[shark.r][shark.c] < shark.z) {\n\t\t\t\tif (arrtmp[shark.r][shark.c] > 0)\n\t\t\t\t\tsharkmap.erase(arrtmp[shark.r][shark.c]);\n\n\t\t\t\tarrtmp[shark.r][shark.c] = shark.z;\n\n\t\t\t} else sharkmap.erase(shark.z);\n\n\n\t\t}\n\n\t\tfor (int j=1; j<=R; j++) {\n\t\t\tfor (int k=1; k<=C; k++) {\n\t\t\t\tarr[j][k] = arrtmp[j][k];\n\t\t\t\tarrtmp[j][k] = 0;\n\t\t\t}\n\t\t}\n\t}\n\n\tprintf(\"%d\", ans);\n\n\treturn 0;\n}\n```\n"}}},"previous":{"repository":{"post":{"__typename":"GitHub_Blob","oid":"6c5737bcef4046d74738a7a56d218a7a8c80d728","text":"# 백준 - 16235 나무 재테크(C++)\n\n- Title : 백준 - 16235 나무 재테크(C++)\n- Date : 2020-01-28\n- Category: 알고리즘 풀이\n\n# 나무 재테크\n\n- 각 계절을 구현하는 데는 어려움이 없었으나 처음에 벡터 하나에 나무를 다 저장하고 매번 sort를 해서 시간 초과가 발생했었다.\n- 고민하다가 각 칸마다 deque에 나무 나이를 담는 식으로 바꿨다.\n- vector가 아닌 deque를 선택한 건 가을(번식)때 생성되는 나무는 나이가 1이므로 맨 앞에 추가되어야하기 때문이다.\n- vector는 배열이라 맨 앞 추가할 때 O(N)의 시간복잡도가 발생한다.\n- deque로 바꿨기에 처음 1번만 sort를 사용하여 효율성을 높였다.\n\n```cpp\n#include <iostream>\n#include <vector>\n#include <algorithm>\n#include <deque>\nusing namespace std;\n\n#define MAX 10\n\nint N, M, K;\nint A[MAX][MAX]; // 로봇 양분\nint L[MAX][MAX]; // 땅\ndeque<int> T[MAX][MAX]; // 각 땅의 나무 나이\n\nvoid addTree(int r, int c){\n\tif (r < 0 || c < 0 || r >= N || c >= N) return;\n\tT[r][c].push_front(1);\n}\n\nint main() {\n\tint x, y, age;\n\tscanf(\"%d %d %d\", &N, &M, &K);\n\n\tfor (int i=0; i<N; i++) {\n\t\tfor (int j=0; j<N; j++) {\n\t\t\tscanf(\"%d\", &A[i][j]);\n\t\t\tL[i][j] = 5;\n\t\t}\n\t}\n\tfor (int i=0; i<M; i++) {\n\t\tscanf(\"%d %d %d\", &x, &y, &age);\n\t\tT[--x][--y].push_back(age);\n\t}\n\n\tfor (int i=0; i<N; i++) {\n\t\tfor (int j=0; j<N; j++) {\n\t\t\tif (T[i][j].size() > 1) {\n\t\t\t\tsort(T[i][j].begin(), T[i][j].end());\n\t\t\t}\n\t\t}\n\t}\n\n\tbool flag;\n\twhile(K-- > 0) {\n\n\t\t// 같은 칸이면 어린 순으로 나이만큼 양분먹고 나이 증가\n\t\tfor (int i=0; i<N; i++) {\n\t\t\tfor (int j=0; j<N; j++) {\n\t\t\t\tdeque<int> &tmp = T[i][j];\n\t\t\t\tflag = true;\n\t\t\t\tfor(auto iter=tmp.begin(); iter != tmp.end();) {\n\t\t\t\t\tint &t = *iter;\n\t\t\t\t\tif (L[i][j] >= t && flag) {\n\t\t\t\t\t\tL[i][j] -= t;\n\t\t\t\t\t\tt += 1;\n\t\t\t\t\t\titer++;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tflag = false;\n\t\t\t\t\t\t// 여름 처리\n\t\t\t\t\t\tL[i][j] += t / 2;\n\t\t\t\t\t\titer = tmp.erase(iter);\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t}\n\t\t}\n\n\t\t// 나이 5의 배수 나무 번식\n\t\tfor (int i=0; i<N; i++) {\n\t\t\tfor (int j=0; j<N; j++) {\n\t\t\t\tdeque<int> &tmp = T[i][j];\n\t\t\t\tfor(auto iter=tmp.begin(); iter != tmp.end(); iter++) {\n\t\t\t\t\tint t = *iter;\n\t\t\t\t\tif (t % 5 == 0) {\n\t\t\t\t\t\taddTree(i - 1, j - 1);\n\t\t\t\t\t\taddTree(i - 1, j);\n\t\t\t\t\t\taddTree(i - 1, j + 1);\n\t\t\t\t\t\taddTree(i, j - 1);\n\t\t\t\t\t\taddTree(i, j + 1);\n\t\t\t\t\t\taddTree(i + 1, j - 1);\n\t\t\t\t\t\taddTree(i + 1, j);\n\t\t\t\t\t\taddTree(i + 1, j + 1);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t// 로봇이 양분 추가\n\t\tfor (int i=0; i<N; i++) {\n\t\t\tfor (int j=0; j<N; j++) {\n\t\t\t\tL[i][j] += A[i][j];\n\t\t\t}\n\t\t}\n\t}\n\n\tint ans = 0;\n\tfor (int i=0; i<N; i++) {\n\t\tfor (int j=0; j<N; j++) {\n\t\t\tans += T[i][j].size();\n\t\t}\n\t}\n\tprintf(\"%d\", ans);\n\n\treturn 0;\n}\n```\n"}}},"next":{"repository":{"post":{"__typename":"GitHub_Blob","oid":"e5e224acdcb2987fdb69287d4a7af22a7a43f244","text":"# 운영체제 - 프로세스 동기화 2\n\n- Title : 운영체제 - 프로세스 동기화 2\n- Date : 2020-01-14\n- Category: 운영체제\n\n> 1. 생산자-소비자 문제(Producer and Consumer Problem)\n> 2. 독자-저자 문제(Readers-Writers Problem)\n> 3. 식사하는 철학자 문제(Dining Philosopher Problem)\n\n# 전통적 동기화(Classical Synchronization Problems)\n\n## Producer and Consumer Problem\n\n- 생산자-소비자 문제\n  - 생산자가 데이터를 생산하면 소비자는 그것을 소비\n  - 예1: 컴파일러(생산자) > 어셈블러(소비자)\n  - 예2: 파일서버 > 클라이언트\n  - 예3: 웹 서버(html 생산함) -> 웹 클라이언트(브라우저로 소비)\n- 유한버퍼 문제 (Bounded Buffer Problem)\n  - 생산된 데이터는 버퍼에 일단 저장(속도 차이 등)\n  - 현실 시스템에서 버퍼 크기는 유한\n  - 생산자는 버퍼가 가득 차면 더 넣을 수 없다.\n  - 소비자는 버퍼가 비면 뺄 수 없다.\n\n> 예시<br/>\n> 일반적으로 농작물 생산 속도와 소비 속도가 다르다. 현실적으로 바로 농산물을 소비자에게 주는 게 아니라 창고에 우선 저장한다. 저장된 여러 농작물을 소비자가 조금씩 빼먹고 생산자는 계속 생산해서 저장한다. 이 창고가 바로 **버퍼**다. 버퍼는 데이터를 저장할 수 있는 메모리 또는 디스크 공간으로 주로 메모리를 이용하긴 한다. 그런데 버퍼의 크기는 얼마나 될까? 현실 시스템에서 당연히 버퍼 크기는 유한하다. 컴퓨터에서 메모리가 한정적이니 당연한 얘기다.\n\n```java\n/****** 버퍼 ******/\n\nclass Buffer {\n  int[] buf;\n  int size;\n  int count;  // 버퍼의 현재 자원 크기\n  int in; // 생산자 insert 할 버퍼의 위치\n  int out;  // 소비자가 remove 할 버퍼의 위치\n\n  Buffer(int size) {\n    buf = new int[size];\n    this.size = size;\n    count = in = out = 0;\n  }\n  // 생산자\n  void insert(int item) {\n    /* check if buf is full */\n    while (count == size)\n    ;\n\n    buf[in] = item;\n    in = (in+1)%size; //circular\n    count++;\n  }\n  // 소비자\n  int remove() {\n    /* check if buf is empty */\n    while (count == 0)\n    ;\n\n    int item = buf[out];\n    out = (out+1)%size;\n    count--;\n    return item;\n  }\n}\n```\n\n```java\n/****** 생산자 ******/\nclass Producer extends Thread {\n  Buffer b;\n  int N;\n  Producer(Buffer b, int N) {\n    this.b = b; this.N = N;\n  }\n  public void run() {\n    for (int i=0; i<N; i++)\n    b.insert(i);\n  }\n}\n```\n\n```java\n/****** 소비자 ******/\nclass Consumer extends Thread {\n  Buffer b;\n  int N;\n  Consumer(Buffer b, int N) {\n    this.b = b; this.N = N;\n  }\n  public void run() {\n    int item;\n    for (int i=0; i<N; i++)\n    item = b.remove();\n  }\n}\n```\n\n```java\n/****** 메인 ******/\nclass Test {\n  public static void main(String[] arg) {\n    Buffer b = new Buffer(100);\n    Producer p = new Producer(b, 10000);\n    Consumer c = new Consumer(b, 10000);\n    p.start();\n    c.start();\n    try {\n      p.join();\n      c.join();\n    } catch (InterruptedException e) {}\n      System.out.println(\"Number of items in the buf is \" + b.count);\n  }\n}\n```\n\n- 위 코드는 잘못된 결과가 나온다.\n  - <code>실행 불가</code> 또는 <code>count != 0</code> (생산된 항목 숫자 != 소비자 항목 숫자)\n  - 최종적으로 버퍼 내에는 0개의 항목이 있어야 한다.\n- 원인은 무엇일까?\n  - 공통변수 count, buf[]에 대한 동시 업데이트 때문이다.\n  - 공통 변수 업데이트 구간(=임계구역)에 대한 동시 진입한다.\n- 어떻게 해결하지?\n  - <span class=\"clr-note\">임계구역에 대한 동시 접근 방지(상호배타)하기</span>\n  - 세마포를 사용한 상호배타 (mutual exclusion) 하기\n  - 세마포: mutex.value = 1 (# of permit)\n\n<br/>\n\n```java\n/****** 버퍼 ******/\nimport java.util.concurrent.Semaphore;\n\nclass Buffer {\n  int[] buf;\n  int size;\n  int count;  // 버퍼의 현재 자원 크기\n  int in; // 생산자 insert 할 버퍼의 위치\n  int out;  // 소비자가 remove 할 버퍼의 위치\n  Semaphore mutex;\n\n  Buffer(int size) {\n    buf = new int[size];\n    this.size = size;\n    count = in = out = 0;\n    this.mutex = new Semaphore(1);\n  }\n  // 생산자\n  void insert(int item) {\n    /* check if buf is full */\n    while (count == size)\n    ;\n    try {\n      mutex.acquire();\n      /****** S : 임계구역 *****/\n      buf[in] = item;\n      in = (in+1)%size; //circular\n      count++;\n      /****** E : 임계구역 *****/\n    } catch(InterruptedException) {}\n    mutex.release();\n  }\n  // 소비자\n  int remove() {\n    /* check if buf is empty */\n    while (count == 0)\n    ;\n    try {\n      mutex.acquire();\n      /****** S : 임계구역 *****/\n      int item = buf[out];\n      out = (out+1)%size;\n      count--;\n      return item;\n      /****** E : 임계구역 *****/\n    } catch(InterruptedException) {}\n    mutex.release();\n    return -1;\n  }\n}\n```\n\n<br/><br/>\n\n- 하지만 또! <code>Busy-wait</code> 라는 문제가 있다.\n  - insert의 <code>while (count == size);</code>와 remove의 <code>while (count == 0);</code> 로 인해 반복문에 붙잡히는 경우가 생긴다. cpu가 딴 일 못하고 붙잡힌다.\n  - 생산자: 버퍼가 가득 차면 기다려야 = 빈(empty) 공간이 있어야 한다.\n  - 소비자: 버퍼가 비면 기다려야 = 찬(full) 공간이 있어야 한다.\n- 어떻게 해결하지?\n  - 무한루프가 아니라 아예 감옥에 가둬버리자!\n  - 세마포를 사용한 busy-wait 회피\n  - 생산자: empty.acquire() // # of permit = BUF_SIZE\n  - 소비자: full.acquire() // # of permit = 0\n\n<br/>\n\n```java\n/****** 버퍼 ******/\nimport java.util.concurrent.Semaphore;\n\nclass Buffer {\n  int[] buf;\n  int size;\n  int count;  // 버퍼의 현재 자원 크기\n  int in; // 생산자 insert 할 버퍼의 위치\n  int out;  // 소비자가 remove 할 버퍼의 위치\n  Semaphore mutex;   // 임계구역에 1개만 들어가게 하려고\n  Semaphore empty;\n  Semaphore full;\n\n  Buffer(int size) {\n    buf = new int[size];\n    this.size = size;\n    count = in = out = 0;\n    this.mutex = new Semaphore(1);\n    this.empty = new Semaphore(size);\n    this.full = new Semaphore(0);\n  }\n  // 생산자\n  void insert(int item) {\n    /* check if buf is full */\n    while (count == size)\n    ;\n    try {\n      empty.acuire();\n      mutex.acquire();\n      /****** S : 임계구역 *****/\n      buf[in] = item;\n      in = (in+1)%size; //circular\n      count++;\n      /****** E : 임계구역 *****/\n    } catch(InterruptedException) {}\n    mutex.release();\n    full.release();\n  }\n  // 소비자\n  int remove() {\n    /* check if buf is empty */\n    while (count == 0)\n    ;\n    try {\n      full.acquire();\n      mutex.acquire();\n      /****** S : 임계구역 *****/\n      int item = buf[out];\n      out = (out+1)%size;\n      count--;\n      return item;\n      /****** E : 임계구역 *****/\n    } catch(InterruptedException) {}\n    mutex.release();\n    empty.release();\n    return -1;\n  }\n}\n```\n\n## Readers-Writers Problem\n\n- 공통 데이터베이스\n  - Readers: read data, never modify it\n  - Writers: read data and modifiy it\n  - 상호배타: 한 번에 한 개의 프로세스만 접근하는 것 효율성이 안 좋다.\n- 효율성을 높이려면?\n  - 데이터베이스 읽고 쓰기는 임계 구역 안에서 발생한다.\n  - 그러므로 Writers은 당연히 상호 배타 해야한다.\n  - 그러나 Reader1이 DB 읽고 있으면 Reader2도 읽을 수 있게 해줘야 효율성에 좋다!\n- 변종\n  - The first R/W problem (readers-preference) : 항상 readers에게 우선권을 주는 것. 예) 현재 Reader1이 DB를 읽고 있다고 가정해보자. Writer1의 경우는 상호 배타되어서 접근할 수 없다. 잠시 후 Reader2가 접근하면 Reader2는 늦게 왔음에도 불구하고 DB에 접근할 수 있다.\n  - The second R/W problem (writers-preference) : writers에게 우선권 주는 것\n  - The Third R/W problem : 우선권 아예 안 주는 것\n\n## Dining Philosopher Problem\n\n![process tree](https://raw.githubusercontent.com/devgaram/TIL/master/OperatingSystem/images/2020-01-14-img/1.png)<br/>\n\n> 5명의 철학자가 원탁에 앉아 있고 각자의 앞에는 스파게티가 있다. 그리고 양 옆에는 젓가락이 하나씩 있다. 각각의 철학자는 스파게티를 먹으려면 젓가락을 2개를 사용해야 하며, 다른 철학자에게 말을 걸 수 없고 젓가락을 빼앗을 수도 없다.\n> <br/><br/> 이제 5명의 철학자 모두가 갑자기 배가 고파서 동시에 왼쪽 젓가락을 집어든다고 생각해보자. 철학자들은 젓가락을 공유할 수 없고 자신의 오른쪽에 앉은 철학자가 젓가락을 놓을 때까지 기다린다. 오른쪽 젓가락을 빼앗을 방법도 없어서 철학자들의 계속 대기만 한다...\n\n- 식사하는 철학자 문제\n  - 5명의 철학자, 5개의 젓가락, 생각 → 식사 → 생각 → 식사\n  - 식사하려면 2개의 젓가락 필요\n- 프로그래밍\n  - 젓가락: 세마포 (# of permit = 1) -> 젓가락을 기준으로 2명 중 1명만 사용할 수 있으니깐 1로 한다.\n  - 젓가락과 세마포에 일련번호: 0 ~ 4\n  - 왼쪽 젓가락 → 오른쪽 젓가락\n\n```java\n/*********철학자*********/\nimport java.util.concurrent.Semaphore;\nclass Philosopher extends Thread {\n  int id; // philosopher id\n  Semaphore lstick, rstick; // left, right chopsticks\n  Philosopher(int id, Semaphore lstick, Semaphore rstick) {\n    this.id = id;\n    this.lstick = lstick;\n    this.rstick = rstick;\n  }\n  public void run() {\n    try {\n      while (true) {\n        lstick.acquire();\n        rstick.acquire();\n        eating();\n        lstick.release();\n        rstick.release();\n        thinking();\n      }\n    }catch (InterruptedException e) { }\n  }\n\n  void eating() {\n    System.out.println(\"[\" + id + \"] eating\");\n  }\n  void thinking() {\n    System.out.println(\"[\" + id + \"] thinking\");\n  }\n}\n```\n\n```java\n/*********메인*********/\nclass Test {\n  static final int num = 5; // number of philosphers & chopsticks\n  public static void main(String[] args) {\n    int i;\n    /* chopsticks */\n    Semaphore[] stick = new Semaphore[num];\n    for (i=0; i<num; i++)\n      stick[i] = new Semaphore(1);\n    /* philosophers */\n    Philosopher[] phil = new Philosopher[num];\n    for (i=0; i<num; i++)\n      phil[i] = new Philosopher(i, stick[i], stick[(i+1)%num]);\n    /* let philosophers eat and think */\n    for (i=0; i<num; i++)\n      phil[i].start();\n  }\n}\n```\n\n- 위 코드는 프로그램이 돌다가 멈춘다.. 왜???!!!\n  - 잘못된 결과: starvation -> 모든 철학자가 식사를 하지 못해 굶어 죽는 상황\n  - 이유 = <span class=\"clr-note\">교착상태 (deadlock)</span>\n"}}}},"pageContext":{"id":"d79c410b05d91234e7105209de7dcf5c278166bf","previousPostId":"6c5737bcef4046d74738a7a56d218a7a8c80d728","nextPostId":"e5e224acdcb2987fdb69287d4a7af22a7a43f244"}},"staticQueryHashes":["2685952063","2841359383"]}