{"componentChunkName":"component---src-templates-blog-post-js","path":"/5a30bac6bb7fcaecb510c9cd70735f33591e0b4c","result":{"data":{"site":{"siteMetadata":{"title":"보노보노의 평화로운 개발 이야기"}},"current":{"repository":{"post":{"__typename":"GitHub_Blob","oid":"5a30bac6bb7fcaecb510c9cd70735f33591e0b4c","text":"# AWS 연습하자 2탄 - Jenkins와 Github 연동\n\n- Title : AWS 연습하자 2탄 - Jenkins와 Github 연동\n- Date : 2020-02-25\n- Category: Infra\n\n> AWS 연습하자 시리즈\n>\n> - [AWS 연습하자 1탄 - AWS EC2 인스턴스에 Jenkins 서버 구축하기](/post/2020-02-24-how-to-use-aws)\n\nAWS 연습하기 2탄에서는 추가 설정과 Jenkins와 Github을 연동하는 과정을 다뤄보겠습니다.\n\n# Git 설치\n\n연동에 앞서 Jenkins 서버에 git을 설치해두겠습니다.\n\n```\nsudo yum install git\n```\n\n# SSH 키 생성 및 등록\n\n젠킨스와 깃허브를 연동하는 작업은 [기억보다 기록을 - Jenkins로 Beanstalk + Multi Module 배포하기 - Jenkins와 Github 연동하기](https://jojoldu.tistory.com/291?category=777282)를 99% 참고하여 진행했습니다.\n\nssh 키를 생성합니다.\n\n```\nsudo ssh-keygen -t rsa -f id_rsa\n```\n\n아래 커맨드를 이용해 id_rsa 내용을 확인한 후 복사해둡니다.\n\n```\nsudo cat id_rsa\n```\n\n그 다음 다시 젠킨스 페이지로 돌아와서 **Credentials -> System -> Global credentials -> Add Credentials**를 선택합니다.\n\n아래와 같이 설정한 후 저장합니다.\n\n![process tree](https://raw.githubusercontent.com/devgaram/TIL/master/Infra/images/2020-02-24-img/19.PNG)\n\n이제 공개키(id_rsa.pub)를 Github에 등록하겠습니다.\nJenkins로 관리할 Github 프로젝트로 이동한 뒤 **Settings탭 -> Deploy keys -> Add deploy key** 를 차례로 클릭합니다.\n\nTitle에는 Jenkins 입력, key에는 아래 커맨드를 실행한 결과 값을 붙여넣습니다.\n\n```\nsudo cat id_rsa.pub\n```\n\nAllow write access는 체크 해제한 후 Add Key를 클릭합니다.\n\n이 작업만 해도 Build, Test, Code Clone 등을 다 할 수 있긴 합니다. PUSH 발생시에도 젠킨스가 PUSH 이벤트를 받을 수 있도록 Webhooks를 추가하겠습니다.\n\n**Settings 탭 -> Webhooks -> Add webhook** 을 클릭합니다.\n\nPayload URL에 http://Jenkins도메인/github-webhook/ 을 입력하고 Content type은 **application/json** 으로 변경해줍니다. Add webhook을 클릭하여 추가를 완료합니다.\n\n# Nodejs 설정\n\n제가 연결할 프로젝트는 express 프레임워크가 적용된 nodejs 서버입니다. 우선 Node.js 툴을 설치해줘야합니다. **메인페이지 -> Jenkins 관리 -> 플러그인 관리 -> 설치가능 탭** 을 클릭한 후 검색 창에 **nodejs** 라고 입력합니다. 리스트에서 NodeJS Plugin이 보이면 체크박스 선택 후 재시작없이 설치하기를 클릭합니다. 설치가 완료되면 다시 메인 페이지로 돌아갑니다.\n\n이제 Node.js 툴 설정을 진행하겠습니다. **Jenkins 관리 -> Global Tool Confituration** 을 선택합니다.\n\n**NodeJS 섹션 -> NodeJS installations..** 를 클릭합니다.\n\n아래와 같이 입력한 후 저장합니다.\n저는 로컬에서 노드 버전이 12.14.1 여서 다음과 같이 선택했습니다.\n\n![process tree](https://raw.githubusercontent.com/devgaram/TIL/master/Infra/images/2020-02-24-img/16.PNG)\n\n# Item 생성 및 파이프라인 작성\n\n**새로운 Item -> 적당한 이름 입력 -> Pipeline** 선택 후 OK를 눌러줍니다.\n\nBuild Triggers가 Github hook과 연동되도록 다음과 같이 선택합니다.\n\n![process tree](https://raw.githubusercontent.com/devgaram/TIL/master/Infra/images/2020-02-24-img/20.PNG)\n\nPipeline 섹션에 Definition은 Pipeline script로 한 후 아래와 같이 입력하고 저장합니다. Pipeline 스크립트를 jenkinsfile로 관리하는 것은 뒤에서 다루도록 하겠습니다.\n\n```\npipeline {\n   agent any\n\n   tools {\n      nodejs \"node\"\n   }\n\n   stages {\n      stage('Build') {\n         steps {\n            git 'https://github.com/devgaram/express-project-blog.git'\n         }\n      }\n\n      stage('Install dependencies') {\n          steps {\n              sh 'npm install -g yarn'\n              sh 'yarn install'\n          }\n      }\n      stage('Test') {\n          steps {\n              echo 'test..'\n              // yarn test\n          }\n      }\n      stage('Upload S3') {\n          steps {\n              echo 'upload s3'\n          }\n      }\n      stage('Deploy') {\n          steps {\n              echo 'deploy'\n          }\n      }\n   }\n   post {\n        success {\n            echo 'successed'\n        }\n        failure {\n            echo 'failed'\n        }\n   }\n}\n\n```\n\n생성된 아이템으로 이동한 후 Build Now 버튼을 눌렀을 때 에러없이 완료되면 Github 연동은 성공적으로 된 것입니다.\n\n[AWS 연습하자 3탄 - Jenkins와 S3 버킷 & AWS codeDeploy 연동으로 배포하기](/post/2020-02-26-how-to-use-aws) 으로 이어집니다.\n\n[참고 블로그](https://medium.com/@gustavo.guss/jenkins-starting-with-pipeline-doing-a-node-js-test-72c6057b67d4)\n"}}},"previous":{"repository":{"post":{"__typename":"GitHub_Blob","oid":"780e861698b99b29b1cd69f14ca08ded2b5349b5","text":"# AWS 연습하자 3탄 - Jenkins와 S3 버킷 & AWS codeDeploy 연동으로 배포하기\n\n- Title : AWS 연습하자 3탄 - Jenkins와 S3 버킷 & AWS codeDeploy 연동으로 배포하기\n- Date : 2020-02-26\n- Category: Infra\n\n> AWS 연습하자 시리즈\n>\n> - [AWS 연습하자 1탄 - AWS EC2 인스턴스에 Jenkins 서버 구축하기](/post/2020-02-24-how-to-use-aws)\n> - [AWS 연습하자 2탄 - Jenkins와 Github 연동](/post/2020-02-25-how-to-use-aws)\n\nAWS 연습하기 3탄에서는 AWS S3와 Aws Codedeploy로 자동 배포 환경을 구축하는 과정을 다루겠습니다.\n\n# 배포 서버인 EC2 인스턴스 생성\n\n[AWS 연습하자 1탄](/post/2020-02-24-how-to-use-aws)의 AWS EC2 인스턴스 생성하기 부분을 진행하여 인스턴스를 생성하고 오세요! 저는 Name 태그에 blog-server로 인스턴스를 생성했습니다.\n\n# AWS Code Deploy 계정 생성\n\n여기서 생성한 계정을 가지고 Jenkins와 blog-server 인스턴스에서 설정을 진행할 것입니다.\n\n**[AWS IAM 콘솔](https://console.aws.amazon.com/iam/) -> 사용자 탭 -> 사용자 추가** 를 클릭합니다.\n\n사용자 이름을 입력하고 액세스 유형은 프로그래밍 방식 액세스를 선택합니다.\n\n![process tree](https://raw.githubusercontent.com/devgaram/TIL/master/Infra/images/2020-02-24-img/29.PNG)\n\n해당 계정이 사용할 수 있는 정책으로는 CodeDeploy와 S3 권한을 할당 받겠습니다.\n\n![process tree](https://raw.githubusercontent.com/devgaram/TIL/master/Infra/images/2020-02-24-img/30.PNG)\n\n![process tree](https://raw.githubusercontent.com/devgaram/TIL/master/Infra/images/2020-02-24-img/31.PNG)\n\n![process tree](https://raw.githubusercontent.com/devgaram/TIL/master/Infra/images/2020-02-24-img/32.PNG)\n\n.csv 다운로드 버튼을 클릭하여 비밀키를 잘 보관해둡니다.\n\n![process tree](https://raw.githubusercontent.com/devgaram/TIL/master/Infra/images/2020-02-24-img/33.PNG)\n\n# AWS S3 버킷 생성\n\n**[AWS S3 콘솔](https://s3.console.aws.amazon.com/s3/) -> 버킷 만들기** 를 클릭합니다.\n\n버킷 이름이 blog-server-bucket으로 하고 리전이 서울인지 확인합니다. 추가 옵션 없이 다음을 계속하여 버킷 생성을 완료합니다.\n\n# IAM Role 생성\n\nblog-server EC2와 CodeDeploy에게 신뢰할 수 있는 권한을 설정하여 젠킨스가 정상적으로 배포할 수 있게 하겠습니다.\n\n> CodeDeploy가 EC2 접근할 수 있도록 설정하는 것!\n\n**[AWS IAM 콘솔](https://console.aws.amazon.com/iam/) -> 역할 -> 역할 만들기** 를 클릭합니다.\n\nAWS 서비스를 누른 후 이 역할을 사용할 서비스 선택에서 **EC2**를 선택합니다. 권한 정책으로 **AmazonEC2RoleforAWSCodeDeploy** 를 체크한 후 다음: 태그로 넘어갑니다. 태그는 건너 뛰고 역할 이름은 **blog-server-EC2CodeDeployRole**을 입력한 후 역할 만들기를 클릭하겠습니다.\n\n지금 만든 역할은 blog-server EC2에 IAM 역할로 설정할 것입니다.\n\n마찬가지로 CodeDeploy도 역할을 생성하겠습니다.\n\n**[AWS IAM 콘솔](https://console.aws.amazon.com/iam/) -> 역할 -> 역할 만들기** 를 클릭합니다.\n\nAWS 서비스를 누른 후 이 역할을 사용할 서비스 선택에서 **CodeDeploy**를 선택합니다. 사용 사례 선택 섹션에서도 **CodeDeploy**를 선택합니다. 권한 정책으로 **AWSCodeDeployRole** 를 하나이므로 그냥 확인하고 다음: 태그로 넘어갑니다. 태그는 건너 뛰고 역할 이름은 **blog-server-CodeDeployServiceRole**을 입력한 후 역할 만들기를 클릭하겠습니다.\n\n# EC2에 AWS 역할 적용하기\n\nEC2 콘솔로 이동한 후 아래와 같이 IAM 역할 연결/바꾸기 를 선택합니다.\n\n![process tree](https://raw.githubusercontent.com/devgaram/TIL/master/Infra/images/2020-02-24-img/34.PNG)\n\n아까만든 **blog-server-EC2CodeDeployRole** 을 선택한 후 적용합니다.\n\n# EC2 AWS CodeDeploy Agent 설치 및 설정\n\n이제 blog-server 인스턴스에 CodeDeploy Agent를 설치하겠습니다.\n\n인스턴스로 접속한 후 패키지 업데이트를 수행합니다.\n\n```\nssh -i my-key-pair.pem ec2-user@퍼블릭DNS\nsudo yum update -y\n```\n\naws cli를 설치하겠습니다.\n\n```\nsudo yum install awscli\n```\n\n에이전트 설치 후 aws 설정을 하겠습니다.\n\n```\nsudo aws configure\n```\n\nAWS Access Key ID, AWS Secret Acecess Key ID는 사용자 생성할 때 받은 CSV를 보고 입력합니다.\n\n추가 정보는 아래와 같이 입력 후 엔터칩니다.\nDefault region name: ap-northeast-2\nDefault output format: json\n\n계속 설치를 진행하겠습니다.\n\n```\ncd /home/ec2-user\n\n# agent 파일 다운로드\naws s3 cp s3://aws-codedeploy-ap-northeast-2/latest/install . --region ap-northeast-2\n\n# 실행권한 추가\nchmod +x ./install\n\n# 설치 진행\nsudo ./install auto\n\n# agent가 실행 중인지 확인 PID가 나오면 정상적으로 실행 중인 상태입니다.\nsudo service codedeploy-agent status\n```\n\n만약 **sudo ./install auto** 커맨드 실행 결과 **/usr/bin/env: ruby: No such file or directory**가 나온다면 루비를 설치해야합니다. 아래와 같이 실행 후 다시 설치를 진행합니다.\n\n```\nsudo yum install ruby -y\n```\n\n추가로 재 부팅시 자동으로 code deploy agent가 실행될 수 있도록 스크립트를 생성하고 권한을 주겠습니다.\n\n```\n# 아래 스크립트를 입력합니다.\nsudo vim /etc/init.d/codedeploy-startup.sh\n\nsudo chmod +x /etc/init.d/codedeploy-startup.sh\n```\n\n> #!/bin/bash  \n> echo 'Starting codedeploy-agent'  \n> sudo service codedeploy-agent restart\n\n# nginx와 Docker로 무중단 배포하기\n\n## 1) 도커, 도커컴포즈 설치 및 프로젝트 파일 생성\n\n도커 컨테이너 위에서 애플리케이션을 구동하기위해서 ec2에 도커와 도커컴포즈를 설치합니다.\n\n```\nsudo yum install docker\n\n# 도커 컴포즈 다운로드\n$ sudo curl -L \"https://github.com/docker/compose/releases/download/1.25.4/docker-compose-$(uname -s)-$(uname -m)\" -o /usr/local/bin/docker-compose\n\n# 실행 권한 주기\n$ sudo chmod +x /usr/local/bin/docker-compose\n\n# 설치 완료됐는 지 확인하기\n$ docker-compose --version\n\n# bash: docker-compose: command not found 문구가 나오면 아래 커맨드 실행하기\n$ sudo ln -s /usr/local/bin/docker-compose /usr/bin/docker-compose\n```\n\n잠시 배포에 대해 짚고 넘어가겠습니다. 뒤에서 실습을 진행하겠지만, AWS Code Deploy에서 배포한 파일은 /home/ec2-user/build 에 복사되게 할 것입니다.\n\n배포 후 /home/ec2-user/build 이 폴더에는 Dockerfile 과 docker-compose.yml 파일이 존재할것이고 이를 이용해 컨테이너에 서버를 올릴 것입니다.\n\n혹시 docker ps 해봤더니 **Cannot connect to the Docker daemon at unix:///var/run/docker.sock. Is the docker daemon running?** 에러가 떴다면 docker service가 실행이 안된 것이므로 아래와 같이 명령을 내리겠습니다. [도커 설치 가이드](https://docs.docker.com/install/linux/linux-postinstall/#manage-docker-as-a-non-root-user)를 참고했습니다.\n\n```\nsudo groupadd docker\nsudo usermod -aG docker $USER\nsudo newgrp docker\n\n# 아래 커맨드 실행 결과 상태가 active여야 정상적인 것!\nsudo systemctl status docker\nsudo systemctl start docker\nsudo systemctl enable docker\n```\n\n이제 프로젝트에 Dockerfile과 docker-compose 파일을 작성하겠습니다.\n\n> 도커에 대해 기본지식이 필요합니다. 나중에 도커 관련 포스팅도 작성하겠습니다..!\n\n프로젝트 루트에 다음과 같이 Dockerfile을 작성합니다.\n\n```\n# 로컬과 같은 버전\nFROM node:12.14\n\n# 도커 이미지 만든 사람\nLABEL maintainer=\"joingaram@gmail.com\"\n\n# 3000포트로 도커 데몬에 연결\nEXPOSE 3000\n\n# 작업 디렉토리 & 자동으로 작업 디렉토리로 현재 위치 변경\nWORKDIR /usr/src/app\n\nCOPY package.json .\nCOPY yarn.lock .\nRUN yarn cache clean & yarn install --network-timeout 100000\nCOPY . .\n\nCMD [\"yarn\", \"start\"]\n\n```\n\n프로젝트 루트에 docker-compose.blue.yml 파일과 docker-compose.green.yml 파일을 생성한 후 아래와 같이 입력합니다. 포트만 3001, 3002로 다릅니다.\n\ndocker-compose.blue.yml\n\n```\nversion: \"3.7\"\nservices:\n  blog-server:\n    build:\n      context: .\n      dockerfile: Dockerfile\n    volumes:\n      - .:/usr/src/app\n    ports:\n      - \"3001:3000\"\n```\n\ndocker-compose.green.yml\n\n```\nversion: \"3.7\"\nservices:\n  blog-server:\n    build:\n      context: .\n      dockerfile: Dockerfile\n    volumes:\n      - .:/usr/src/app\n    ports:\n      - \"3002:3000\"\n```\n\n## 2) nginx로 로드밸런싱 설정\n\n우선 nginx를 설치합니다. 프록시 서버로 두 개의 도커 컨테이너를 로드밸런싱하는 역할을 담당할 것입니다.\n\n```\nsudo amazon-linux-extras install nginx1\nsudo service nginx start\n\n# 잘 실행되었는지 확인\nps -ef | grep nginx\n```\n\n이제 **nginx 설정 파일 수정** 작업을 하겠습니다.\n\n```\nsudo vi /etc/nginx/nginx.conf\n```\n\n다음과 같이 수정한 후 저장합니다.\n\n```\n# Load Balancing\nupstream blog-server {\n  least_conn;\n  server 127.0.0.1:3001 weight=5 max_fails=3 fail_timeout=10s;\n  server 127.0.0.1:3002 weight=10 max_fails=3 fail_timeout=10s;\n}\n\nserver {\n  listen 80;\n  server_name 서버 아이피; # 세미콜론 붙여주셔야 합니다.\n  location / {\n    proxy_pass http://blog-server;\n  }\n}\n```\n\n잘 설정했는 지 확인하고 nginx를 재시작합니다.\n\n```\n\nsudo nginx -t\nsudo service nginx restart\n```\n\n> [생활코딩nginx](https://opentutorials.org/module/384/4328)\n>\n> - Nginx는 4개의 로드밸런싱 메서드를 제공합니다. 그중 least_conn 은 연결이 가장 작은 서버로 요청을 보냅니다.\n> - weight=n : 업스트림 서버의 비중을 나타냅니다. 이 값을 2로 설정하면 그렇지 않은 서버에 비해 두배 더 자주 선택됩니다.\n> - max_fails=n : n으로 지정한 횟수만큼 실패가 일어나면 서버가 죽은 것으로 간주합니다.\n> - fail_timeout=n : max_fails가 지정된 상태에서 이 값이 설정만큼 서버가 응답하지 않으면 죽은 것으로 간주합니다.\n\n# Jenkins 배포 설정\n\n우선 Pipeline AWS STEP과 AWS Codedeploy 플러그인을 설치해줍니다. Pipeline AWS STEP은 S3로 소스 전송할 때, AWS Codedeploy로는 S3 버킷의 코드를 인스턴스에 배포하도록 설정하겠습니다.\n\n![process tree](https://raw.githubusercontent.com/devgaram/TIL/master/Infra/images/2020-02-24-img/22.PNG)\n\n![process tree](https://raw.githubusercontent.com/devgaram/TIL/master/Infra/images/2020-02-24-img/25.PNG)\n\n각 플러그인 사용방법\n\n- [Pipeline AWS STEP](https://github.com/jenkinsci/pipeline-aws-plugin#deployapi)\n- [AWS Codedeploy](https://github.com/jenkinsci/aws-codedeploy-plugin)\n\n## 1) S3 UPLOAD 작성\n\n먼저 AWS 접근을 위한 설정을 하겠습니다.\n\n**젠킨스 메인 -> Credentials -> System -> Global credentials -> Add Credentials** 를 차례로 클릭합니다.\n\nKind는 AWS Credentials를 선택하고 Access key와 secret key는 위에서 생성한 csv 파일을 보고 입력합니다.\n\n![process tree](https://raw.githubusercontent.com/devgaram/TIL/master/Infra/images/2020-02-24-img/23.PNG)\n\nOK 클릭 후 클릭해보면 아래와 같이 ID를 볼수 있습니다. 파이프라인 작성 시에 사용해야하므로 저장해둡니다.\n\n![process tree](https://raw.githubusercontent.com/devgaram/TIL/master/Infra/images/2020-02-24-img/24.PNG)\n\nAWS 연습하기 2탄에서 작업했던 파이프라인을 아래와 같이 수정합니다.\n\n- credentials에는 위에서 복사한 ID를 입력합니다.\n- Bucket에는 아까 생성한 S3 버킷 입력을 입력합니다.\n\n```\npipeline {\n   agent any\n\n   environment {\n       S3PATH = \"${env.JOB_NAME}\"\n   }\n   tools {\n      nodejs \"node\"\n   }\n\n   stages {\n      stage('Build') {\n         steps {\n            git 'https://github.com/devgaram/express-project-blog.git'\n         }\n      }\n\n      stage('Install dependencies') {\n          steps {\n              sh 'npm install -g yarn'\n              sh 'yarn install'\n          }\n      }\n      stage('Test') {\n          steps {\n              echo 'test..'\n              // yarn test\n          }\n      }\n      stage('Upload S3') {\n          steps {\n              echo 'Upload S3'\n              withAWS(credentials: '667cec8d-baa7-497f-b2db-2d424c121a22') {\n                s3Upload(file: '.', bucket: 'blog-server-bucket', path: \"${S3PATH}\", excludePathPattern: '**/node_modules/**, **/.git/**')\n              }\n          }\n      }\n      stage('Deploy') {\n          steps {\n              echo 'deploy'\n          }\n      }\n   }\n   post {\n        success {\n            echo 'successed'\n        }\n        failure {\n            echo 'failed'\n        }\n   }\n}\n```\n\n**Apply -> 저장 -> Build Now** 를 클릭하면 잘 실행될 것입니다.\n\n## 2) AWS CodeDeploy 설정\n\n**Jenkins 메인 -> blog-server 아이템 -> Pipeline Syntax -> Snippet Generator**를 선택합니다.\n\nSnippet Generators는 파이프라인 스크립트 생성에 도움을 주는 녀석입니다. 얘를 이용해 AWS CodeDeploy를 이용한 배포를 설정하겠습니다.\n\n**Steps 섹션 -> Sample Step - step:General Build Step 선택 -> Build Step - Deploy an application to AWS CodeDeploy 선택** 을 진행합니다.\n\n![process tree](https://raw.githubusercontent.com/devgaram/TIL/master/Infra/images/2020-02-24-img/26.PNG)\n\n- AWS CodeDeploy Application Name: EC2 인스턴스 이름\n- AWS CodeDeploy Deployment Group: CodeDeploy 그룹 명\n- AWS CodeDeploy Deployment Config: 배포 환경, 여기선 CodeDeployDefault.OneAtATime\n- AWS Region: AP_NORTHEAST_2\n- S3 Bucket: S3 버킷 이름\n\nUse Access/Secret keys 라디오 버튼을 선택하여 csv로 저장했던 내용을 입력해줍니다.\n\n마지막으로 Generate Pipeline Script 버튼을 클릭하면 나오는 텍스트를 복사합니다.\n\n![process tree](https://raw.githubusercontent.com/devgaram/TIL/master/Infra/images/2020-02-24-img/27.PNG)\n\n최종적으로 파이프라인을 아래와 같이 구성됩니다.\n\n```\npipeline {\n   agent any\n\n   environment {\n       S3PATH = \"${env.JOB_NAME}\"\n       AWS_SECRET_ACCESS_KEY = \"${env.AWS_SECRET_ACCESS_KEY}\"\n   }\n   tools {\n      nodejs \"node\"\n   }\n\n   stages {\n      stage('Build') {\n         steps {\n            git 'https://github.com/devgaram/express-project-blog.git'\n         }\n      }\n\n      stage('Install dependencies') {\n          steps {\n              sh 'npm install -g yarn'\n              sh 'yarn install'\n          }\n      }\n      stage('Test') {\n          steps {\n              echo 'test..'\n              // yarn test\n          }\n      }\n      stage('Upload S3') {\n          steps {\n              echo 'Upload S3'\n              withAWS(credentials: '667cec8d-baa7-497f-b2db-2d424c121a22') {\n                s3Upload(file: '.', bucket: 'blog-server-bucket', path: \"${S3PATH}\", excludePathPattern: '**/node_modules/**, **/.git/**')\n              }\n          }\n      }\n      stage('Deploy') {\n          steps {\n              echo 'deploy'\n              step([$class: 'AWSCodeDeployPublisher', applicationName: 'blog-server', awsAccessKey: 'AKIASDBC2NNSJWD4F76B', awsSecretKey: \"${AWS_SECRET_ACCESS_KEY}\", credentials: 'awsAccessKey', deploymentConfig: 'CodeDeployDefault.OneAtATime', deploymentGroupAppspec: false, deploymentGroupName: 'blog-server-CodeDeploy-group', excludes: '', iamRoleArn: '', includes: '**', proxyHost: '', proxyPort: 0, region: 'ap-northeast-2', s3bucket: 'blog-server-bucket', s3prefix: '', subdirectory: '', versionFileName: '', waitForCompletion: false])\n          }\n      }\n   }\n   post {\n        success {\n            echo 'successed'\n        }\n        failure {\n            echo 'failed'\n        }\n   }\n}\n\n\n```\n\n## 3) AWS Deploy 설정 파일\n\nAWS CodeDeploy는 프로젝트 루트에 있는 appspec.yml를 이용하여 배포를 진행합니다. 자세한 내용은 [aws 가이드](https://docs.aws.amazon.com/ko_kr/codedeploy/latest/userguide/reference-appspec-file.html#appspec-reference-server)에서 확인하세요.\n\n프로젝트 루트에 appspec.yml 파일 생성 후 아래와 같이 입력합니다. AWS CodeDeploy가 ec2의 /home/ec2-user/build/ 위치에 S3 버킷에 있는 코드를 옮기도록 설정했습니다. 배포 후에는 execute-deploy.sh 작업을 통해 도커 컨테이너를 올릴 것입니다.\n\n```\nversion: 0.0\nos: linux\nfiles:\n  - source:  /\n    destination: /home/ec2-user/build/\nhooks:\n  AfterInstall: # 배포 후\n    - location: execute-deploy.sh\n      timeout: 180\n```\n\nexecute-deploy.sh\n\n```\n#!/bin/bash\ncd /home/ec2-user/build\nchmod +x ./deploy.sh\n./deploy.sh > /dev/null 2> /dev/null < /dev/null &\n```\n\n현재 블루 컨테이너가 돌고 있다면 그린 컨테이너를 구동한 후 블루 컨테이너를 종료합니다. 이 방법을 통해 무중단 배포를 할 수 있는 것입니다. 아래와 같이 작성합니다.\n\ndeploy.sh\n\n```\n#!/bin/bash\n\nDOCKER_APP_NAME=blog-server\n\nEXIST_BLUE=$(docker-compose -p ${DOCKER_APP_NAME}-blue -f docker-compose.blue.yml ps | grep Up)\n\nif [ -z \"$EXIST_BLUE\" ]; then\n\techo \"blue up\"\n\tdocker-compose -p ${DOCKER_APP_NAME}-blue -f docker-compose.blue.yml up -d\n\n\tsleep 10\n\n\tdocker-compose -p ${DOCKER_APP_NAME}-green -f docker-compose.green.yml down\nelse\n\techo \"green up\"\n\tdocker-compose -p ${DOCKER_APP_NAME}-green -f docker-compose.green.yml up -d\n\n\tsleep 10\n\n\tdocker-compose -p ${DOCKER_APP_NAME}-blue -f docker-compose.blue.yml down\nfi\n```\n\n자 이제 실제로 커밋 푸시하면 배포까지 완료되는 것을 볼 수 있습니다!\n\n![process tree](https://raw.githubusercontent.com/devgaram/TIL/master/Infra/images/2020-02-24-img/28.PNG)\n\n> 추가로 해야할 것\n>\n> - S3에 왜 node_modules랑 .git도 올라가는 거지..? 분명 제외시켰는 데..\n\n참고\n\n- [기억보단 기록을](https://jojoldu.tistory.com/265)\n- https://velog.io/@jeff0720/Travis-CI-AWS-CodeDeploy-Docker-%EB%A1%9C-%EB%B0%B0%ED%8F%AC-%EC%9E%90%EB%8F%99%ED%99%94-%EB%B0%8F-%EB%AC%B4%EC%A4%91%EB%8B%A8-%EB%B0%B0%ED%8F%AC-%ED%99%98%EA%B2%BD-%EA%B5%AC%EC%B6%95%ED%95%98%EA%B8%B0-2\n- https://medium.com/faun/create-a-continuous-delivery-pipeline-using-jenkins-gitlab-github-and-deploy-on-aws-ec2-with-3aaadf073196\n"}}},"next":{"repository":{"post":{"__typename":"GitHub_Blob","oid":"a235f572d3b9bbda67147d2603cbeadcb82d0eda","text":"# AWS 연습하자 1탄 - AWS EC2 인스턴스에 Jenkins 서버 구축하기\n\n- Title : AWS 연습하자 1탄 - AWS EC2 인스턴스에 Jenkins 서버 구축하기\n- Date : 2020-02-24\n- Category: Infra\n\nAWS 연습하기 1탄에서는 AWS EC2에 인스턴스를 생성하고 Jenkins를 구축하는 과정을 다뤄보겠습니다. AWS에서 제공하는 [가이드](https://d1.awsstatic.com/Projects/P5505030/aws-project_Jenkins-build-server.pdf)를 참고하여 실습을 진행했습니다.\n\n# AWS EC2 인스턴스를 생성하기\n\n먼저 [Amazon EC2 console](https://console.aws.amazon.com/ec2/)로 이동해서 우측 상단의 Region을 서울로 설정합니다.\n\n인스턴스 생성에 앞서 키 페어부터 생성하도록 하겠습니다.\n왼쪽 네비게이션 바에서 **네트워크 및 보안 -> 키 페어 -> 키 페어 생성** 을 클릭합니다.\n\n![process tree](https://raw.githubusercontent.com/devgaram/TIL/master/Infra/images/2020-02-24-img/1.PNG)\n\n이름을 입력 후 파일 형식은 pem을 선택하고 키 페어 생성 버튼을 누르면 .pem 파일 형식의 개인키가 다운로드됩니다. 인스턴스 생성, 연결 시 필요하므로 **꼭 잘 보관해두세요**.\n\n> 윈도우 10은 openssh가 내장되어있어 ssh 명령어를 사용할 수 있습니다. ssh를 지원하지않는 경우라면 ppk를 사용하시면 됩니다.\n\n이제 인스턴스를 생성하겠습니다. **EC2 대시보드 -> 인스턴스 시작 섹션 -> 인스턴스 시작** 을 선택합니다.\n\n![process tree](https://raw.githubusercontent.com/devgaram/TIL/master/Infra/images/2020-02-24-img/2.PNG)\n\n**단계 1: AMI 선택** 에서 Amazon Linux AMI 프리 티어 사용 가능한 AMI를 선택하세요.\n\n![process tree](https://raw.githubusercontent.com/devgaram/TIL/master/Infra/images/2020-02-24-img/3.PNG)\n\n**단계 2: 인스턴스 유형 선택** 에서 디폴트로 선택된 t2.micro를 선택한 후 다음: 인스턴스 세부 정보 구성을 선택합니다.\n\n**단계 3: 인스턴스 세부 정보 구성** 에서 디폴트 값을 그대로 사용하겠습니다. 다음:스토리지 추가를 선택합니다.\n\n**단계 4: 스토리지 추가** 에서 프리티어는 최대 30GB의 EBS 범용(SSD) 또는 마그네틱 스토리지를 사용할 수 있습니다. 크기 항목에 8로 되어있는 것을 30으로 수정한 후 다음:태그 추가를 클릭합니다.\n\n**단계 5: 태그 추가** 에서 여러 인스턴스를 태그로 검색이나 그룹짓기 위해 아래와 같이 태그를 추가합니다.\n\n![process tree](https://raw.githubusercontent.com/devgaram/TIL/master/Infra/images/2020-02-24-img/4.PNG)\n\n**단계 6: 보안 그룹 구성** 에서 인스턴스 방화벽 역할을 하는 보안 그룹을 설정하겠습니다. 보안그룹에서 인바운드와 아웃바운드 트래픽을 인스턴스 레벨에서 컨트롤할 수 있습니다.\n\n우선 디폴트로 있는 SSH 유형의 소스를 내 IP로 변경합니다. SSH의 소스를 모든 IPv4(0.0.0.0/0)으로 설정하는 것은 보안상 추천하지않습니다.\n\nHTTP, HTTPS 유형을 추가하고 소스를 0.0.0.0/0으로 설정합니다. 외부에서 이 서버로 접속하려면 꼭 설정해야합니다.\n\n![process tree](https://raw.githubusercontent.com/devgaram/TIL/master/Infra/images/2020-02-24-img/5.PNG)\n\n**검토 및 시작 -> 시작 -> 기존 키 페어 선택 또는 새 키 페어 생성 모달** 을 띄웁니다. 앞에서 키 my-key-pair 이름으로 키 페어를 생성해놨던 것을 여기서 사용할 것입니다. 아래와 같이 선택한 후 인스턴스 시작을 클릭합니다.\n\n![process tree](https://raw.githubusercontent.com/devgaram/TIL/master/Infra/images/2020-02-24-img/6.PNG)\n\n인스턴스 상태가 running이 되면 정상적으로 인스턴스 생성 및 실행이 완료된 것입니다.\n\n![process tree](https://raw.githubusercontent.com/devgaram/TIL/master/Infra/images/2020-02-24-img/7.PNG)\n\n# Jenkins 설치하기\n\n방금 생성한 ec2 인스턴스에 젠킨스를 구축하려면 보안 그룹을 편집해야합니다.\n\n보안그룹에서 HTTPS 프로토콜을 제거하고 사용자 지정 TCP 규칙을 추가하겠습니다.\n\n스크롤을 오른쪽으로 해보면 보안그룹이 보입니다. 바로 밑의 링크를 클릭하여 인스턴스 보안그룹으로 이동합니다.\n\n![process tree](https://raw.githubusercontent.com/devgaram/TIL/master/Infra/images/2020-02-24-img/8.PNG)\n\n아래 사진과 같이 EC2 인스턴스를 생성할 때 설정한 보안 그룹의 내용을 확인할 수 있습니다. 이제 편집 버튼을 눌러서 수정하겠습니다.\n\n![process tree](https://raw.githubusercontent.com/devgaram/TIL/master/Infra/images/2020-02-24-img/9.PNG)\n\nHTTPS 프로토콜을 삭제하고 사용자 지정 TCP 규칙을 추가 후 포트 범위로는 8080을 입력합니다.\n\n![process tree](https://raw.githubusercontent.com/devgaram/TIL/master/Infra/images/2020-02-24-img/10.PNG)\n\n본격적으로 젠킨스를 설치하고 환경을 설정하겠습니다.\n\n윈도우10에서 cmd 창을 킨 다음 my-key-pair.pem이 있는 폴더로 이동합니다.\n\n```\nC:\\Users\\USER>cd C:\\Users\\USER\\github\\project\\devrami-blog\\aws\n```\n\n개인키 my-key-pair.pem을 가지고 인스턴스에 접속하겠습니다.\n\n```\nssh -i my-key-pair.pem ec2-user@퍼블릭DNS\n```\n\n**Are you sure you want to continue connecting\n(yes/no)?** 가 뜨면 yes를 입력한 후 엔터를 누릅니다.\n\n아래와 같은 문구를 보게되면 인스턴스에 성공적으로 접속된 것입니다.\n\n![process tree](https://raw.githubusercontent.com/devgaram/TIL/master/Infra/images/images/2020-02-24-img/11.PNG)\n\n다음과 같이 커맨드를 입력합니다.\n\n```\nsudo yum update –y\n```\n\n> - Yum은 RPM 기반의 시스템을 위한 자동 업데이트 겸 패키지 설치/제거 도구\n> - RPM은 원래 레드햇에서 사용되었던 패키지 파일이었지만 현재는 많은 RPM 기반 배포판(RPM 패키지, RPM 패키지 관리 도구)이 사용되고 있습니다. 즉, RPM을 사용하면 각종 소프트웨어의 설치 및 업데이트를 굉장히 편하게 할 수 있습니다.\n\nAWS는 기본적으로 OS 설치시 타임존이 UTC로 맞춰져있어서 한국 시간에 맞추기위해 다음 작업을 추가로 하겠습니다.\n\n```\n# 날짜확인\ndate\n\nsudo rm /etc/localtime\nsudo ln -s /usr/share/zoneinfo/Asia/Seoul /etc/localtime\n\n```\n\nyum이 젠킨스 설치 위치를 알 수 있도록 젠킨스 레파지토리를 추가합니다.\n\n```\nsudo wget -O /etc/yum.repos.d/jenkins.repo http://pkg.jenkins-ci.org/redhat/jenkins.repo\n```\n\n패키지를 설치할 수 있게 젠킨스 키 파일을 rpm에 추가한다.\n\n```\n sudo rpm --import https://pkg.jenkins.io/redhat/jenkins.io.key\n```\n\n> rpm 포맷은 전자서명을 첨부하여 위변조 여부를 확인할 수 있습니다. rpm 패키지가 위변조 되면 에러가 발생합니다. 다른 제조사가 서명했는데 서명자의 검증용 키가 없을 경우도 검증이 실패하게 되는 데 이럴 경우 --import 옵션을 이용하여 검증용 키를 rpm에 추가하면 됩니다.\n\n젠킨스를 설치하겠습니다.\n\n```\nsudo yum install jenkins -y\n```\n\n젠킨스 서버를 시작합니다.\n\n```\n sudo service jenkins start\n```\n\n> 다음과 같은 에러가 발생하면 자바 버전 문제로 자바8로 재 설치한 후 다시 서버를 시작하시면 됩니다.  \n> **Starting jenkins (via systemctl): Job for jenkins.service failed because the control process exited with error code. See \"systemctl status jenkins.service\" and \"journalctl -xe\" for details.**\n>\n> ```\n> sudo yum remove java-1.7.0-openjdk\n> sudo yum install java-1.8.0\n> ```\n\n# Jenkins 설정하기\n\n브라우저에서 http://퍼블릭DNS:8080 로 접속하면 아래와 같은 화면이 보일 것입니다.\n\n![process tree](https://raw.githubusercontent.com/devgaram/TIL/master/Infra/images/2020-02-24-img/12.PNG)\n\n근데 매번 8080 포트 입력하기 귀찮죠? Nginx를 프록시로 사용해서 80포트로 들어오면 8080으로 연결되게 추가 설정을 진행하도록 하겠습니다.\n\n우선 Nginx를 설치해줍니다. nginx는 yum으로 설치할 수 없어서 아래처럼 설치해줍니다.\n\n```\nsudo amazon-linux-extras install nginx1\n```\n\nnginx 서비스를 시작합니다.\n\n```\nsudo service nginx start\n```\n\n이제 포트없이 퍼블릭 도메인으로 들어가보면 아래 화면처럼 보일 것입니다.\n\n![process tree](https://raw.githubusercontent.com/devgaram/TIL/master/Infra/images/2020-02-24-img/17.PNG)\n\n자! 그럼 젠킨스 서버로 프록시하기위해 추가 설정을 하도록하겠습니다.\n\nnginx 설정 파일에서 location에 proxy_pass 정보를 추가하겠습니다.\n\n```\nsudo vi /etc/nginx/nginx.conf\n```\n\n다음과 같이 입력하면됩니다.\n![process tree](https://raw.githubusercontent.com/devgaram/TIL/master/Infra/images/2020-02-24-img/18.PNG)\n\n저장 후 nginx 서비스를 재시작하면 처음에 8080포트로 들어갔을 때 봤던 화면이 포트없이 접속해도 잘 보이는 것을 확인할 수 있을 것입니다.\n\n```\nsudo service nginx restart\n```\n\n이제 젠킨스 내부에서 설정을 해보겠습니다.\n\n접속을 위해 **/var/lib/jenkins/secrets/initialAdminPassword** 에 있는 패스워드를 찾습니다.\n\n```\n sudo cat /var/lib/jenkins/secrets/initialAdminPassword\n```\n\n위 커맨드로 나오는 내용을 복사하여 Administrator password에 입력한 후 continue 버튼을 클릭합니다.\n\nCustomize Jenkins 페이지에서 **Install suggested plugins** 를 선택합니다. 플러그인 설치가 완료되면 Create First Admin User 페이지에서 관리자 계정을 생성합니다. 여기까지 완료했으면 이 페이지를 볼 수 있을 것입니다.\n\n![process tree](https://raw.githubusercontent.com/devgaram/TIL/master/Infra/images/2020-02-24-img/13.PNG)\n\n[AWS 연습하자 2탄 - Jenkins와 Github 연동하기](/post/2020-02-25-how-to-use-aws) 로 이어집니다.\n"}}}},"pageContext":{"id":"5a30bac6bb7fcaecb510c9cd70735f33591e0b4c","previousPostId":"780e861698b99b29b1cd69f14ca08ded2b5349b5","nextPostId":"a235f572d3b9bbda67147d2603cbeadcb82d0eda"}},"staticQueryHashes":["2841359383"]}