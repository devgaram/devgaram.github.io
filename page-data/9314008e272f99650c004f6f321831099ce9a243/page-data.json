{"componentChunkName":"component---src-templates-blog-post-js","path":"/9314008e272f99650c004f6f321831099ce9a243","result":{"data":{"site":{"siteMetadata":{"title":"보노보노의 평화로운 개발 이야기"}},"current":{"repository":{"post":{"__typename":"GitHub_Blob","oid":"9314008e272f99650c004f6f321831099ce9a243","text":"# Arrow function\n\nDate: Jun 14, 2020\n\n- Title : Arrow function\n- Date : 2020-06-14\n- Category : Javascript\n\n# 화살표 함수\n\nES6에 익명 함수를 간단하게 표현할 수 있는 화살표 표현식이 추가되었다.\n\n## 기존 익명 함수 vs 화살표 함수\n\n콜백 함수로 실행될 때 기존의 익명 함수는 글로벌 컨텍스트에 접근 하였으나, 함수 화살표 표현식은 콜백 함수를 할당한 당시의 컨텍스트를 그대로 활용한다. \n\n```javascript\nvar name = 'global';\nfunction Person() {\n\tthis.name = 'garam';\n\n\tsetTimeout(() => alert(`my name is ${this.name}`), 100); //garam\n\tsetTimeout(function() {\n\t\talert(`Global name is ${this.name}`); // global\n\t}, 100);\n}\n\nlet person = new Person();\n```\n\n화살표 함수는 함수 선언 시 this가 바인딩 할 객체가 **정적**으로 결정된다. 즉 일반 함수와 달리 화살표 함수는 항상 **상위 스코프의 this**를 가리킨다. 이를 `Lexical this`라고 한다.\n\n> 자바 스크립트는 함수 호출 시 this가 바인딩 할 객체가 **동적**으로 결정된다. 함수 선언 시 this에 바인딩 할 객체가 정적으로 결정되는 것이 아니라 **함수를 호출할 때 함수가 어떻게 호출 되었는지에 따라 this가 바인딩할 객체를 동적**으로 결정한다.\n\n```javascript\nconst test = {\n  name: 'test object',\n  createAnonFunction: function() {\n    return function() {\n      console.log(this.name);\n      console.log(arguments);\n    };\n  },\n\n  createArrowFunction: function() {\n    return () => {\n      console.log(this.name);\n      console.log(arguments);\n    };\n  }\n};\n\nconst anon = test.createAnonFunction('hello', 'world'); \n// undefined\n// {}\nconst arrow = test.createArrowFunction('hello', 'world');\n// test object\n// { '0': 'hello', '1': 'world' }\n```\n\n기존 익명 함수는 함수가 호출 되었을 때의 컨텍스트를 가진다. 즉 `test.createAnonFunction`이 글로벌 컨텍스트에서 호출 되었기에 `this.name`과 `arguments` 객체를 얻을 수 없다. \n\n## 화살표 함수 언제 쓰지 말아야 할까?\n\n### 객체의 메소드를 정의할 때\n\n```javascript\nconst calculate = {\n  array: [1, 2, 3],\n  sum: () => {\n    console.log(this === window); // => true\n    return this.array.reduce((result, item) => result + item);\n  }\n};\nconsole.log(this === window); // => true\n// Throws \"TypeError: Cannot read property 'reduce' of undefined\"\ncalculate.sum();\n```\n\n메소드로 정의한 화살표 함수 내부의 this는 메소드를 소유한 객체를 가리키지 않고 상위 컨텍스트인 `window`를 가리킨다. 아래와 같이 사용 해야 한다.\n\n```javascript\nconst calculate = {  \n  array: [1, 2, 3],\n  sum() {\n    console.log(this === calculate); // => true\n    return this.array.reduce((result, item) => result + item);\n  }\n};\ncalculate.sum(); // => 6\n```\n\n### 프로토타입 방식으로 객체 메소드 정의할 때\n\n```javascript\nfunction MyCat(name) {\n  this.catName = name;\n}\nMyCat.prototype.sayCatName = () => {\n  console.log(this === window); // => true\n  return this.catName;\n};\nconst cat = new MyCat('Mew');\ncat.sayCatName(); // => undefined\n```\n\n```javascript\nfunction MyCat(name) {\n  this.catName = name;\n}\nMyCat.prototype.sayCatName = function() {\n  console.log(this === cat); // => true\n  return this.catName;\n};\nconst cat = new MyCat('Mew');\ncat.sayCatName(); // => 'Mew'\n```\n\n### 이벤트 리스너 콜백함수\n\n```javascript\nconst button = document.getElementById('myButton');\nbutton.addEventListener('click', () => {\n  console.log(this === window); // => true\n  this.innerHTML = 'Clicked button';\n});\n```\n\n`this`는 글로벌 컨텍스트에 바인딩 된다. 클릭 이벤트가 발생하면 브라우저는 버튼 컨텍스트와 함께 핸들러 함수를 실행 시킨다. 화살표 표현식으로 정의된 함수의 경우는 정적으로 `this`가 바인딩 되기 때문에 `this`가 동적으로 변경되는 이벤트 콜백 함수로 적절하지 않다.\n\n```javascript\nconst button = document.getElementById('myButton');\nbutton.addEventListener('click', function() {\n  console.log(this === button); // => true\n  this.innerHTML = 'Clicked button';\n});\n```\n\n기존 익명 함수는 타켓 엘리먼트에 의존하여 this를 바꾸는 것을 허용한다.\n\n### 생성자 함수\n\n모든 객체는 자신의 `prototype`으로 부터 `constructor` 속성을 상속하기 때문에 `prototype` 속성을 가지고 있어야 한다. 하지만 화살표 표현식으로 정의된 함수는 `prototype` 속성이 없어서 생성자 함수로 사용될 수 없다.\n\n```javascript\nconst Foo = () => {};\n\n// 화살표 함수는 prototype 프로퍼티가 없다\nconsole.log(Foo.hasOwnProperty('prototype')); // false\n\nconst foo = new Foo(); // TypeError: Foo is not a constructor\n```\n"}}},"previous":{"repository":{"post":{"__typename":"GitHub_Blob","oid":"1d97f7e13119ff2ba29e19b7c06f0633ab1007fe","text":"# Git cherry-pick으로 필요한 커밋만 골라내기\n\nDate: Jun 17, 2020\n\n- Title : Git cherry-pick으로 필요한 커밋만 골라내기\n- Date : 2020-03-17\n- Category : Git\n\n# Git Cherry-pick\n\n현재 상황\n\n- feature/cherry에 작업한 결과를 Pull Request 보낸 상태\n- 브랜치가 꼬여서 해당 브랜치에서 작업한 커밋 외의 것도 보이는 상태\n\n원하는 결과\n\n- feature/cherry 에서 원하는 커밋만 남긴 후 다시 푸시 하고 싶음(PR 재 요청X)\n\n## 실습\n\n### feature/cherry 브랜치 로그 확인\n\n```bash\ngit log\n```\n\n`결과 예시: commit 4564415dfbdsfgsdgsd (feature/cherry)` \n\n### 커밋들을 저장할 임시 브랜치 생성(base branch에서 새 브랜치 생성)\n\n```bash\ngit checkout -b feature/cherry-correct\n```\n\n### cherry-pick 실행\n\n```bash\ngit cherry-pick 4564415dfbdsfgsdgsd(가져 가고 싶은 커밋넘버)\n```\n\n### feature/cherry 브랜치 reset\n\n```bash\ngit checkout feature/cherry\ngit reset feature/cherry-correct --hard\ngit push origin feature/cherry -f\n```\n\n`--hard` 옵션이 없을 경우 기존 브랜치에서 작업한 내용이 `unstaged`된 채 남아 있으니 필요한 경우가 아니라면 옵션을 추가 하는 것이 좋다.\n\n참고\n\n[https://medium.com/react-native-seoul/git-cherry-pick-사용법-fe1a3346bd27](https://medium.com/react-native-seoul/git-cherry-pick-%EC%82%AC%EC%9A%A9%EB%B2%95-fe1a3346bd27)\n"}}},"next":{"repository":{"post":{"__typename":"GitHub_Blob","oid":"3c7c4a385e5202b5904a3a48543da5209ff30efa","text":"# Strict Mode\n\nDate: Jun 13, 2020\n\n- Title : Strict Mode\n- Date : 2020-06-13\n- Category : Javascript\n\n# Strict mode\n\n- Javscript ES5 이후로 권장하는 코딩 스타일 중 하나는 `Strict mode`를 사용하는 것이다.\n- Javascript 언어의 문법을 보다 엄격히 적용하여 기존에는 **무시 되던 오류를 발생**시킬 가능성이 높거나 Javascript **엔진의 최적화 작업에 문제**를 일으킬 수 있는 코드에 대해 **명시적인 에러**를 발생시킨다.\n- Strict mode는 ES5에 정의되어 있으며 브라우저가 Strict mode를 지원하지 않아도 실행하는 데 전혀 무관하니 Strict mode로 설정해서 개발하는 것이 좋다.\n- Strict mode를 지원하지 않는 IE9 이전 버전에서는 문자열로 무시되고 일반 모드로 실행된다.\n\n전역 strict mode 사용 방법(전역에 적용하는 것은 피하자!)\n\n```javascript\n\"use strict\";\n```\n\n파일 상단에 키워드를 넣으면 전체 소스 파일에 대해서 엄격 모드로 실행된다.\n\n함수 내부에서 strict mode 사용 방법\n\n```javascript\n(function() {\n\t\"use strict\";\n}());\n```\n\n즉시 실행 함수로 스크립트 전체를 감싸서 스코프를 구분하고 즉시 실행 함수의 선두에 strict mode를 적용한다.\n\n## 예시\n\nvar, const, let 없이 변수를 사용할 때 레퍼런스 오류 발생\n\n```javascript\n(function(){\n\t\"use strict\";\n\tx = 1;\n\tconsole.log(x); // Uncaught ReferenceError: x is not defined\n}());\n```\n\n변수나 함수를 삭제하려고 하면 문법 오류 발생\n\n```javascript\n(function(){\n\t\"use strict\";\n\tlet x = 1;\n\tfunction fun() {}\n\n\tdelete x;\n\tdelete fun;\n\t// SyntaxError: Delete of an unqualified identifier in strict mode.\n\n}());\n```\n\n중복되는 파라미터명이 있을 때 문법 오류 발생\n\n```javascript\n(function(win, doc, doc){\n\t\"use strict\";\n\tconsole.log(doc); // SyntaxError: Duplicate parameter name not allowed in this context\n}(window, document));\n```\n\nargument를 설정하려고 하면 문법 오류 발생\n\n```javascript\n(function(win, doc, doc){\n\t\"use strict\";\n\targuments = [1, 2, 3];\n\tconsole.log(arguments); // SyntaxError: Unexpected eval or arguments in strict mode\n}(window, document));\n```\n"}}}},"pageContext":{"id":"9314008e272f99650c004f6f321831099ce9a243","previousPostId":"1d97f7e13119ff2ba29e19b7c06f0633ab1007fe","nextPostId":"3c7c4a385e5202b5904a3a48543da5209ff30efa"}},"staticQueryHashes":["2685952063","2841359383"]}