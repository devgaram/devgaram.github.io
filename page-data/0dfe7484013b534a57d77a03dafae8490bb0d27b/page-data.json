{"componentChunkName":"component---src-templates-blog-post-js","path":"/0dfe7484013b534a57d77a03dafae8490bb0d27b","result":{"data":{"site":{"siteMetadata":{"title":"보노보노의 평화로운 개발 이야기"}},"current":{"repository":{"post":{"__typename":"GitHub_Blob","oid":"0dfe7484013b534a57d77a03dafae8490bb0d27b","text":"# 자바스크립트 async, await, promise\n\n- Title : 자바스크립트 async, await, promise\n- Date : 2020-05-20\n- Category : Javascript\n\n# Rules for Promise\n\n1. 비 동기나 블로킹 코드 작업을 하고 싶을 때 `Promise`를 사용하자.\n2. `resolve`는 `then`과  `reject`는  `catch` 와 맵핑된다.\n3. `.catch` `.then` 메소드를 사용하자.\n4. 꼭 실행 해야 할 코드가 있다면 `.finally` 를 사용하자.\n5. 여러 개의 `Promise`가 모두 완료 되었을 때 작업을 진행하고 싶다면 `Promise.all(iterable)`를 사용하자. `Promise.all`은 배열 내 모든 프로미스의 이행(또는  첫 번째 거부)를 기다린다.\n\n    ```jsx\n    const p1 = Promise.resolve(3);\n    const p2 = 1337;\n    const p3 = new Promise((resolve, reject) => {\n      setTimeout(() => {\n        resolve(\"foo\");\n      }, 100);\n    }); \n\n    // p2는 프로미스가 아니지만 이행 결과 배열에는 포함된다.\n    Promise.all([p1, p2, p3]).then(values => { \n      console.log(values); // [3, 1337, \"foo\"] \n    });\n\n    // 매개변수 배열이 빈 것과 동일하게 취급하므로 이행함\n    const p4 = Promise.all([1,2,3]); // Promise {<resolved>: Array(3)} [1, 2, 3]\n\n    // 프로미스 거부됨\n    const p5 = Promise.all([1,2,3, Promise.reject(555)]); // Uncaught (in promise) 555\n    ```\n\n# Rules for async-await\n\n1. `async function` 은 `Promise`를 리턴한다.\n2. 코드에서 직접 `Promise`를 직접 리턴하지않았어도 async 함수는 Promise를 리턴한다는 것을 기억하자.\n3. `await` 블록은 `async` 함수 안에 위치한다.\n4. `async` 함수에는 두 개 이상의 `await` 구문을 사용할 수 있다.\n5. `async await`를 사용할 때, `try~catch`로 에러 핸들링을 하자.\n6. `iterator`과 `loop`에서 `await`를 사용하며 코드가 순차적으로 실행될 것 같지만 사실은 동시에 실행된다.\n7. `await`는 하나의 `Promise`를 위해서만 사용하자.\n8. `await` 블록은 항상 `async` 함수 내에 있다. `promise`가 `resolve`되면 다음 코드가 실행된다는 것을 기억하자. \n\n# Promise vs async-await\n\n1. `async` 함수는 `promise`를 반환하고 반대도 성립된다. 즉, `promise`를 반환하는 모든 함수는 `async` 함수로 사용할 수 있다.\n2. function2의 아웃풋이 function1의 아웃풋에 따라 달라진다면 `await`를 사용하자.\n3. 두 개의 함수가 순차적으로 실행될 필요가 없다면 `await`를 쓸 필요가 없다.\n4. Promise를 동시에 실행시키고 싶다면 `Promise.all`을 사용하자\n5. `await`는 `blocking code`를 만든다는 사실을 잊지 말자.\n6. 많은 await 구문이 있는 async 함수를 사용하는 것보다는 여러 개의 async 함수로 쪼개서 사용하자.\n    - 너무 많은 `blocking code`는 좋지 않다.\n    - 비동기 코드가 수평적으로 실행된다는 것을 강조할 수 있다.\n\n[JavaScript: Promises or async-await](https://medium.com/better-programming/should-i-use-promises-or-async-await-126ab5c98789)\n\n# Symbol\n\n```jsx\n// 위 코드는 매 번 새로운 심볼을 생성한다.\nconst sym1 = Symbol();\nconst sym2 = Symbol(\"foo\");\nconst sym3 = Symbol(\"foo\");\n```\n\n1. 이름 충돌의 위험 없이 **속성의 키**로 쓰기 위해 생성하고 사용할 수 있는 값이다.\n2. Boolean, String, Number 같이 원시 데이터 형의 일종이다.\n3. `Symbol()` 로 부터 반환되는 모든 심볼 값은 고유하다.\n4. 객체 속성에 대한 `식별자`로 사용할 수 있다.\n5. `Object.getOwnPropertySymbols()` 메서드를 이용하여 객체의 심볼 속성을 찾을 수 있다. 모든 객체는 심볼 속성이 없는 상태로 초기화 되기 때문에 해당 객체에 심볼 속성을 설정하기 전까지는 빈 배열을 반환한다는 점에 유의하자.\n"}}},"previous":{"repository":{"post":{"__typename":"GitHub_Blob","oid":"3de93d97b060a371fac7a45301b7aad6da6295fb","text":"# Destructuring assignment\n\n- Title : destructuring assignment\n- Date : 2020-06-06\n- Category : Javascript\n\n# 구조 분해 할당\n\n## 1. 배열 구조 분해 할당\n\n```jsx\nlet arr = ['garam', 'lee']\n\n// let firstName = arr[0]\n// let lastName = arr[1]\n// 위와 같은 작업을 구조 분해 할당으로 간단히 할 수 있다.\n\nlet [firstName, lastName] = arr;\n```\n\n`split` 메소드처럼 배열을 리턴하는 함수를 사용할 때 구조 분해 할당을 사용하면 좋다.\n\n```jsx\nlet [firstName, lastName] = 'garam lee'.split(' ');\n```\n\n### 1) 원본 배열에 영향을 주지 않는다.\n\n구조 분해 할당은 원본 배열을 복사해서 각 변수에 할당하여 원본 배열에 영향이 없다.\n\n```jsx\nlet arr = ['garam', 'lee'];\nlet [firstName, lastName] = arr;\nconsole.log(arr); // [\"garam\", \"lee\"]\n```\n\n### 2) `,`를 사용하여 배열의 요소를 생략할 수 있다.\n\n```jsx\nlet [firstName, , title] = [\"Julius\", \"Caesar\", \"Consul\", \"of the Roman Republic\"];\nconsole.log(firstName, title); // Julius Consul\n```\n\n### 3) 배열이 아닌 **iterable 가능한 객체**들도 구조 분해 할당을 할 수 있다.\n\n```jsx\nlet [a, b, c] = \"abc\"; // [\"a\", \"b\", \"c\"];\nlet [one, two, three] = new Set([1, 2, 3]); // [1, 2, 3]\n```\n\n### 4) 객체의 속성에도 할당을 할 수 있다.\n\n```jsx\nlet user = {};\n[user.firstName, user.lastName] = \"garam lee\".split(\" \");\nconsole.log(user); // {firstName: \"garam\", lastName: \"lee\"}\n```\n\n### 5) 객체의 key-value 로 루프를 돌릴 때 구조 분해 할당을 함께 사용할 수 있다.\n\n```jsx\nlet user = {\n  name: \"John\",\n  age: 30\n};\n\nfor (let [key, value] of Object.entries(user)) {\n  console.log(`${key}:${value}`); // name:John, then age:30\n}\n\nlet user2 = new Map();\nuser2.set(\"name\", \"John\");\nuser2.set(\"age\", \"30\");\n\nfor (let [key, value] of user2) {\n  console.log(`${key}:${value}`); // name:John, then age:30\n}\n```\n\n### 6) 변수를 SWAP할 때 사용할 수 있다.\n\n두 변수에 대한 배열을 생성한 후에 구조 분해 할당을 하기 때문에 swap이 가능하다.\n\n```jsx\nlet guest = \"Jane\";\nlet admin = \"Pete\";\n\n[guest, admin] = [admin, guest];\nconsole.log(guest, admin); // Pete Jane\n```\n\n### 7)  `...` 를 사용하여 배열의 남은 요소를 할당할 수 있다.\n\n```jsx\nlet [name1, name2, ...rest] = [\"Julius\", \"Caesar\", \"Consul\", \"of the Roman Republic\"];\nconsole.log(name1, name2); // Julius Caesar\nconsole.log(rest, rest.length); // [\"Consul\", \"of the Roman Republic\"] 2\n```\n\n### 8) default value 할당하기\n\n할당될 값이 없을 때 default value로 설정한 값이 변수에 할당된다.\n\n```jsx\nlet [firstName, surname] = []; // undefined, undefined\nlet [firstName = \"Guest\", surname = \"Anonymous\"] = []; // Guest, Anonymous\n```\n\n## 2. 객체 구조 분해 할당\n\n```jsx\nlet options = {\n  title: \"Menu\",\n  width: 100,\n  height: 200\n};\n\nlet {title, width, height} = options;\n```\n\n### 1) `{ 객체의 프로퍼티: 변수 이름 }` 과 같은 형식으로 변수 이름을 변경할 수 있다.\n\n```jsx\nlet options = {\n  title: \"Menu\",\n  width: 100,\n  height: 200\n};\n\nlet {width: w, height: h, title} = options;\nconsole.log(w, h, title); // 100, 200, \"Menu\"\n```\n\n### 2) `=` 을 이용하여 default value 할당할 수 있다.\n\n```jsx\nlet options = {\n  title: \"Menu\"\n};\n\nlet {width = 100, height = 200, title} = options;\nconsole.log(width, height, title); // 100, 200, \"Menu\"\n\n// 이름 변경도 동시에 가능\nlet {width: w = 100, height: h = 200, title} = options;\n```\n\n### 3) rest 패턴을 사용할 수 있다.\n\n```jsx\nlet options = {\n  title: \"Menu\",\n  height: 200,\n  width: 100\n};\n\nlet {title, ...rest} = options;\n\nconsole.log(title, rest.height, rest.width); // \"Menu\" 200 100\n```\n\n## 3. 중첩 구조 분해\n\n```jsx\nlet options = {\n  size: {\n    width: 100,\n    height: 200\n  },\n  items: [\"Cake\", \"Donut\"],\n  extra: true\n};\n\nlet { size: { width, height}, items: [item1, item2], title = \"Menu\" } = options\n/*\n size, items: is not defined\n width: 100\n height: 200\n item1: Cake\n item2: Donut\n title: Menu\n*/\n\n```\n\n## 4. 함수의 파라미타에 구조 분해 할당을 사용하자\n\n아래 함수의 경우는 파라미타의 순서를 기억 해야 한다는 단점이 있다. 더 많은 파라미타를 다뤄야 한다면..?\n\n```jsx\nfunction showMenu(title = \"Untitled\", width = 200, height = 100, items = []) {\n  // ...\n}\nshowMenu(\"My Menu\", undefined, undefined, [\"Item1\", \"Item2\"])\n```\n\n이 때 구조 분해 할당을 사용하면 좋다.\n\n```jsx\nlet options = {\n  title: \"My menu\",\n  items: [\"Item1\", \"Item2\"]\n};\n\nfunction showMenu({title = \"Untitled\", width = 200, height = 100, items = []}) {\n  alert( `${title} ${width} ${height}` ); // My Menu 200 100\n  alert( items ); // Item1, Item2\n}\n\nshowMenu(options);\n```\n\n만약 파라미타로 아무 값도 넘기고 싶지 않다면 아래와 같이 코드를 작성하면 된다.\n\n```jsx\nshowMenu({}); // 빈 객체를 보내면 된다. 하지만, 정말 아무 것도 보내고 싶지않다면?\nshowMenu(); // Error 발생\n```\n\n전체 argument 객체의 디폴트 객체로 {} 를 할당하면 에러를 잡을 수 있다.\n\n```jsx\nfunction showMenu({title = \"Untitled\", width = 200, height = 100, items = []} = {}) {\n  alert( `${title} ${width} ${height}` ); // My Menu 200 100\n  alert( items ); // Item1, Item2\n}\n\nshowMenu(); // 이제 에러가 발생하지 않는다.\n```\n\n참고\n[Destructuring assignment](https://javascript.info/destructuring-assignment)\n"}}},"next":{"repository":{"post":{"__typename":"GitHub_Blob","oid":"925c932c741ff2a153eedb35c2a39a5860255566","text":"# 자바스크립트의 iterable, iterator 프로토콜과 generator\n\n- Title : 자바스크립트의 iterable, iterator 프로토콜과 generator\n- Date : 2020-05-23\n- Category : Javascript\n\n# iterable 프로토콜\n\n- iterable 프로토콜은 반복 가능한 객체를 정의하는 방법(규약)으로 `for..of` 를 통해 value를 반복할 수 있다.\n- 반복 가능한 내장 객체로 `Array`, `Map`, `Set`, `String` 등이 있으며 객체는`[Symbol.iterator]` 속성 키를 가진다. *이 객체 들의 프로토타입 객체들이 `@@iterator` 메소드를 가지기 때문에 반복이 가능하다.*\n- `Promise.all(iterable)`, `Array.from()` 도 iterable을 허용한다.\n- 반복 가능한 객체를 만들고 싶다면 객체의 `[Symbol.iterator]` 속성에 `@@iterator` 메소드를 구현 하면 된다. 이 메소드는 iterator 프로토콜을 따르며 인수 없이 호출 되고 iterator 객체를 반환한다.\n\n반복 가능한 객체(iterable)는 `for-of` , `spread operator`, `yield*`, `구조 분해 할당`에 함께 사용된다.\n\n```java\nfor(let value of ['a', 'b', 'c']){\n    console.log(value)\n}\n// \"a\"\n// \"b\"\n// \"c\"\n\n[...'abc'] // [\"a\", \"b\", \"c\"]\n\nfunction* gen(){\n  yield* ['a', 'b', 'c']\n}\n\ngen().next() // { value:\"a\", done:false }\n\n[a, b, c] = new Set(['a', 'b', 'c'])\na // \"a\"\n```\n\nString은 반복 가능한 내장 객체로 `[Symbol.iterator]` 속성에 `@@iterator` 메소드가 있다.\n\n```java\nconst someString = \"hi\";\ntypeof someString[Symbol.iterator]; // function\nconst iterator = someString[Symbol.iterator](); // StringIterator {}\niterator + \"\" // [Object String Iterator]\n\niterator.next(); // { value: \"h\", done: false }\niterator.next(); // { value: \"i\", done: false }\niterator.next(); // { value: undefined, done: true }\n\n[...someString] // [ \"h\", \"i\" ]\n```\n\n반면에 일반 객체는 `@@iterator` 없어서 `undefined` 값을 반환한다. *물론 정의가 가능하다.*\n\n```java\nconst testObject = new Object();\ntypeof testObject[Symbol.iterator] // undefined\n```\n\n# iterator 프로토콜\n\n- 반복 가능한 객체의 value들을 시퀀스(어떠한 일련의 순서)대로 처리하는 방법(규약)이다.\n\n### iterator 객체 구현 규칙\n\n- `next()` 메소드가 있어야 한다. 이 메소드는 `done`, `value` 속성을 가진 객체를 반환한다.\n    - `done`(boolean): iterator가 마지막 반복 작업을 끝내면 true, 작업이 남아 있으면 false다. *done이 true이면 반환되는 객체의 value 프로퍼티의 값은 undefined다.*\n    - `value`: iterator에서 반환되는 값으로 done이 true면 생략될 수 있다.\n\n아래 코드는 문자를 하나씩 반환하는 String의 `@@iterator` 메소드를  \"bye\" 만 반환하고 끝내도록 재 정의한 예제다.\n\n```java\nconst someString = new String(\"hi\");\n\nsomeString[Symbol.iteraror] = function() {\n\treturn { // iterator 객체를 리턴\n\t\tnext: function() {\n\t\t\tif (this._first) {\n\t\t\t\tthis._first = false;\n\t\t\t\treturn { value: \"bye\", done: false };\n\t\t\t} else {\n\t\t\t\treturn { done: true };\n\t\t\t}\n\t\t},\n\t\t_first: true\n\t};\n};\n```\n\n# Generator\n\n## Generator 함수\n\n- 실행이 연속적이지 않는 작업을 iterator 처럼 사용할 수 있게 해준다.\n- `function*` 키워드를 통해 선언되는 Generator 함수는 호출 되어도 즉시 실행되지 않고, 대신 함수를 위한 Iterator 객체(Generator 객체)가 반환됩니다\n- `next()` 메소드를 호출하면 Generator 함수가 실행되어 `yield` 문을 만날 때까지 진행하고, 해당 yield가 반환하는 객체를 리턴 한다.  반환하는 객체는 yield문이 반환할 값(yielded value)을 나타내는 `value` 속성과, Generator 함수 안의 모든 yield 문의 실행 여부를 표시하는 boolean 타입의 `done` 속성을 갖는다.\n\n> `yield*`: 다른 generator 또는 iterable 객체에 yield를 위임할 때 쓰이며 `yield [iterable 객체를 반환하는 표현식]` 방식으로 사용한다.\n\n## Generator 객체\n\n- generator function에서 반환된 값으로 iterator, iterable 프로토콜을 준수한다.\n- `Generator.prototype.next()`: `yield` 표현을 통해 yield된 값을 반환\n- `Generator.prototype.return()`: 주어진 값을 반환하고 Generator 종료\n- `Generator.prototype.throw()`:  Generator의 실행을 재개시키고 Generator 함수의 실행 문맥 속으로 error를 주입하며 done, value 프로퍼티를 가진 객체를 반환한다.\n\n```java\nfunction* gen() {\n\twhile(true) {\n\t\ttry {\n\t\t  yield 1;\n\t\t  yield 2;\n\t\t  yield 3;\n\t\t} catch(e) {\n\t\t\tconsole.log('Error caught!');\n\t\t}\n\t}\n}\n\nvar g = gen(); // \"Generator { }\"\n\ng.next();        // { value: 1, done: false }\ng.throw(new Error(\"Something went wrong\"));\n// \"Error caught!\"\n// { value: 1, done: false }\ng.return(\"foo\"); // { value: \"foo\", done: true }\ng.next();        // { value: undefined, done: true }\n```\n\n반복 가능한 객체를 만들기 위해 `[Symbol.iterator]` 속성에 Generator 객체를 아래와 같이 정의할 수 있다.\n\n```java\nvar myIterable = {};\nmyIterable[Symbol.iterator] = function* () {\n    yield 1;\n    yield 2;\n    yield 3;\n};\n[...myIterable]; // [1, 2, 3]\n```\n\n무한 iterable 객체 만드는 방법\n\n```java\nfunction* idMaker(){\n    var index = 0;\n    while(true)\n        yield index++;\n}\n\nvar gen = idMaker(); // \"Generator { }\"\n\nconsole.log(gen.next().value); // 0\nconsole.log(gen.next().value); // 1\nconsole.log(gen.next().value); // 2\n```\n"}}}},"pageContext":{"id":"0dfe7484013b534a57d77a03dafae8490bb0d27b","previousPostId":"3de93d97b060a371fac7a45301b7aad6da6295fb","nextPostId":"925c932c741ff2a153eedb35c2a39a5860255566"}},"staticQueryHashes":["2685952063","2841359383"]}