{"componentChunkName":"component---src-templates-blog-post-js","path":"/d828d76a01fdf156e30e5cff57c159e3cbf5c5f0","result":{"data":{"site":{"siteMetadata":{"title":"보노보노의 평화로운 개발 이야기"}},"current":{"repository":{"post":{"__typename":"GitHub_Blob","oid":"d828d76a01fdf156e30e5cff57c159e3cbf5c5f0","text":"# git rebase\n\nDate: Apr 27, 2020\n\n- Title : git rebase\n- Date : 2020-04-27\n- Category : Git\n\n## git rebase 하기\n\n```bash\ngit checkout develop\n\ngit fetch origin develop\n\ngit checkout feature\n\ngit rebase origin/develop\n\n// conflict 발생 시 충돌 해결 후\ngit add <수정된 파일 이름>\n\ngit rebase --continue\n```\n\n- git fetch origin develop을 하면 로컬의 origin/develop 에 원격저장소 develop의 최신 커밋들이 싱크된다. 그래서 rebase 대상이 develop이 아니라 origin/develop 이다.\n- 충돌 해결 후 파일을 commit 이 아니라 **꼭 add만 해야 한다.**\n\n## git rebase 취소\n\n이미 remote 까지 push 했을 때 rebase 취소하는 방법\n\n```bash\ngit reflog <브랜치명>\n\n// 돌아가고 싶은 커밋 확인\ngit reset --hard <128e6d4>\n\ngit push -f origin <브랜치명>\n```\n\n## 생각하기\n\n### `git rebase origin/develop` 과 `git rebase develop` 의 차이점\n\n### `git fetch origin develop` 과 `git pull origin develop` 의 차이점\n\npull 은 내부적으로 `fetch + merge` 를 실행한 것과 같다. 즉 pull 을 실행하면 원격 저장소의 내용을 가져오고(fetch) 병합작업(merge)를 수행하게 된다. 만약 단순히 원격 저장소의 내용을 확인만 하고 로컬 데이터와 병합은 하고 싶지 않다면 fetch를 수행하면 된다. fetch를 하게되면 최신 커밋들은 로컬에 `FETCH_HEAD` 라는 이름으로 가져오게 된다. 이 상태에서 원격 저장소의 내용을 로컬 저장소에 통합하고 싶다면 `FETCH_HEAD` 브랜치를 merge 하거나 pull 하면 된다.\n"}}},"previous":{"repository":{"post":{"__typename":"GitHub_Blob","oid":"03e73fed3a9d0eacb1704fefb89e8300da18fa23","text":"# 부트스트랩의 sr-only 클래스가 하는 일\n\n- Title : 부트스트랩의 sr-only 클래스가 하는 일\n- Date : 2020-05-18\n- Category : 프론트\n\n이 글은 그저 기억하기 위한 용도로 작성했으니 참고바랍니다.\n\n부트스트랩은 `sr-only` 클래스를 사용하여 원하는 요소를 화면상에서는 사라지게 하는 동시에 웹 접근성을 높인다. 장애를 가진 사람은 스크린 리더기나 점자 타자기와 같은 보조 기구를 통해 웹을 인식하기 때문에 웹 접근성은 신경써야 할 요소 중 하나다. 간단하게 `<img>` 태그의 alt 요소에 이미지를 파악할 수 있는 텍스트를 작성하는 것만으로도 웹 접근성을 높일 수 있다. \n\n나는 체크박스(`<input type=\"checkbox>`)를 커스텀하면서 `sr-only` 를 접하게 되었다. *아마 사수가 아니었으면 웹 접근성을 신경쓰지도 않았을 텐데 덕분에 팁을 얻었다.*  작업에 대해 자세히 말하자면 체크박스를 슬라이드 토글 형태로 커스텀하는 것이었다. 작업 순서는 아래와 같다. 체크 박스에 `sr-only` 클래스를 적용하여 체크 박스를 사라지게 만들기 → `<label><div class=\"circle\"></label>` 로 style 만들기 → 체크박스 `:checked` 일 때 토글 효과 주기\n\n부트스트랩의 `sr-only` 는 다음과 같이 작성되어있다. 이를 이용하여 체크박스를 화면에서 지우면 된다.\n\n```css\n.sr-only {\n\tposition: absolute;\n\toverflow: hidden;\n\twidth: 1px;\n\theight: 1px;\n\tpadding: 0;\n\tmargin: -1px;\n\tborder: 0;\n\tclip: rect(0,0,0,0);\n}\n```\n\n `clip` 속성은 요소의 일부분만 보이게 하고 싶을 때 사용한다. 단, 요소의 `position`이 `absolute` 또는 `fixed`로 적용되어 있어야 작동된다. `sr-only` 에서 `clip` 요소는 `rect(0,0,0,0)` 으로 선언되어있는 데 이는 요소를 노출 시키지 않겠다는 의미다.\n"}}},"next":{"repository":{"post":{"__typename":"GitHub_Blob","oid":"f25955ea62ff44f6182d7c5afe657bb1472e9cb6","text":"# Travis에서 MongoDB 사용하기 & Heroku 배포하기\n\n- Title : Travis에서 MongoDB 사용하기\n- Date : 2020-03-30\n- Category : Infra\n\n# WHY?\n\nTravis에서 MongoDB Altas 연결이 실패하여 테스트 실패하는 현상이 계속 발생하였다. 로컬에서는 잘되는 데 왜 travis에서는 안될까? 해결 방법은 간단했다. travis 내에서 로컬 MongoDB를 돌려주는 거였고 이는 Travis가 아주 편리하게 제공하고 있었다.\n\n# SOLVE\n\n1. .travis.yml 에 아래 코드를 추가해준다.\n\n    services:\n      – mongodb\n\n2. travis → setting → 변수 설정에서 이름은 각자 코드 내에서 쓰는 환경 변수 이름을 적고 값은 `mongodb://localhost:27017/mydb_test` 로 하면 된다.\n\ntravis에서 mongodb를 사용할 때는 따로 데이터베이스 만들 필요가 없고 로컬 호스트(127.0.0.1)로 바인딩되므로 위와 같이 쓰면 된다.\n\n# WHY?\n\n헤로쿠로 자동 배포되게 하는 거 까먹어서 기록 + Node.js 앱 배포\n\n[Travis CI Documentation](https://docs.travis-ci.com/user/deployment/heroku/)\n\n# SOLVE\n\n1. .travis.yml에 아래와 같이 작성한다.\n\n    deploy:\n      provider: heroku\n      api_key:\n        secure: <암호화한 heroku api token>\n      app: express-project-blog\n\n- app은 헤로쿠 앱 이름을 적으면 된다. 안 적어도 되긴 함\n\n2. secure 키 구하기\n\n- Heroku CI를 깔고 token 얻기. 아래 명령어를 치면 나오는 토큰을 복사해놓는다.\n\n    heroku auth:token\n\n- 윈도우인 경우 ruby cmd창에 travis CI를 깔고 아래 명령어 입력. 이 때 명령어 실행 위치에 .travis.yml 파일이 있어야한다. 따로 repo 설정을 안해줘서 —repo 옵션으로 github 위치 적어주면 travis.yml 파일에 알아서 암호화된 api_key가 생김\n\n    travis encrypt <복사한 TOKEN> --add deploy.api_key --pro --repo=devgaram/express-mongo-rest-api\n\n> [travis-ci.com](http://travis-ci.com/) 에서 빌드할 경우 —pro 옵션과 함께 암호화해야 정상적으로 인증할 수 있음..\n\n3. 헤로쿠 설정\n\n- 빌드팩에 nodejs 추가하기\n\n![Travis%20MongoDB%20Heroku/Untitled.png](https://raw.githubusercontent.com/devgaram/TIL/master/Infra/images/2020-03-30-img/Untitled.png)\n\n- 프로젝트에서 es6를 사용하기 위해 babel을 이용해 빌드하는 경우가 있는 데, 이 때는 환경변수를 따로 설정해줘야 devdependencies도 설치되서 babel을 실행할 수 가 있다.\n\n![Travis%20MongoDB%20Heroku/Untitled%201.png](Travis%20MongoDB%20Heroku/Untitled%201.png)"}}}},"pageContext":{"id":"d828d76a01fdf156e30e5cff57c159e3cbf5c5f0","previousPostId":"03e73fed3a9d0eacb1704fefb89e8300da18fa23","nextPostId":"f25955ea62ff44f6182d7c5afe657bb1472e9cb6"}},"staticQueryHashes":["2841359383"]}