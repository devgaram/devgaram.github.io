{"componentChunkName":"component---src-templates-blog-post-js","path":"/6c5737bcef4046d74738a7a56d218a7a8c80d728","result":{"data":{"site":{"siteMetadata":{"title":"보노보노의 평화로운 개발 이야기"}},"current":{"repository":{"post":{"__typename":"GitHub_Blob","oid":"6c5737bcef4046d74738a7a56d218a7a8c80d728","text":"# 백준 - 16235 나무 재테크(C++)\n\n- Title : 백준 - 16235 나무 재테크(C++)\n- Date : 2020-01-28\n- Category: 알고리즘 풀이\n\n# 나무 재테크\n\n- 각 계절을 구현하는 데는 어려움이 없었으나 처음에 벡터 하나에 나무를 다 저장하고 매번 sort를 해서 시간 초과가 발생했었다.\n- 고민하다가 각 칸마다 deque에 나무 나이를 담는 식으로 바꿨다.\n- vector가 아닌 deque를 선택한 건 가을(번식)때 생성되는 나무는 나이가 1이므로 맨 앞에 추가되어야하기 때문이다.\n- vector는 배열이라 맨 앞 추가할 때 O(N)의 시간복잡도가 발생한다.\n- deque로 바꿨기에 처음 1번만 sort를 사용하여 효율성을 높였다.\n\n```cpp\n#include <iostream>\n#include <vector>\n#include <algorithm>\n#include <deque>\nusing namespace std;\n\n#define MAX 10\n\nint N, M, K;\nint A[MAX][MAX]; // 로봇 양분\nint L[MAX][MAX]; // 땅\ndeque<int> T[MAX][MAX]; // 각 땅의 나무 나이\n\nvoid addTree(int r, int c){\n\tif (r < 0 || c < 0 || r >= N || c >= N) return;\n\tT[r][c].push_front(1);\n}\n\nint main() {\n\tint x, y, age;\n\tscanf(\"%d %d %d\", &N, &M, &K);\n\n\tfor (int i=0; i<N; i++) {\n\t\tfor (int j=0; j<N; j++) {\n\t\t\tscanf(\"%d\", &A[i][j]);\n\t\t\tL[i][j] = 5;\n\t\t}\n\t}\n\tfor (int i=0; i<M; i++) {\n\t\tscanf(\"%d %d %d\", &x, &y, &age);\n\t\tT[--x][--y].push_back(age);\n\t}\n\n\tfor (int i=0; i<N; i++) {\n\t\tfor (int j=0; j<N; j++) {\n\t\t\tif (T[i][j].size() > 1) {\n\t\t\t\tsort(T[i][j].begin(), T[i][j].end());\n\t\t\t}\n\t\t}\n\t}\n\n\tbool flag;\n\twhile(K-- > 0) {\n\n\t\t// 같은 칸이면 어린 순으로 나이만큼 양분먹고 나이 증가\n\t\tfor (int i=0; i<N; i++) {\n\t\t\tfor (int j=0; j<N; j++) {\n\t\t\t\tdeque<int> &tmp = T[i][j];\n\t\t\t\tflag = true;\n\t\t\t\tfor(auto iter=tmp.begin(); iter != tmp.end();) {\n\t\t\t\t\tint &t = *iter;\n\t\t\t\t\tif (L[i][j] >= t && flag) {\n\t\t\t\t\t\tL[i][j] -= t;\n\t\t\t\t\t\tt += 1;\n\t\t\t\t\t\titer++;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tflag = false;\n\t\t\t\t\t\t// 여름 처리\n\t\t\t\t\t\tL[i][j] += t / 2;\n\t\t\t\t\t\titer = tmp.erase(iter);\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t}\n\t\t}\n\n\t\t// 나이 5의 배수 나무 번식\n\t\tfor (int i=0; i<N; i++) {\n\t\t\tfor (int j=0; j<N; j++) {\n\t\t\t\tdeque<int> &tmp = T[i][j];\n\t\t\t\tfor(auto iter=tmp.begin(); iter != tmp.end(); iter++) {\n\t\t\t\t\tint t = *iter;\n\t\t\t\t\tif (t % 5 == 0) {\n\t\t\t\t\t\taddTree(i - 1, j - 1);\n\t\t\t\t\t\taddTree(i - 1, j);\n\t\t\t\t\t\taddTree(i - 1, j + 1);\n\t\t\t\t\t\taddTree(i, j - 1);\n\t\t\t\t\t\taddTree(i, j + 1);\n\t\t\t\t\t\taddTree(i + 1, j - 1);\n\t\t\t\t\t\taddTree(i + 1, j);\n\t\t\t\t\t\taddTree(i + 1, j + 1);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t// 로봇이 양분 추가\n\t\tfor (int i=0; i<N; i++) {\n\t\t\tfor (int j=0; j<N; j++) {\n\t\t\t\tL[i][j] += A[i][j];\n\t\t\t}\n\t\t}\n\t}\n\n\tint ans = 0;\n\tfor (int i=0; i<N; i++) {\n\t\tfor (int j=0; j<N; j++) {\n\t\t\tans += T[i][j].size();\n\t\t}\n\t}\n\tprintf(\"%d\", ans);\n\n\treturn 0;\n}\n```\n"}}},"previous":{"repository":{"post":{"__typename":"GitHub_Blob","oid":"71b6232e760cb058f53c92719edc32233daa262c","text":"# c++로 알고리즘 풀 때 팁들\n\n- Title : c++로 알고리즘 풀 때 팁들\n- Date : 2020-01-28\n- Category: Algorithm\n\n# # 입출력\n\ncin, cout은 느려서 scanf, printf를 사용하는 걸 추천한다.\n\n```cpp\nint N, M, K;\nscanf(\"%d %d %d\", &N, &M, &K);\n```\n\n# # 2차원 배열\n\n1 2 3 4 5 <br/>\n2 3 4 5 6 <br/>\n... 방식의 입력을 받고 싶다면?\n\n```cpp\n#define MAX 10\nint A[MAX][MAX];\n\nint main() {\n\n  for (int i=0; i<N; i++) {\n    for (int j=0; j<N; j++) {\n      scanf(\"%d\", &A[i][j]);\n    }\n  }\n  return 0;\n}\n```\n\n## 2차원 deque 입력, 정렬\n\n```cpp\n#define MAX 10\ndeque<int> T[MAX][MAX];\n// ...\nint main() {\n  int x, y, age;\n\n  // 입력\n  for (int i=0; i<M; i++) {\n    scanf(\"%d %d %d\", &x, &y, &age);\n    T[--x][--y].push_back(age);\n  }\n\n  // 정렬 오름차순\n  for (int i=0; i<N; i++) {\n    for (int j=0; j<N; j++) {\n      if (T[i][j].size() > 1)\n        sort(T[i][j].begin(), T[i][j].end());\n\n    }\n  }\n\n  // 순회\n  for (int i=0; i<N; i++) {\n    for (int j=0; j<N; j++) {\n      deque<int> &tmp = T[i][j]; // 참조로 받기(수정하려면)\n      for(auto iter=tmp.begin(); iter != tmp.end();) {\n        int &t = *iter;\n        if () //삭제X\n          iter++;\n        else //삭제 O\n          iter = tmp.erase(iter); //다음 iter 받음\n\n      }\n    }\n  }\n  return 0;\n}\n```\n\n# 포인터와 참조\n\n```cpp\n// 새로운게임2 에서..\nstruct Horse {\n  int row, col, dir;\n};\n\n// 참조 변수 : 대상을 직접 할당\n// 선언과 동시에 초기화해야한다!\n// NULL 불가\nHorse &h = horse[0];\nh = horse[1]; // 에러!! (대상 변경 불가)\nprintf(\"%d\", h.row);\n\n// 포인터 변수 : 주소값 할당\nHorse *h = &horse[0];\nh = &horse[1];  // 대상 변경 가능!\nHorse *h = NULL; // NULL 가능\n\nif (h) printf(\"%d\", h->row);\n// 또는\nif (h) printf(\"%d\", (*h).row);\n```\n\n# 배열 초기화할 때, memset 함수 쓰자!\n\n- for문보다 더 빠른 속도가 나올 수 있다.\n- 특정 범위에 있는 **연속된 메모리**에 값을 지정하고 싶을 때 쓰자!\n- cstring 헤더\n\n```cpp\nvoid* memset(void *ptr, int value, size_t num);\n/*\nptr : 메모리 시작 포인터(주소) => 배열 이름\nvalue: 채울 값 => 값\nnum: 채우고자 하는 바이트 수(메모리 크기) => sizeof(배열이름)\n*/\n```\n\n```cpp\n#include <cstring>\nusing namespace std;\nint main() {\n  int C[21][21];\n  memset(C, 0, sizeof(C));\n  return 0;\n}\n```\n\n# 구조체 멤버 내용 복사하고 싶으면? memcpy를 쓰자\n\n```cpp\n#include <cstring>\nusing namespace std;\n\nstruct Horse {\n  int row, col, dir;\n};\n\nint main() {\n  Horse h1, h2;\n  h1.row = 1;\n  h1.col = 2;\n  h1.dir = 3\n\n  memcpy(&h2, &h1, sizeof(Horse)); // Horse 구조체 크기만큼 h1 내용을 h2에 복사\n  return 0;\n}\n```\n\n## 동적 할당된 경우는?\n\n```cpp\n#include <cstring>\nusing namespace std;\n\nstruct Horse {\n  int row, col, dir;\n};\n\nint main() {\n  Horse *h1 = malloc(sizeof(Horse));\n  Horse *h2= malloc(sizeof(Horse));\n  h1->row = 1;\n  h1->col = 2;\n  h1->dir = 3\n\n  memcpy(h2, h1, sizeof(Horse)); // Horse 구조체 크기만큼 h1 내용을 h2에 복사\n  return 0;\n}\n```\n\n## 또 다른 예\n\n```cpp\nHorse h1;\nHorse *h2= malloc(sizeof(Horse));\n\nmemcpy(h2, &h1, sizeof(Horse));    // 구조체 변수에서 동적 메모리로 복사\n```\n\n# 자료형\n\n정수 자료형 int는 4바이트 정보를 기록할 수 있는 자료형으로, signed int(부호가 있는 정수)를 기준으로 기록할 수 있는 양의 정수 범위는 0 ~ 2,147,483,647 (16진수로 7FFFFFFF)이다.\n\n## int 범위를 벗어나는 경우 자료형은 무엇을 쓸까?\n\n8바이트 크기를 가지는 정수 자료형 long long을 쓰는 게 좋다. signed long long을 기준으로 하면 최대 계산할 수 있는 양의 정수 범위는 0 ~ 9,223,372,036,854,775,807(16진수로 7FFFFFFFFFFFFFFF)다.\n\nlong long으로도 불가능하다면 BigInteger를 사용하면 된다.\n\n```cpp\ntypedef long long ll;\nll large, small;\n\n```\n\n# 순열관련 함수\n\nprev_permutation\n"}}},"next":{"repository":{"post":{"__typename":"GitHub_Blob","oid":"d79c410b05d91234e7105209de7dcf5c278166bf","text":"# 백준 - 17143 낚시왕(C++)\n\n- Title : 백준 - 17143 낚시왕(C++)\n- Date : 2020-01-28\n- Category: 알고리즘 풀이\n\n# 낚시왕\n\n```cpp\n#include <iostream>\n#include <vector>\n#include <map>\n#include <cstring>\nusing namespace std;\n\nstruct Shark\n{\n\tint r;\n\tint c;\n\tint s; // 속력\n\tint d; // 이동\n\tint z; // 크기\n};\n\nint main() {\n\tint R, C, M;\n\tint r, c, s, d, z;\n\tmap<int, Shark> sharkmap; // 상어정보들 [크기, 정보구조체]\n\tmap<int, Shark>::iterator it;\n\tint row[5] = {0, -1, 1, 0, 0}; // 1:위, 2:아래, 3: 오른쪽, 4:왼쪽\n\tint col[5] = {0, 0, 0, 1, -1};\n\tint ans = 0;\n\n\tscanf(\"%d %d %d\", &R, &C, &M);\n\tint arr[R+1][C+1] = {0};\n\tint arrtmp[R+1][C+1] = {0};\n\tfor (int i=0; i<M; i++) {\n\t\tscanf(\"%d %d %d %d %d\", &r, &c, &s, &d, &z);\n\t\tarr[r][c] = z;\n\t\tShark tmp = {r, c, s, d, z};\n\t\tsharkmap.insert(make_pair(z, tmp));\n\t}\n\n\n\tint nr, nc, nd, move;\n\tfor (int i=1; i<=C; i++) {\n\n\n\t\t// 상어잡기\n\t\tfor (int j=1; j<=R; j++) {\n\t\t\tif (arr[j][i] > 0) {\n\t\t\t\tsharkmap.erase(arr[j][i]);\n\t\t\t\tans += arr[j][i];\n\t\t\t\tarr[j][i] = 0;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\n\t\t// 상어이동\n\t\tfor(it=sharkmap.begin(); it != sharkmap.end(); it++) {\n\t\t\tShark &shark = it -> second;\n\t\t\t// 오른쪽, 왼쪽\n\t\t\tif (shark.d == 3 || shark.d == 4) {\n\t\t\t\tmove = shark.s % ((C-1)*2);\t// 실제 이동해야할 MOVE\n\t\t\t\tnc = shark.c;\n\t\t\t\tnd = shark.d;\n\t\t\t\twhile (move > 0) {\n\t\t\t\t\tif (nc == 1) nd = 3;\n\t\t\t\t\telse if (nc == C) nd = 4;\n\t\t\t\t\tnc += col[nd];\n\t\t\t\t\tmove--;\n\t\t\t\t}\n\t\t\t\tshark.d = nd;\n\t\t\t\tshark.c = nc;\n\t\t\t}\n\t\t\t// 위, 아래\n\t\t\telse if (shark.d == 1 || shark.d == 2) {\n\t\t\t\tmove = shark.s % ((R-1)*2);\t// 실제 이동해야할 MOVE\n\t\t\t\tnr = shark.r;\n\t\t\t\tnd = shark.d;\n\t\t\t\twhile (move > 0) {\n\t\t\t\t\tif (nr == 1) nd = 2;\n\t\t\t\t\telse if (nr == R) nd = 1;\n\t\t\t\t\tnr += row[nd];\n\t\t\t\t\tmove--;\n\t\t\t\t}\n\t\t\t\tshark.d = nd;\n\t\t\t\tshark.r = nr;\n\t\t\t}\n\t\t\t// 상어 먹기\n\t\t\tif (arrtmp[shark.r][shark.c] < shark.z) {\n\t\t\t\tif (arrtmp[shark.r][shark.c] > 0)\n\t\t\t\t\tsharkmap.erase(arrtmp[shark.r][shark.c]);\n\n\t\t\t\tarrtmp[shark.r][shark.c] = shark.z;\n\n\t\t\t} else sharkmap.erase(shark.z);\n\n\n\t\t}\n\n\t\tfor (int j=1; j<=R; j++) {\n\t\t\tfor (int k=1; k<=C; k++) {\n\t\t\t\tarr[j][k] = arrtmp[j][k];\n\t\t\t\tarrtmp[j][k] = 0;\n\t\t\t}\n\t\t}\n\t}\n\n\tprintf(\"%d\", ans);\n\n\treturn 0;\n}\n```\n"}}}},"pageContext":{"id":"6c5737bcef4046d74738a7a56d218a7a8c80d728","previousPostId":"71b6232e760cb058f53c92719edc32233daa262c","nextPostId":"d79c410b05d91234e7105209de7dcf5c278166bf"}},"staticQueryHashes":["2685952063","2841359383"]}