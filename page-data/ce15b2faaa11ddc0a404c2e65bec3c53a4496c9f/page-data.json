{"componentChunkName":"component---src-templates-blog-post-js","path":"/ce15b2faaa11ddc0a404c2e65bec3c53a4496c9f","result":{"data":{"site":{"siteMetadata":{"title":"보노보노의 평화로운 개발 이야기"}},"current":{"repository":{"post":{"__typename":"GitHub_Blob","oid":"ce15b2faaa11ddc0a404c2e65bec3c53a4496c9f","text":"# [생활코딩] Javascript 입문1\n\n- Title : [생활코딩] Javascript 입문1\n- Date : 2018-01-09\n- Category: Javascript\n\n생활코딩 URL : https://opentutorials.org/course/743  \n생활코딩 강의에서 기억하고 싶었던 내용을 포스팅해보았다.\n\n# 변수의 효용을 이해하자.\n\n- 필요에 의해서 변할 수 있는 영역과 변하지 않는 영역을 구분해서 코딩해야한다.\n- 재활용 가능해진다. 유지보수 용이해진다.\n\n# 비교\n\n```javascript\nalert(1 === \"1\"); //false    데이터타입[형식]도 동일해야함.**이걸쓰자!\nalert(1 == \"1\"); //true     버그발생 가능성 높음..\n\nvar a;\nalert(a); //undefined 값이 정의되지 않음\nalert(undefined == null); //true\nalert(undefined === null); //false\nalert(true == 1); //true **숫자 1은 true로 간주, 그 외는 false로.\nalert(true === 1); //false\nalert(NaN === NaN); //false\n```\n\n## [데이터타입]\n\nundefined : 값이 정의되지 않은 상태, 프로그래머가 의도하지 않음 false로 간주  \nnull : 값이 없는 상태, 프로그래머가 의도함. false로 간주  \nNaN : 0/0 계산할 수 없음. false로 간주\n\n# 조건문\n\nif('') alert('빈문자열'); //false 빈문자열은 false/ 문자열있으면 true로 간주\n"}}},"previous":{"repository":{"post":{"__typename":"GitHub_Blob","oid":"caadcde4519259454e8b2f41abe2fe9483478818","text":"# [생활코딩] Javascript 입문2\n\n- Title : [생활코딩] Javascript 입문2\n- Date : 2018-01-10\n- Category: Javascript\n\n생활코딩 URL https://opentutorials.org/course/743/  \n반복문, 함수 정의방법, 배열, 객체\n\n# 반복문\n\n```javascript\nfor (var i = 0; i < 10; i++) {\n  if (i === 5) break; // 그 즉시, for문 중단 - coding1~4 까지만 출력됨\n  if (i === 5) continue; // 실행을 중단하고 반복문 이어서 함. - coding1~4/6~9까지 출력됨.\n  document.write(\"coding\" + i + \"\");\n}\n```\n\n# 함수 정의 방법\n\n```javascript\n// [첫번째 방법]\nfunction numbering(arg) {\n  //statement\n}\n\n// [두번째 방법]\nvar numbering = (function() {\n  //statement\n})(\n  // [세번째 방법-익명함수]\n  function() {\n    //statement\n  }\n)();\n//*일회성 함수\n```\n\n# 배열\n\n```javascript\nvar member = [\"a\", \"b\", \"c\"]; //생성\nalert(member[0]); // 'a'\n\nfor (var i = 0; i < member.length; i++) {\n  // 배열의 크기만큼 반복\n  document.write(member[i].toUpperCase()) + \"\";\n}\n/*배열의 원소 추가하는 방법*/\nmember.push(\"f\"); // a,b,c,f - 배열의 맨 뒤에 삽입\nmember.concat([\"e\", \"f\"]); // a,b,c,f,e,f - 복수의 원소 추가\nmember.unshift(\"g\"); // g,a,b,c,f,e,f - 배열의 맨 앞에 삽입\nmember.splice(2, 0, \"B\"); // g,a,B,b,c,f,e,f - 배열의 2번째 인덱스 0(앞에) B를 추가\n\n/*배열의 원소 삭제하는 방법 및 정렬 */\nmember.shift(); // 배열의 첫번째 원소 삭제\nmember.pop(); // 배열의 마지막 원소 삭제\nmember.sort(); // 오름차순 정렬\nmember.reverse(); // 내림차순 정렬\n```\n\n## 배열의 함수. splice\n\n- 배열의 특정구간을 추출하거나, 특정 구간에 특정 배열을 추가한다.\n- array.splice( index, howmany, [element1...N])  \n  <span class=\"clr-grey\">\n  index : 배열의 위치  \n  howmany : index에서부터 제거될 원소의 수로, 1이면 index 값만 제거되어 값이 추가된다.  \n  0일 때는 삭제 없이 인덱스 앞쪽에 값이 추가됨. 없으면 배열 끝까지(길이)  \n  element1...N : 추가될 Value\n  </span>\n\n## 배열의 정렬. sort - 사용자정의가능\n\n```javascript\nfunction sortNumber(a,b){\n    return a-b;    //리턴값이 음수, 양수, 0인지에 따라 순서 정함.\n}\nvar numbers = [20 ,10 8, 15]\nnumbers.sort(sortNumber); // 8,10,15,20\n```\n\n# 객체\n\n배열 - 자동으로 색인 추가[number], 순서존재  \n객체 - 인덱스의 값을 숫자 뿐만 아니라 문자 등 원하는 이름으로 지정 가능 (데이터타입 : 연관배열, 맵, 딕셔너리), 순서존재X\n\n```javascript\n/*객체의 생성*/\nvar grades = {'aa':10, 'bb':6, 'cc': 80};    //객체의 생성\nvar grades = {};    //비어있는 객체의 생성\nvar grades = new object();    //비어있는 객체의 생성\n\n/*객체의 할당*/\ngrades['aa'] = 10;\ngrades['bb'] = 6;\ngrades['cc'] = 80;\n\n/*객체의 접근 key/value*/\ngrades['bb']    //6\ngrades.bb       //6\ngrades['b'+'b'] //6\ngrades.'b'+'b';  //에러 남\n\n/*객체의 값 가져오기*/\nfor(var key in grades){    //객체를 구성하는 값들의 키값만 하나씩 가져옴\n document.write(\"key : \"+key+\" value : \"+grades[key] + \"\");\n}\n\n/*객체지향 프로그래밍 - 서로 연관된 데이터, 처리를 하나의 그릇안에 그룹핑 한것*/\nvar grades = {\n 'list' : {'aa':10, 'bb':6, 'cc': 80},\n 'show' : function(){\n      alert(\"hello world\");\n  },\n'show2' : function(){\n      console.log(this.list);     //this란? 함수가 속해있는 객체를 가리킨다. 여기선 grades를 가리킴.\n },\n'show_list' : function(){\n  for(var name in this.list){\n   console.log(name,  this.list[name]);\n  }\n }\n}\nalert(grades['list]['aa']); //10\ngrades['show']();       //객체의 함수호출. alert창 뜸.\ngrades.show_list();    //객체의 함수호출 aa,10 bb,6 cc,80 출력\n```\n"}}},"next":{"repository":{"post":{"__typename":"GitHub_Blob","oid":"f2032027a41318246789d128d0d9c7c3692f528d","text":"# call()과 apply()\n\n- Title : call()과 apply()\n- Date : 2018-01-08\n- Category: Javascript\n\ncall() 과 apply() 메서드를 이용하여 명시적으로 this에 바인딩할 수 있습니다.\n\n모든 함수의 부모 객체인 Function.prototype 객체의 메서드라서 모든 함수에서 호출 가능합니다.\n\n## Function.prototype.apply()\n\n```javascript\nfun.apply(thisArg, [argArray]);\n```\n\nfun 메서드를 호출할 때, fun 내부의 this를 매개변수인 thisArg로 바인딩 시킵니다.\nargArray는 fun 메서드에서 인자로 사용됩니다.  \n<span class=\"clr-grey\">argArray : 배열리터럴, Array 객체</span>\n\n## Function.prototype.call()\n\n```javascript\nfun.call(thisArg[,arg1[,arg2[,....]]])\n```\n\napply와 기능이 같으며, 배열형태가 아닌 각각의 하나의 인자형태로 값을 넘긴다는 차이점이 있습니다.\n\n# 추가 개념\n\n## 객체의 메서드를 호출할 때, 객체 메서드 내부의 this는?\n\n해당 메서드를 호출한 객체\n\n## 함수를 호출할 때, 함수 내부의 this는?\n\n전역객체에 바인딩 된다. window \\*내부함수를 호출했을 때도, 내부 this는 window!\n\n## 생성자 함수를 호출할 때, 생성자 함수 내부의 this는?\n\n생성자 함수 코드가 실행되기 전 생성되는 빈 객체  \n이 객체는 부모인 프로토타입과 연결되어있으므로 부모의 프로퍼티와 메서드를 사용할 수 있다.\n\n```javascript\nfunction Person() {\n  this.age = 0; // (1)\n  setInterval(function growUp() {\n    this.age++; // (2)\n  }, 1000);\n}\nvar p = new Person();\n```\n\n(1)의 this는 생성자 함수를 호출하면서 만들어지는 빈 객체  \n(2)의 this는 window 전역객체를 가르킨다.\n\n그래서, 위의 코드는 1초마다 나이가 1씩 증가하는 결과를 얻을 수 없다.\n\n그렇다면, (2)가 Person 생성자로 만들어진 객체로 바인딩되게 하고 싶으며 어떻게 해야할까?\n\n아래 코드와 같이 비전역 변수에 할당하여 해결할 수 있다.\n\n```javascript\nfunction Person() {\n  var that = this;\n  that.age = 0;\n\n  setInterval(function growUp() {\n    that.age++;\n  }, 1000);\n}\n```\n\nES6의 화살표 함수를 이용하면 비전역 변수를 이용하지 않고도 생성자 객체에 바인딩 시킬 수 있다.  \n화살표 함수는 자신만의 this를 생성하지 않기 때문이다!!\n\n```javascript\nfunction Person() {\n  this.age = 0;\n\n  setInterval(() => {\n    this.age++;\n  }, 1000);\n}\n```\n\n위 화살표 함수 내 this는 정확히 Person() 생성자를 통해 생성된 객체를 가리키게 된다!\n\n[출처](https://developer.mozilla.org/ko/docs/Web/JavaScript/Reference/Functions/%EC%95%A0%EB%A1%9C%EC%9A%B0_%ED%8E%91%EC%85%98)\n"}}}},"pageContext":{"id":"ce15b2faaa11ddc0a404c2e65bec3c53a4496c9f","previousPostId":"caadcde4519259454e8b2f41abe2fe9483478818","nextPostId":"f2032027a41318246789d128d0d9c7c3692f528d"}},"staticQueryHashes":["2841359383"]}