{"componentChunkName":"component---src-templates-blog-post-js","path":"/d17108af7f9cb5a3406d3826c036d4f5719706ee","result":{"data":{"site":{"siteMetadata":{"title":"보노보노의 평화로운 개발 이야기"}},"current":{"repository":{"post":{"__typename":"GitHub_Blob","oid":"d17108af7f9cb5a3406d3826c036d4f5719706ee","text":"# mssql 쿼리 팁 - group by 없이 카운트하는 방법 & 페이징 처리를 위한 전체 레코드 갯수 구하기\n\n- Title : mssql 쿼리 팁 - group by 없이 카운트하는 방법 & 페이징 처리를 위한 전체 레코드 갯수 구하기\n- Date : 2019-03-07\n- Category: Database\n\n프로시저 속도 개선하는 과정에서 배웠던 sql 팁으로, group by 없이 칼럼과 함께 갯수를 출력하는 방법과\n페이징 처리에 필요한 전체 레코드 갯수를 구하는 방법에 대한 내용입니다.\n\n관리자 페이지 유지보수 중에 한 프로시저의 실행속도가 굉장히 느린 것을 발견했다.  \n실무자에게 확인해 본 결과 페이지 넘길 때마다 기본 일분은 기다린다는 답을 받았다.  \n이 프로시저는 어떤 정보를 프로시저 내에서 페이징 처리를 하여 조회하는 쿼리로 4개의 left outer join 과 복잡한 case 조건의 where 절을 가졌다.  \n심지어 left join 되는 테이블은 조건과 그룹 처리를 하는 서브쿼리로 구성되었다.\n\n# Group by 없이 칼럼과 함께 갯수 출력하기\n\n<span class=\"clr-grey\">\n처음에는 left join 때문이라고 생각했으나 아니였다.      \n진짜 원인은 select 절에서 각 그룹의 갯수를 조회하는 서브쿼리의 문제였다.    \n이를 left outer join 으로 바꿔봤지만 해결되지 않았고 Group by 처리하자니 조회할 컬럼 값이 너무 많았다.    \n고민하다가 검색을 통해 좋은 방법을 찾았다.  \n</span>\n\n```sql\ncount(yy) over (partition by xx)\n```\n\n위는 Group by 없이 컬럼값들과 함께 갯수를 출력할 수 있는 쿼리이다.\n\n```sql\ncount(seq) over (partition by groupSeq)\n```\n\n이를 참고해 select에서 서브쿼리로 조회하던 방식을 위와 같이 수정했더니 실행시간이 13초에서 3초 정도로 줄었다\n\n# 페이징 처리에 필요한 전체 레코드 갯수를 구하는 방법\n\n[전체갯수구하기 참고 블로그](https://m.blog.naver.com/monkeychoi/220629982940)\n\n<span class=\"clr-grey\">\n하지만 아직 한국인을 만족시킬 속도가 아니였기에 속도를 잡아먹는 또 다른 원인을 찾아보았다.     \n바로 전체 레코드 갯수를 구하는 부분이었다.  페이징처리를 위해서 전체 레코드 갯수를 구하는 건 필수였기에 해당 쿼리를 빼는 거는 불가능했다.   \n</span>\n\n기존 페이징 쿼리\n\n```sql\n;WITH myCTE AS\n(\n\tSELECT\n\t\tCOUNT(*) OVER() AS TOTALCNT,\t-- 이 쿼리때문에 느려짐\n\t\tROW_NUMBER() OVER (ORDER BY GroupSeq DESC, seq ASC) AS ROWNUM,\n\t\t*\n\tFROM DBO.MY_BOARD\n)\nSELECT * FROM myCTE WHERE ROWNUM BETWEEN (@I_PAGE -1) * @I_PAGESIZE) + 1 AND @I_PAGE * @I_PAGESIZE\n```\n\n수정 후 쿼리\n\n```sql\n;WITH myCTE AS\n(\n\tSELECT\n\t\tROW_NUMBER() OVER (ORDER BY GroupSeq DESC, seq ASC) AS ROWNUM,\n\t\t*\n\tFROM DBO.MY_BOARD\n)\nSELECT *, (SELECT COUNT(*) FROM myCTE) AS TOTALCNT\nFROM myCTE WHERE ROWNUM BETWEEN (@I_PAGE -1) * @I_PAGESIZE) + 1 AND @I_PAGE * @I_PAGESIZE\n```\n\n위와 같이 쿼리를 수정한 결과 실행시간이 3초에서 1초로 줄었다.\n"}}},"previous":{"repository":{"post":{"__typename":"GitHub_Blob","oid":"116b6712fdb1d1bdf026420e0835d318758c57da","text":"# 안드로이드 에러 - setText의 파라미터로 숫자를 전달했을 때\n\n- Title : 안드로이드 에러 - setText의 파라미터로 숫자를 전달했을 때\n- Date : 2019-03-10\n- Category: Android\n\nsetText의 파라미터로 숫자를 전달했을 때 발생되는 에러로그\n\n에러로그\n\n```\nandroid.content.res.Resources$NotFoundException: String resource ID #0x1f40\nat android.content.res.Resources.getText(Resources.java:354)\nat android.widget.TextView.setText(TextView.java:6133)\nat org.androidtown.mybudgeter.pager.ExpenditureRecyclerAdapter.onBindViewHolder(ExpenditureRecyclerAdapter.java:30)\nat org.androidtown.mybudgeter.pager.ExpenditureRecyclerAdapter.onBindViewHolder(ExpenditureRecyclerAdapter.java:16)\n....\n```\n\n```java\nexpenditureAmount.setText(currentExpenditure.getAmount());\n```\n\n에러로그는 위와 같은 코드에서 발생된 것으로, setText에 Integer 값을 전달했을 때 경우이다.  \nInteger값을 String으로 변환해주면 에러가 수정된다.\n\n```java\nexpenditureAmount.setText(Integer.toString(currentExpenditure.getAmount()));\n```\n"}}},"next":{"repository":{"post":{"__typename":"GitHub_Blob","oid":"e4b0c00bcef7f5a64f4941b849fa6cb2fec43752","text":"# Liquid 문법\n\n- Title : Liquid 문법\n- Date : 2019-03-05\n- Category: Jekyll\n\njekyll 블로그 운영시 알아야할 필수 liquid 문법\n\n[liquid 문법 정리된 사이트](https://shopify.github.io/liquid/basics/types/)\n\n## Liquid\n\n<table>\n<thead>\n\t<tr><th>category</th><th>Input</th><th>Output</th></tr>\n</thead>\n<tbody>\n\t<tr>\n\t\t<td>Objects</td>\n\t\t<td>\n\t\t{ { page.title } }\t\n\t\t</td>\n\t\t<td>Introduction</td>\n\t</tr>\n\t<tr>\n\t\t<td>Tags</td>\n\t\t<td>\n\t\t{ % if user % } <br/>\n\t\t  &nbsp;&nbsp;Hello { { user.name } }! <br/>\n\t\t{ % endif % }\n\t\t</td>\n\t\t<td>Hello Adam!</td>\n\t</tr>\n\t<tr>\n\t\t<td>Filters</td>\n\t\t<td>\n\t\t{ { \"/my/fancy/url\" | append: \".html\" } }\n\t\t</td>\n\t\t<td>/my/fancy/url.html</td>\n\t</tr>\n\t<tr>\n\t\t<td>Filters</td>\n\t\t<td>\n\t\t{ { \"adam!\" | capitalize | prepend: \"Hello \" } }\n\t\t</td>\n\t\t<td>Hello Adam!</td>\n\t</tr>\n\t<tr>\n\t\t<td>assing String</td>\n\t\t<td>\n\t\t{ % assign my_string = \"Hello World!\" % }\n\t\t</td>\n\t\t<td>String 타입</td>\n\t</tr>\n\t<tr>\n\t\t<td>assing Number</td>\n\t\t<td>\n\t\t{ % assign my_int = 25 % }\n\t\t</td>\n\t\t<td>Number 타입</td>\n\t</tr>\n\t<tr>\n\t\t<td>assing Boolean</td>\n\t\t<td>\n\t\t{ % assign foo = true % }\n\t\t</td>\n\t\t<td>Boolean 타입</td>\n\t</tr>\n\t<tr>\n\t\t<td>Nil (empty)</td>\n\t\t<td>\n\t\tThe current user is { { user.name } }\n\t\t</td>\n\t\t<td>The current user is</td>\n\t</tr>\n\t<tr>\n\t\t<td>Array</td>\n\t\t<td>\n\t\t{ % for user in site.users % }<br/>\n\t\t  &nbsp;&nbsp; { { user } }<br/>\n\t\t{ % endfor % }\n\t\t</td>\n\t\t<td>Tobi Laura Tetsuro Adam</td>\n\t</tr>\n\t<tr>\n\t\t<td>Array</td>\n\t\t<td>\n\t\t{ { site.users[0] } }<br/>\n\t\t{ { site.users[1] } }<br/>\n\t\t{ { site.users[3] } }\n\t\t</td>\n\t\t<td>Tobi <br/>\n\t\tLaura <br/>\n\t\tAdam</td>\n\t</tr>\n\t<tr>\n\t\t<td>plus</td>\n\t\t<td>\n\t\t{ { 4 | plus: 2 } }\n\t\t</td>\n\t\t<td>6</td>\n\t</tr>\n\t<tr>\n\t\t<td>limit</td>\n\t\t<td>\n\t\t{ % for item in array limit:2 % }<br/>\n\t       &nbsp;&nbsp; { { item } }<br/>\n\t\t{ % endfor % }\n\t\t</td>\n\t\t<td>limit를 통해 2개까지만 반복문을 돌린다.</td>\n\t</tr>\n</tbody>\n</table>\n"}}}},"pageContext":{"id":"d17108af7f9cb5a3406d3826c036d4f5719706ee","previousPostId":"116b6712fdb1d1bdf026420e0835d318758c57da","nextPostId":"e4b0c00bcef7f5a64f4941b849fa6cb2fec43752"}},"staticQueryHashes":["2685952063","2841359383"]}