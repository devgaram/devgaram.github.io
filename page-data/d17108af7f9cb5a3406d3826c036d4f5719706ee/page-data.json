{"componentChunkName":"component---src-templates-blog-post-js","path":"/d17108af7f9cb5a3406d3826c036d4f5719706ee","result":{"data":{"site":{"siteMetadata":{"title":"보노보노의 평화로운 개발 이야기"}},"current":{"repository":{"post":{"__typename":"GitHub_Blob","oid":"d17108af7f9cb5a3406d3826c036d4f5719706ee","text":"# mssql 쿼리 팁 - group by 없이 카운트하는 방법 & 페이징 처리를 위한 전체 레코드 갯수 구하기\n\n- Title : mssql 쿼리 팁 - group by 없이 카운트하는 방법 & 페이징 처리를 위한 전체 레코드 갯수 구하기\n- Date : 2019-03-07\n- Category: Database\n\n프로시저 속도 개선하는 과정에서 배웠던 sql 팁으로, group by 없이 칼럼과 함께 갯수를 출력하는 방법과\n페이징 처리에 필요한 전체 레코드 갯수를 구하는 방법에 대한 내용입니다.\n\n관리자 페이지 유지보수 중에 한 프로시저의 실행속도가 굉장히 느린 것을 발견했다.  \n실무자에게 확인해 본 결과 페이지 넘길 때마다 기본 일분은 기다린다는 답을 받았다.  \n이 프로시저는 어떤 정보를 프로시저 내에서 페이징 처리를 하여 조회하는 쿼리로 4개의 left outer join 과 복잡한 case 조건의 where 절을 가졌다.  \n심지어 left join 되는 테이블은 조건과 그룹 처리를 하는 서브쿼리로 구성되었다.\n\n# Group by 없이 칼럼과 함께 갯수 출력하기\n\n<span class=\"clr-grey\">\n처음에는 left join 때문이라고 생각했으나 아니였다.      \n진짜 원인은 select 절에서 각 그룹의 갯수를 조회하는 서브쿼리의 문제였다.    \n이를 left outer join 으로 바꿔봤지만 해결되지 않았고 Group by 처리하자니 조회할 컬럼 값이 너무 많았다.    \n고민하다가 검색을 통해 좋은 방법을 찾았다.  \n</span>\n\n```sql\ncount(yy) over (partition by xx)\n```\n\n위는 Group by 없이 컬럼값들과 함께 갯수를 출력할 수 있는 쿼리이다.\n\n```sql\ncount(seq) over (partition by groupSeq)\n```\n\n이를 참고해 select에서 서브쿼리로 조회하던 방식을 위와 같이 수정했더니 실행시간이 13초에서 3초 정도로 줄었다\n\n# 페이징 처리에 필요한 전체 레코드 갯수를 구하는 방법\n\n[전체갯수구하기 참고 블로그](https://m.blog.naver.com/monkeychoi/220629982940)\n\n<span class=\"clr-grey\">\n하지만 아직 한국인을 만족시킬 속도가 아니였기에 속도를 잡아먹는 또 다른 원인을 찾아보았다.     \n바로 전체 레코드 갯수를 구하는 부분이었다.  페이징처리를 위해서 전체 레코드 갯수를 구하는 건 필수였기에 해당 쿼리를 빼는 거는 불가능했다.   \n</span>\n\n기존 페이징 쿼리\n\n```sql\n;WITH myCTE AS\n(\n\tSELECT\n\t\tCOUNT(*) OVER() AS TOTALCNT,\t-- 이 쿼리때문에 느려짐\n\t\tROW_NUMBER() OVER (ORDER BY GroupSeq DESC, seq ASC) AS ROWNUM,\n\t\t*\n\tFROM DBO.MY_BOARD\n)\nSELECT * FROM myCTE WHERE ROWNUM BETWEEN (@I_PAGE -1) * @I_PAGESIZE) + 1 AND @I_PAGE * @I_PAGESIZE\n```\n\n수정 후 쿼리\n\n```sql\n;WITH myCTE AS\n(\n\tSELECT\n\t\tROW_NUMBER() OVER (ORDER BY GroupSeq DESC, seq ASC) AS ROWNUM,\n\t\t*\n\tFROM DBO.MY_BOARD\n)\nSELECT *, (SELECT COUNT(*) FROM myCTE) AS TOTALCNT\nFROM myCTE WHERE ROWNUM BETWEEN (@I_PAGE -1) * @I_PAGESIZE) + 1 AND @I_PAGE * @I_PAGESIZE\n```\n\n위와 같이 쿼리를 수정한 결과 실행시간이 3초에서 1초로 줄었다.\n"}}},"previous":{"repository":{"post":{"__typename":"GitHub_Blob","oid":"116b6712fdb1d1bdf026420e0835d318758c57da","text":"# 안드로이드 에러 - setText의 파라미터로 숫자를 전달했을 때\n\n- Title : 안드로이드 에러 - setText의 파라미터로 숫자를 전달했을 때\n- Date : 2019-03-10\n- Category: Android\n\nsetText의 파라미터로 숫자를 전달했을 때 발생되는 에러로그\n\n에러로그\n\n```\nandroid.content.res.Resources$NotFoundException: String resource ID #0x1f40\nat android.content.res.Resources.getText(Resources.java:354)\nat android.widget.TextView.setText(TextView.java:6133)\nat org.androidtown.mybudgeter.pager.ExpenditureRecyclerAdapter.onBindViewHolder(ExpenditureRecyclerAdapter.java:30)\nat org.androidtown.mybudgeter.pager.ExpenditureRecyclerAdapter.onBindViewHolder(ExpenditureRecyclerAdapter.java:16)\n....\n```\n\n```java\nexpenditureAmount.setText(currentExpenditure.getAmount());\n```\n\n에러로그는 위와 같은 코드에서 발생된 것으로, setText에 Integer 값을 전달했을 때 경우이다.  \nInteger값을 String으로 변환해주면 에러가 수정된다.\n\n```java\nexpenditureAmount.setText(Integer.toString(currentExpenditure.getAmount()));\n```\n"}}},"next":{"repository":{"post":{"__typename":"GitHub_Blob","oid":"5e41146edb49643835d7c14219615e273c6680a1","text":"# 안드로이드에서 이미지 애니메이션 구현 방법\n\n- Title : 안드로이드에서 이미지 애니메이션 구현 방법\n- Date : 2019-01-21\n- Category: Android\n\n이미지 애니메이션 구현 방법에는 다음과 같이 1)Animation Drawable과 2)Animated vector Drawable 두가지 옵션이 있다.\n\n[안드로이드 개발문서-Animate drwable graphics 바로가기](https://developer.android.com/guide/topics/graphics/drawable-animation?hl=ko)\n[Icon Animation 참고 문서](https://www.androiddesignpatterns.com/2016/11/introduction-to-icon-animation-techniques.html)\n\n**Animation Drawable** : 몇 개의 정적 drawable 파일들을 순차적으로 보여주는 방식으로 애니메이션을 구현하고 싶을 때(프레임 애니메이션)  \n**AnimatedVectorDrawable** : 하나의 아이콘이 다른 이미지로 서서히 변화되는(morph) 애니메이션을 구현하고 싶을 때\n\n# AnimationDrawable 사용하기\n\n프레임 애니메이션 구현 [예제](https://github.com/devgaram/AndroidBudgeter/blob/master/app/src/main/res/drawable/ani_emotion.xml)\n\nres/drawable/ani_emotion.xml\n\n```xml\n<animation-list xmlns:android=\"http://schemas.android.com/apk/res/android\"\n    android:oneshot=\"false\">\n    <item android:drawable=\"@drawable/emotion_mouth_1\" android:duration=\"5000\" />\n    <item android:drawable=\"@drawable/emotion_mouth_2\" android:duration=\"5000\" />\n    <item android:drawable=\"@drawable/emotion_mouth_3\" android:duration=\"5000\" />\n    <item android:drawable=\"@drawable/emotion_mouth_4\" android:duration=\"5000\" />\n    <item android:drawable=\"@drawable/emotion_mouth_5\" android:duration=\"5000\" />\n</animation-list>\n```\n\n<span class=\"li-icon\"><code class=\"codetainer\">android:oneshot</code> : true 한번만, false 반복</span>\n\nres/drawable/emotion_mouth_1.xml\n\n```xml\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<layer-list xmlns:android=\"http://schemas.android.com/apk/res/android\">\n    <item\n        android:top=\"@dimen/mb_l\">\n        <shape\n            xmlns:android=\"http://schemas.android.com/apk/res/android\"\n            android:shape=\"rectangle\">\n            <size\n                android:width=\"120dp\"\n                android:height=\"60dp\"></size>\n            <solid android:color=\"@color/colorDefaultFont\"/>\n            <corners\n                android:topRightRadius=\"60dp\"\n                android:topLeftRadius=\"60dp\"></corners>\n        </shape>\n    </item>\n</layer-list>\n```\n\n<span class=\"li-icon\">ShapeDrawable로 입모양 그린 XML 파일</span>\n\nres/drawable/activity_main.xml\n\n```xml\n<ImageView\n            android:id=\"@+id/emotion_mouth\"\n            android:layout_width=\"wrap_content\"\n            android:layout_height=\"wrap_content\"\n            android:layout_gravity=\"center\"\n            android:src=\"@drawable/ani_emotion\" />\n```\n\nMainActivity.java\n\n```java\nAnimationDrawable emotionAnimation;\n\npublic void onCreate(Bundle savedInstanceState) {\n  super.onCreate(savedInstanceState);\n  setContentView(R.layout.main);\n\n  ImageView emotionImage  = (ImageView) findViewById(R.id.emotion_mouth);\n  emotionImage.setImageResource(R.drawable.ani_emotion);\n  emotionAnimation = (AnimationDrawable) emotionImage.getDrawable();\n\n  emotionImage.setOnClickListener(new View.OnClickListener() {\n      @Override\n      public void onClick(View view) {\n        emotionAnimation.start();\n      }\n  });\n}\n```\n\n<span class=\"clr-note\">**Note:** </span><span class=\"clr-grey\"><code class=\"codetainer\">onCreate()</code> 메서드에선 <code class=\"codetainer\">AnimationDrawable</code>가 완전히 로드되지 않으므로 <code class=\"codetainer\">start()</code> 메서드를 사용할 수 없고,\n만약 애니메이션 즉시 실행을 원한다면 액티비티의 <code class=\"codetainer\">onStart()</code> 메서드에서 <code class=\"codetainer\">start()</code> 메서드를 호출해야한다.</span>\n\n# AnimatedVectorDrawable 사용하기\n\n[안드로이드 개발문서-AnimatedVectorDrawable 바로가기](https://developer.android.com/reference/android/graphics/drawable/AnimatedVectorDrawable?hl=ko)\n\nvectorDrawable은 흐려지거나 픽셀화되는 현상 없이 확장가능한 드로어블 타입이다.  \nvectorDrawable 애니메이션을 구현하기 위해서는 3개의 xml 파일이 필요하다.\n\n## 1) vectorDrawable\n\n| Element Name  | Animatable attribute name                                                                                                      |\n| ------------- | ------------------------------------------------------------------------------------------------------------------------------ |\n| `<vector>`    | alpha                                                                                                                          |\n| `<group>`     | rotation, pivotX, pivotY, scaleX, scaleY, translateX, translateY                                                               |\n| `<path>`      | pathData, fillColor, strokeColor, strokeColor, strokeWidth, strokeAlpha, fillAlpha, trimPathStart, trimPathEnd, trimPathOffset |\n| `<clip-path>` | pathData                                                                                                                       |\n\n```xml\n <!--res/drawable/vectordrawable.xml-->\n <vector xmlns:android=\"http://schemas.android.com/apk/res/android\"\n     android:height=\"64dp\"\n     android:width=\"64dp\"\n     android:viewportHeight=\"600\"\n     android:viewportWidth=\"600\" >\n     <group\n         android:name=\"rotationGroup\"\n         android:pivotX=\"300.0\"\n         android:pivotY=\"300.0\"\n         android:rotation=\"45.0\" >\n         <path\n             android:name=\"v\"\n             android:fillColor=\"#000000\"\n             android:pathData=\"M300,70 l 0,-70 70,70 0,0 -70,70z\" />\n     </group>\n </vector>\n```\n\n## 2) AnimatedVectorDrawable\n\n<span class=\"li-nonicon\">한 개의 `android:drawable` 속성과 하나 이상의 `<target>`을 가진다.</span>\n<span class=\"li-nonicon\">`<target>` 은 `android:name` 속성으로 `ObjectAnimator` 또는 `AnimatorSet`의 타겟이 되는 `vectorDrawable`을 명시한다.\n<span class=\"clr-grey\">**Note:** 타겟은 vectorDrawable의 group element 또는 path element가 될 수 있다.</span></span>\n\n```xml\n<!--res/drawable/animatedVector.xml-->\n<animated-vector xmlns:android=\"http://schemas.android.com/apk/res/android\"\n     android:drawable=\"@drawable/vectordrawable\" >\n     <target\n         android:name=\"rotationGroup\"\n         android:animation=\"@animator/rotation\" />\n     <target\n         android:name=\"v\"\n         android:animation=\"@animator/path_morph\" />\n </animated-vector>\n```\n\n<span class=\"li-icon\">vectorDrawable에서 rotationGroup 이름 속성을 가진 `<group>` 엘리먼트에 rotation 애니메이션을 적용</span>\n<span class=\"li-icon\">vectorDrawable에서 v 이름 속성을 가진 `<path>` 엘리먼트에 path_morph 애니메이션을 적용</span>\n\n## 3) ObjectAnimator or AnimatorSet 애니메이션 정의\n\n애니메이션은 `ObjectAnimator` 와 `AnimatorSet`으로 정의할 수 있다.\n\n```xml\n<!-- res/animator/rotation.xml -->\n<objectAnimator\n    android:duration=\"6000\"\n    android:propertyName=\"rotation\"\n    android:valueFrom=\"0\"\n    android:valueTo=\"360\" />\n```\n\n6초동안 360도 회전하는 애니메이션\n\n```xml\n<!-- res/animator/path_morph.xml -->\n<set xmlns:android=\"http://schemas.android.com/apk/res/android\">\n    <objectAnimator\n        android:duration=\"3000\"\n        android:propertyName=\"pathData\"\n        android:valueFrom=\"M300,70 l 0,-70 70,70 0,0   -70,70z\"\n        android:valueTo=\"M300,70 l 0,-70 70,0  0,140 -70,0 z\"\n        android:valueType=\"pathType\" />\n</set>\n```\n\n3초동안 모양 바뀌는 애니메이션(morph)  \n<span class=\"clr-note\">**Note:** `android:valueFrom` 과 `android:valueTo`의 명령 순서와 파라미터 값은 동일해야한다.</span>  \n<span class=\"clr-grey\">**Note:** path 값은 string 리소스에 저장하는 것을 추천한다.</span>\n\n## 4) 3개의 xml을 AAPT 툴의 지원으로 하나의 xml에 정의할 수 있다.\n\n```xml\n <animated-vector xmlns:android=\"http://schemas.android.com/apk/res/android\"\n                  xmlns:aapt=\"http://schemas.android.com/aapt\" >\n     <aapt:attr name=\"android:drawable\">\n         <vector\n             android:height=\"64dp\"\n             android:width=\"64dp\"\n             android:viewportHeight=\"600\"\n             android:viewportWidth=\"600\" >\n             <group\n                 android:name=\"rotationGroup\"\n                 android:pivotX=\"300.0\"\n                 android:pivotY=\"300.0\"\n                 android:rotation=\"45.0\" >\n                 <path\n                     android:name=\"v\"\n                     android:fillColor=\"#000000\"\n                     android:pathData=\"M300,70 l 0,-70 70,70 0,0 -70,70z\" />\n             </group>\n         </vector>\n     </aapt:attr>\n\n     <target android:name=\"rotationGroup\"> *\n         <aapt:attr name=\"android:animation\">\n             <objectAnimator\n             android:duration=\"6000\"\n             android:propertyName=\"rotation\"\n             android:valueFrom=\"0\"\n             android:valueTo=\"360\" />\n         </aapt:attr>\n     </target>\n\n     <target android:name=\"v\" >\n         <aapt:attr name=\"android:animation\">\n             <set>\n                 <objectAnimator\n                     android:duration=\"3000\"\n                     android:propertyName=\"pathData\"\n                     android:valueFrom=\"M300,70 l 0,-70 70,70 0,0 -70,70z\"\n                     android:valueTo=\"M300,70 l 0,-70 70,0  0,140 -70,0 z\"\n                     android:valueType=\"pathType\"/>\n             </set>\n         </aapt:attr>\n      </target>\n </animated-vector>\n```\n\n## 5) 정의한 애니메이션 적용하기\n\nres/drawable/activity_main.xml\n\n```xml\n<ImageView\n            android:id=\"@+id/emotion_mouth\"\n            android:layout_width=\"wrap_content\"\n            android:layout_height=\"wrap_content\"\n            android:layout_gravity=\"center\"\n            android:src=\"@drawable/animatedVector\" />\n```\n\nMainActivity.java\n\n```java\n ImageView emotionImage;\n\npublic void onCreate(Bundle savedInstanceState) {\n  super.onCreate(savedInstanceState);\n  setContentView(R.layout.main);\n\n  emotionImage  = (ImageView) findViewById(R.id.emotion_mouth);\n\n  emotionImage.setOnClickListener(new View.OnClickListener() {\n      @Override\n      public void onClick(View view) {\n        Drawable drawable = emotionImage.getDrawable();\n            if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.LOLLIPOP) {\n                if (drawable instanceof AnimatedVectorDrawable) {\n                    AnimatedVectorDrawable animatedVectorDrawable = (AnimatedVectorDrawable) drawable;\n                    animatedVectorDrawable.start();\n                }\n            } else {\n                if (drawable instanceof AnimatedVectorDrawableCompat) {\n                    AnimatedVectorDrawableCompat animatedVectorDrawableCompat = (AnimatedVectorDrawableCompat) drawable;\n                    animatedVectorDrawableCompat.start();\n                }\n            }\n      }\n  });\n\n}\n```\n"}}}},"pageContext":{"id":"d17108af7f9cb5a3406d3826c036d4f5719706ee","previousPostId":"116b6712fdb1d1bdf026420e0835d318758c57da","nextPostId":"5e41146edb49643835d7c14219615e273c6680a1"}},"staticQueryHashes":["2841359383"]}