{"componentChunkName":"component---src-templates-blog-post-js","path":"/1915e03780a46a3344b4cdf3bc8284ba7af6804e","result":{"data":{"site":{"siteMetadata":{"title":"보노보노의 평화로운 개발 이야기"}},"current":{"repository":{"post":{"__typename":"GitHub_Blob","oid":"1915e03780a46a3344b4cdf3bc8284ba7af6804e","text":"# npm Working with package.json\n\n- Title : npm Working with package.json\n- Date : 2018-04-16\n- Category: Nodejs\n\n# 5. Working with package.json\n\n로컬에 설치된 npm 패키지를 관리하는 최상의 방법은 package.json 파일을 생성하는 것입니다.\n\npackage.json 파일은 :\n\n- 프로젝트가 의존하고 있는 패키지들의 리스트를 보여줍니다.\n- semantic versioning rule에 따라 프로젝트에 의존한 패키지들의 버전을 설정할 수 있습니다.\n- 빌드를 재현할 수 있으므로, 좀 더 쉽게 다른 개발자와 공유할 수 있습니다.\n\n## 요구사항\n\npackage.json 파일이 반드시 가져야하는 것\n\n- \"name\"\n  - 소문자\n  - 한단어, 띄어쓰기 허용X\n  - -(dashes) 와 \\_ (underscores) 허용O\n- \"version\"\n  - x.x.x 형태\n  - semver spec을 따름\n\n```\n{\n \"name\" : \"my-awesome-package\",\n \"version\" : \"1.0.0\"\n}\n```\n\n## package.json 파일 생성하기\n\n```\n> npm init\n또는\n> npm init --yes\n#--yes === -y\n```\n\n위 명령어는 현재 디렉토리로부터 정보를 추출해서 해당 package.json 파일을 생성합니다.\n\n```\n{\n  \"name\": \"my_package\",\n  \"description\": \"\",\n  \"version\": \"1.0.0\",\n  \"main\": \"index.js\",\n  \"scripts\": {\n    \"test\": \"echo \\\"Error: no test specified\\\" && exit 1\"\n  },\n  \"repository\": {\n    \"type\": \"git\",\n    \"url\": \"https://github.com/ashleygwilliams/my_package.git\"\n  },\n  \"keywords\": [],\n  \"author\": \"\",\n  \"license\": \"ISC\",\n  \"bugs\": {\n    \"url\": \"https://github.com/ashleygwilliams/my_package/issues\"\n  },\n  \"homepage\": \"https://github.com/ashleygwilliams/my_package\"\n}\n```\n\n- name : 현재 디렉토리 이름\n- version : 항상 1.0.0\n- description : readme 정보 또는 \"\"\n- main : 항상 index.js\n- scripts : 기존적으로 빈 테스트 스크립트를 만든다.\n- keywords : empty\n- author : empty\n- license : ISC\n- bugs : 현재 디렉토리의 정보\n- homepage : 현재 디렉토리의 정보\n\n다음과 같이 명령어 실행시 옵션을 설정할 수 있습니다.\n\n```\n> npm set init.author.email \"wombat@npmjs.com\"\n> npm set init.author.name \"ag_dubs\"\n> npm set init.license \"MIT\"\n```\n\n## Dependencies 지정하기\n\n프로젝트가 의존하는 패키지를 지정하려면 package.json 파일에 사용할 패키지들을 나열해야합니다. 그리고 패키지들은 두 개의 타입으로 나열될 수 있습니다.\n\n- \"dependencies\" : 프로젝트 배포 시\n- \"devDependencies\" : 프로젝트 개발 또는 테스트 시\n\npackage.jsondp dependencies를 추가하는 더 쉬운 방법은 npm install 명령어 실행시 --save 또는 --save-dev 플래그를 사용하는 것 입니다.\n\n```\n> npm install <package_name> --save\n> npm install <package_name> --save-dev\n```\n"}}},"previous":{"repository":{"post":{"__typename":"GitHub_Blob","oid":"f3c739a9f9af2d42a8f59bed45bd78959efdcd6e","text":"# jekyll의 minimal-mistakes에서 자바스크립트 커스텀하는 방법\n\n- Title : jekyll의 minimal-mistakes에서 자바스크립트 커스텀하는 방법\n- Date : 2019-01-05\n- Category: Jekyll\n\nminimal-mistakes 테마를 적용한 jekyll 블로그를 커스텀하는 과정에서 자바스크립트 코드를 추가하는 방법입니다.  \nminimal-mistakes 문서에 자바스크립트 커스텀 방법이 잘 정리되어있습니다.\n[공식문서 바로가기](https://mmistakes.github.io/minimal-mistakes/docs/javascript/).\n\n---\n\n우리가 수정해야 할 파일은 /assets/js/ 에 위치한 \\_main.js 파일입니다.  \n하지만, jekyll은 \\_main.js 파일이 아닌 main.min.js 파일을 컴파일하여 화면에 반영합니다.  \nmain.min.js 는 \\_main.js 자바스크립트 코드를 압축화하고 난독화한 파일로 npm 패키지 중 하나인 uglify를 이용하여 만들 수 있습니다.\n\n## 1. npm 셋팅\n\n```\n> npm init\n```\n\n블로그 프로젝트 디렉토리 위치에서 위 코드를 실행시키면 package.json 파일이 생성됩니다.\n\n## 2. package.json 파일 수정\n\nhttps://github.com/mmistakes/minimal-mistakes/blob/master/package.json\npackage.json 파일을 아래와 같이 수정합니다.\n\n```json\n{\n  \"name\": \"minimal-mistakes\",\n  \"version\": \"4.14.2\",\n  \"description\": \"Minimal Mistakes 2 column Jekyll theme.\",\n  \"repository\": {\n    \"type\": \"git\",\n    \"url\": \"git://github.com/mmistakes/minimal-mistakes.git\"\n  },\n  \"keywords\": [\"jekyll\", \"theme\", \"minimal\"],\n  \"author\": \"Michael Rose\",\n  \"license\": \"MIT\",\n  \"bugs\": {\n    \"url\": \"https://github.com/mmistakes/minimal-mistakes/issues\"\n  },\n  \"homepage\": \"https://mmistakes.github.io/minimal-mistakes/\",\n  \"engines\": {\n    \"node\": \">= 0.10.0\"\n  },\n  \"devDependencies\": {\n    \"npm-run-all\": \"^4.1.5\",\n    \"onchange\": \"^5.1.3\",\n    \"uglify-js\": \"^3.4.9\"\n  },\n  \"scripts\": {\n    \"uglify\": \"uglifyjs assets/js/vendor/jquery/jquery-3.3.1.min.js assets/js/plugins/jquery.fitvids.js assets/js/plugins/jquery.greedy-navigation.js assets/js/plugins/jquery.magnific-popup.js assets/js/plugins/jquery.smooth-scroll.min.js assets/js/_main.js -c -m -o assets/js/main.min.js\",\n    \"add-banner\": \"node banner.js\",\n    \"watch:js\": \"onchange \\\"assets/js/**/*.js\\\" -e \\\"assets/js/main.min.js\\\" -- npm run build:js\",\n    \"build:js\": \"npm run uglify && npm run add-banner\"\n  }\n}\n```\n\n## 3. uglify 설치 및 실행\n\nuglify-js 패키지 설치\n\n```\n> npm install uglify-js\n```\n\npackage.json의 scripts 부분을 보면 build:js 스크립트 실행시 **npm run uglify && npm run add-banner** 를 실행하도로 되어있습니다.\n이를 참고하여 cmd에서 <code class=\"codetainer\">npm run build:js</code>를 실행해봅시다. 정상적으로 \\_main.js 파일이 main.min.js로 압축된 것을 확인할 수 있을 것입니다.\n\n## 4. jekyll serve 실행\n\n이미 서버가 실행되어있다면 자동으로 반영됩니다.  \n그렇지 않다면 다시 **jekyll serve** 를 통해 서버를 실행해주면 커스텀한 자바스크립트 코드가 반영된 것을 확인할 수 있습니다.\n"}}},"next":{"repository":{"post":{"__typename":"GitHub_Blob","oid":"c636b7749da7503e1608b5aa12d6ee7b06881fa5","text":"# npm 로컬 패키지 설치하기\n\n- Title : npm 로컬 패키지 설치하기\n- Date : 2018-04-13\n- Category: Nodejs\n\n# 4. 로컬에 패키지를 설치해보자\n\n패키지를 어떤 방식으로 사용하는지에 따라 우리는 로컬 또는 전역에 npm 패키지를 설치할 수 있습니다.\n\n- Node.js의 require을 사용하여 당신의 모듈에서 패키지를 사용하려면 로컬로 설치하면 됩니다. 이는 npm 설치의 기본 동작입니다.\n- 패키지를 CLI와 같은 커맨드 라인 툴에서 사용하려면 전역으로 설치하면 됩니다.\n\n## 패키지 다운로드하기\n\n```\n> npm install <package_name>\n```\n\n명령어를 실행하면 현재 디렉토리에 node_modules 디렉토리가 생성됩니다. (node_modules 디렉토리가 없을 경우)\n그리고 node_modules 디렉토리 안에 다운로드 받은 패키지가 존재하게됩니다.\n\n## 설치된 패키지 어떤 버전일까?\n\n로컬 디렉토리에 package.json 파일이 없다면, 가장 최신 버전의 패키지가 설치됩니다. package.json 파일이 있으면 npm은 package.json 파일에 선언된 semver rule을 만족하는 최신버전을 설치합니다.\n\n예) package.json\n\n```\n...\n\"dependencies\" : {\n\"lodash\" : \"~1.0.4\"\n}\n....\n```\n\nnpm은 package.json에 따라 1.0.4 버전의 lodash 패키지를 설치하게됩니다.\n\n## 패키지를 어떻게 사용할까?\n\n일단 node_modules 디렉토리에 패키지가 있다면, 우리의 코드에서 패키지를 사용할 수 있습니다.\n\n예) index.js 파일\n\n```\nvar lodash = require('lodash');\nvar output = lodash.without([1,2,3],1);\nconsole.log(output);    // 결과 : [2,3]\n```\n\n만약 lodash 패키지가 설치되지않았다면 Error : Cannot find module 'lodash' 에러를 보게될 것 입니다.\n\n# 7. 로컬에 설치된 패키지 삭제해보자\n\nnode_modules 디렉토리의 패키지를 삭제하는 명령어\n\n```\n> npm uninstall lodash\n```\n\npackage.json의 dependecies에서 패키지를 제거하려면 save 플래그를 사용해야합니다.\n\n```\n> npm uninstall --save lodash\n```\n\n**Note:** 패키지가 devDependency로 설치된 경우, package.json에서 제거하는 방법은 다음과 같습니다.\n\n```\n> npm uninstall --save-dev lodash\n```\n\nnode_modules 디렉토리에 해당 패키지가 없다면 삭제가 정상적으로 된 것입니다.\n\n# 8~10. 전역에 패키지를 설치/업데이트/삭제 해보기\n\n패키지 설치\n\n```\n> npm install -g jshint\n```\n\n패키지업데이트\n\n```\n> npm update -g jshint\n```\n\n패키지 삭제\n\n```\n> npm uninstall -g jshint\n```\n"}}}},"pageContext":{"id":"1915e03780a46a3344b4cdf3bc8284ba7af6804e","previousPostId":"f3c739a9f9af2d42a8f59bed45bd78959efdcd6e","nextPostId":"c636b7749da7503e1608b5aa12d6ee7b06881fa5"}},"staticQueryHashes":["2841359383"]}