{"componentChunkName":"component---src-templates-blog-post-js","path":"/03e73fed3a9d0eacb1704fefb89e8300da18fa23","result":{"data":{"site":{"siteMetadata":{"title":"보노보노의 평화로운 개발 이야기"}},"current":{"repository":{"post":{"__typename":"GitHub_Blob","oid":"03e73fed3a9d0eacb1704fefb89e8300da18fa23","text":"# 부트스트랩의 sr-only 클래스가 하는 일\n\n- Title : 부트스트랩의 sr-only 클래스가 하는 일\n- Date : 2020-05-18\n- Category : 프론트\n\n이 글은 그저 기억하기 위한 용도로 작성했으니 참고바랍니다.\n\n부트스트랩은 `sr-only` 클래스를 사용하여 원하는 요소를 화면상에서는 사라지게 하는 동시에 웹 접근성을 높인다. 장애를 가진 사람은 스크린 리더기나 점자 타자기와 같은 보조 기구를 통해 웹을 인식하기 때문에 웹 접근성은 신경써야 할 요소 중 하나다. 간단하게 `<img>` 태그의 alt 요소에 이미지를 파악할 수 있는 텍스트를 작성하는 것만으로도 웹 접근성을 높일 수 있다. \n\n나는 체크박스(`<input type=\"checkbox>`)를 커스텀하면서 `sr-only` 를 접하게 되었다. *아마 사수가 아니었으면 웹 접근성을 신경쓰지도 않았을 텐데 덕분에 팁을 얻었다.*  작업에 대해 자세히 말하자면 체크박스를 슬라이드 토글 형태로 커스텀하는 것이었다. 작업 순서는 아래와 같다. 체크 박스에 `sr-only` 클래스를 적용하여 체크 박스를 사라지게 만들기 → `<label><div class=\"circle\"></label>` 로 style 만들기 → 체크박스 `:checked` 일 때 토글 효과 주기\n\n부트스트랩의 `sr-only` 는 다음과 같이 작성되어있다. 이를 이용하여 체크박스를 화면에서 지우면 된다.\n\n```css\n.sr-only {\n\tposition: absolute;\n\toverflow: hidden;\n\twidth: 1px;\n\theight: 1px;\n\tpadding: 0;\n\tmargin: -1px;\n\tborder: 0;\n\tclip: rect(0,0,0,0);\n}\n```\n\n `clip` 속성은 요소의 일부분만 보이게 하고 싶을 때 사용한다. 단, 요소의 `position`이 `absolute` 또는 `fixed`로 적용되어 있어야 작동된다. `sr-only` 에서 `clip` 요소는 `rect(0,0,0,0)` 으로 선언되어있는 데 이는 요소를 노출 시키지 않겠다는 의미다.\n"}}},"previous":{"repository":{"post":{"__typename":"GitHub_Blob","oid":"1d97f7e13119ff2ba29e19b7c06f0633ab1007fe","text":"# Git cherry-pick으로 필요한 커밋만 골라내기\n\nDate: Jun 17, 2020\n\n- Title : Git cherry-pick으로 필요한 커밋만 골라내기\n- Date : 2020-03-17\n- Category : Git\n\n# Git Cherry-pick\n\n현재 상황\n\n- feature/cherry에 작업한 결과를 Pull Request 보낸 상태\n- 브랜치가 꼬여서 해당 브랜치에서 작업한 커밋 외의 것도 보이는 상태\n\n원하는 결과\n\n- feature/cherry 에서 원하는 커밋만 남긴 후 다시 푸시 하고 싶음(PR 재 요청X)\n\n## 실습\n\n### feature/cherry 브랜치 로그 확인\n\n```bash\ngit log\n```\n\n`결과 예시: commit 4564415dfbdsfgsdgsd (feature/cherry)` \n\n### 커밋들을 저장할 임시 브랜치 생성(base branch에서 새 브랜치 생성)\n\n```bash\ngit checkout -b feature/cherry-correct\n```\n\n### cherry-pick 실행\n\n```bash\ngit cherry-pick 4564415dfbdsfgsdgsd(가져 가고 싶은 커밋넘버)\n```\n\n### feature/cherry 브랜치 reset\n\n```bash\ngit checkout feature/cherry\ngit reset feature/cherry-correct --hard\ngit push origin feature/cherry -f\n```\n\n`--hard` 옵션이 없을 경우 기존 브랜치에서 작업한 내용이 `unstaged`된 채 남아 있으니 필요한 경우가 아니라면 옵션을 추가 하는 것이 좋다.\n\n참고\n\n[https://medium.com/react-native-seoul/git-cherry-pick-사용법-fe1a3346bd27](https://medium.com/react-native-seoul/git-cherry-pick-%EC%82%AC%EC%9A%A9%EB%B2%95-fe1a3346bd27)\n"}}},"next":{"repository":{"post":{"__typename":"GitHub_Blob","oid":"d828d76a01fdf156e30e5cff57c159e3cbf5c5f0","text":"# git rebase\n\nDate: Apr 27, 2020\n\n- Title : git rebase\n- Date : 2020-04-27\n- Category : Git\n\n## git rebase 하기\n\n```bash\ngit checkout develop\n\ngit fetch origin develop\n\ngit checkout feature\n\ngit rebase origin/develop\n\n// conflict 발생 시 충돌 해결 후\ngit add <수정된 파일 이름>\n\ngit rebase --continue\n```\n\n- git fetch origin develop을 하면 로컬의 origin/develop 에 원격저장소 develop의 최신 커밋들이 싱크된다. 그래서 rebase 대상이 develop이 아니라 origin/develop 이다.\n- 충돌 해결 후 파일을 commit 이 아니라 **꼭 add만 해야 한다.**\n\n## git rebase 취소\n\n이미 remote 까지 push 했을 때 rebase 취소하는 방법\n\n```bash\ngit reflog <브랜치명>\n\n// 돌아가고 싶은 커밋 확인\ngit reset --hard <128e6d4>\n\ngit push -f origin <브랜치명>\n```\n\n## 생각하기\n\n### `git rebase origin/develop` 과 `git rebase develop` 의 차이점\n\n### `git fetch origin develop` 과 `git pull origin develop` 의 차이점\n\npull 은 내부적으로 `fetch + merge` 를 실행한 것과 같다. 즉 pull 을 실행하면 원격 저장소의 내용을 가져오고(fetch) 병합작업(merge)를 수행하게 된다. 만약 단순히 원격 저장소의 내용을 확인만 하고 로컬 데이터와 병합은 하고 싶지 않다면 fetch를 수행하면 된다. fetch를 하게되면 최신 커밋들은 로컬에 `FETCH_HEAD` 라는 이름으로 가져오게 된다. 이 상태에서 원격 저장소의 내용을 로컬 저장소에 통합하고 싶다면 `FETCH_HEAD` 브랜치를 merge 하거나 pull 하면 된다.\n"}}}},"pageContext":{"id":"03e73fed3a9d0eacb1704fefb89e8300da18fa23","previousPostId":"1d97f7e13119ff2ba29e19b7c06f0633ab1007fe","nextPostId":"d828d76a01fdf156e30e5cff57c159e3cbf5c5f0"}},"staticQueryHashes":["2841359383"]}