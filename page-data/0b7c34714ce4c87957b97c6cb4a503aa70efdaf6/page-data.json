{"componentChunkName":"component---src-templates-blog-post-js","path":"/0b7c34714ce4c87957b97c6cb4a503aa70efdaf6","result":{"data":{"site":{"siteMetadata":{"title":"보노보노의 평화로운 개발 이야기"}},"current":{"repository":{"post":{"__typename":"GitHub_Blob","oid":"0b7c34714ce4c87957b97c6cb4a503aa70efdaf6","text":"# 백준 설탕배달 Java\n\n- Title : 백준 설탕배달 Java\n- Date : 2019-12-09\n- Category: 알고리즘 풀이\n\n# 문제 설명\n\n상근이는 요즘 설탕공장에서 설탕을 배달하고 있다. 상근이는 지금 사탕가게에 설탕을 정확하게 N킬로그램을 배달해야 한다. 설탕공장에서 만드는 설탕은 봉지에 담겨져 있다. 봉지는 3킬로그램 봉지와 5킬로그램 봉지가 있다.\n\n상근이는 귀찮기 때문에, 최대한 적은 봉지를 들고 가려고 한다. 예를 들어, 18킬로그램 설탕을 배달해야 할 때, 3킬로그램 봉지 6개를 가져가도 되지만, 5킬로그램 3개와 3킬로그램 1개를 배달하면, 더 적은 개수의 봉지를 배달할 수 있다.\n\n상근이가 설탕을 정확하게 N킬로그램 배달해야 할 때, 봉지 몇 개를 가져가면 되는지 그 수를 구하는 프로그램을 작성하시오.\n\n**입력**  \n첫째 줄에 N이 주어진다. (3 ≤ N ≤ 5000)\n\n**출력**  \n상근이가 배달하는 봉지의 최소 개수를 출력한다. 만약, 정확하게 N킬로그램을 만들 수 없다면 -1을 출력한다.\n\n# 내 풀이\n\n최소 개수의 봉지를 구해야해서 5킬로그램 봉지부터 계산한다.\n\n```java\nimport java.util.Scanner;\n\npublic class Main {\n\tpublic static void main(String[] args) {\n\t\tScanner sc = new Scanner(System.in);\n\t\tint N = sc.nextInt();\n\t\tSystem.out.println(Solution(N));\n\t}\n\n\tpublic static int Solution(int N) {\n\t\tint c = N / 5;\n\t\tint r = N % 5;\n\t\twhile (c >= 0 && r > 0) {\n\t\t\tif (r % 3 == 0) {\n\t\t\t\tc += r/3;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tc--;\n\t\t\tr += 5;\n\t\t}\n\t\tif (c < 0) return -1;\n\t\treturn c;\n\t}\n}\n```\n"}}},"previous":{"repository":{"post":{"__typename":"GitHub_Blob","oid":"47fd52255ef30bd58a17b3696a2a9869befb8488","text":"# 프로그래머스 다음 큰 숫자 Javascript\n\n- Title : 프로그래머스 다음 큰 숫자 Javascript\n- Date : 2019-11-29\n- Category: 알고리즘 풀이\n\n# 문제 설명\n\n자연수 n이 주어졌을 때, n의 다음 큰 숫자는 다음과 같이 정의 합니다.\n\n- 조건 1. n의 다음 큰 숫자는 n보다 큰 자연수 입니다.\n- 조건 2. n의 다음 큰 숫자와 n은 2진수로 변환했을 때 1의 갯수가 같습니다. \\*조건 3. n의 다음 큰 숫자는 조건 1, 2를 만족하는 수 중 가장 작은 수 입니다.\n\n예를 들어서 78(1001110)의 다음 큰 숫자는 83(1010011)입니다.\n\n자연수 n이 매개변수로 주어질 때, n의 다음 큰 숫자를 return 하는 solution 함수를 완성해주세요.\n\n# 내 풀이\n\n2진수 n의 1 비트 갯수와 같은 비트수를 가지는 숫자를 n+1부터 반복을 돌려서 찾으면 된다.\n\n```javascript\nfunction solution(n) {\n  let nBit = getBitCount(n);\n  while (true) {\n    if (getBitCount(++n) === nBit) break;\n  }\n\n  function getBitCount(number) {\n    let bitCount = 0;\n    while (number > 0) {\n      if (number & (1 === 1)) bitCount++;\n      number = number >>> 1;\n    }\n    return bitCount;\n  }\n\n  return n;\n}\n```\n\n# 다른 사람 풀이\n\n풀고 다른 사람의 풀이를 보니 아이디어는 비슷했으나 비트 수를 세는 방법이 다양했다.\n\n1. String.prototype.match() 메서드와 정규 표현식 이용하기\n\n```javascript\nfunction solution(n) {\n  // console.log(n.toString(2).match(/1/g)) : [ '1', '1', '1', '1' ] 배열 형태로 반환\n  let nBit = n.toString(2).match(/1/g).length;\n  while (true) if ((++n).toString(2).match(/1/g).length === nBit) return n;\n}\n```\n"}}},"next":{"repository":{"post":{"__typename":"GitHub_Blob","oid":"38350bdf91fec2dfe882ccaa625590845647701f","text":"# 백준 벌집 Java\n\n- Title : 백준 벌집 Java\n- Date : 2019-12-09\n- Category: 알고리즘 풀이\n\n# 문제 설명\n\n(https://www.acmicpc.net/problem/2292)[https://www.acmicpc.net/problem/2292]\n\n# 내 풀이\n\n규칙을 찾아보았다.\n\n- 1 (1개) => 1칸\n- 2 ~ 7 (6개) => 2칸\n- 8 ~ 19 (12개) => 3칸\n- 20 ~ 37 (18개) => 4칸\n\n즉, 방의 수를 1부터 6\\*count(1,2,3..) 값을 누적시켰을 때 방의 수가 N보다 크거나 같아지는 순간이 답이 된다.\n\n```java\nimport java.util.Scanner;\n\npublic class Main {\n\tpublic static void main(String[] args) {\n\t\tScanner sc = new Scanner(System.in);\n\t\tint N = sc.nextInt();\n\t\tSystem.out.println(Solution(N));\n\t}\n\n\tpublic static int Solution(int N) {\n\t\tint room = 1;\n\t\tint count = 1;\n\t\twhile (N > room) {\n\t\t\troom += 6 * (count++);\n\t\t}\n\t\treturn count;\n\t}\n}\n```\n"}}}},"pageContext":{"id":"0b7c34714ce4c87957b97c6cb4a503aa70efdaf6","previousPostId":"47fd52255ef30bd58a17b3696a2a9869befb8488","nextPostId":"38350bdf91fec2dfe882ccaa625590845647701f"}},"staticQueryHashes":["2841359383"]}