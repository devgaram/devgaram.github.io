{"componentChunkName":"component---src-templates-blog-post-js","path":"/5e41146edb49643835d7c14219615e273c6680a1","result":{"data":{"site":{"siteMetadata":{"title":"보노보노의 평화로운 개발 이야기"}},"current":{"repository":{"post":{"__typename":"GitHub_Blob","oid":"5e41146edb49643835d7c14219615e273c6680a1","text":"# 안드로이드에서 이미지 애니메이션 구현 방법\n\n- Title : 안드로이드에서 이미지 애니메이션 구현 방법\n- Date : 2019-01-21\n- Category: Android\n\n이미지 애니메이션 구현 방법에는 다음과 같이 1)Animation Drawable과 2)Animated vector Drawable 두가지 옵션이 있다.\n\n[안드로이드 개발문서-Animate drwable graphics 바로가기](https://developer.android.com/guide/topics/graphics/drawable-animation?hl=ko)\n[Icon Animation 참고 문서](https://www.androiddesignpatterns.com/2016/11/introduction-to-icon-animation-techniques.html)\n\n**Animation Drawable** : 몇 개의 정적 drawable 파일들을 순차적으로 보여주는 방식으로 애니메이션을 구현하고 싶을 때(프레임 애니메이션)  \n**AnimatedVectorDrawable** : 하나의 아이콘이 다른 이미지로 서서히 변화되는(morph) 애니메이션을 구현하고 싶을 때\n\n# AnimationDrawable 사용하기\n\n프레임 애니메이션 구현 [예제](https://github.com/devgaram/AndroidBudgeter/blob/master/app/src/main/res/drawable/ani_emotion.xml)\n\nres/drawable/ani_emotion.xml\n\n```xml\n<animation-list xmlns:android=\"http://schemas.android.com/apk/res/android\"\n    android:oneshot=\"false\">\n    <item android:drawable=\"@drawable/emotion_mouth_1\" android:duration=\"5000\" />\n    <item android:drawable=\"@drawable/emotion_mouth_2\" android:duration=\"5000\" />\n    <item android:drawable=\"@drawable/emotion_mouth_3\" android:duration=\"5000\" />\n    <item android:drawable=\"@drawable/emotion_mouth_4\" android:duration=\"5000\" />\n    <item android:drawable=\"@drawable/emotion_mouth_5\" android:duration=\"5000\" />\n</animation-list>\n```\n\n<span class=\"li-icon\"><code class=\"codetainer\">android:oneshot</code> : true 한번만, false 반복</span>\n\nres/drawable/emotion_mouth_1.xml\n\n```xml\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<layer-list xmlns:android=\"http://schemas.android.com/apk/res/android\">\n    <item\n        android:top=\"@dimen/mb_l\">\n        <shape\n            xmlns:android=\"http://schemas.android.com/apk/res/android\"\n            android:shape=\"rectangle\">\n            <size\n                android:width=\"120dp\"\n                android:height=\"60dp\"></size>\n            <solid android:color=\"@color/colorDefaultFont\"/>\n            <corners\n                android:topRightRadius=\"60dp\"\n                android:topLeftRadius=\"60dp\"></corners>\n        </shape>\n    </item>\n</layer-list>\n```\n\n<span class=\"li-icon\">ShapeDrawable로 입모양 그린 XML 파일</span>\n\nres/drawable/activity_main.xml\n\n```xml\n<ImageView\n            android:id=\"@+id/emotion_mouth\"\n            android:layout_width=\"wrap_content\"\n            android:layout_height=\"wrap_content\"\n            android:layout_gravity=\"center\"\n            android:src=\"@drawable/ani_emotion\" />\n```\n\nMainActivity.java\n\n```java\nAnimationDrawable emotionAnimation;\n\npublic void onCreate(Bundle savedInstanceState) {\n  super.onCreate(savedInstanceState);\n  setContentView(R.layout.main);\n\n  ImageView emotionImage  = (ImageView) findViewById(R.id.emotion_mouth);\n  emotionImage.setImageResource(R.drawable.ani_emotion);\n  emotionAnimation = (AnimationDrawable) emotionImage.getDrawable();\n\n  emotionImage.setOnClickListener(new View.OnClickListener() {\n      @Override\n      public void onClick(View view) {\n        emotionAnimation.start();\n      }\n  });\n}\n```\n\n<span class=\"clr-note\">**Note:** </span><span class=\"clr-grey\"><code class=\"codetainer\">onCreate()</code> 메서드에선 <code class=\"codetainer\">AnimationDrawable</code>가 완전히 로드되지 않으므로 <code class=\"codetainer\">start()</code> 메서드를 사용할 수 없고,\n만약 애니메이션 즉시 실행을 원한다면 액티비티의 <code class=\"codetainer\">onStart()</code> 메서드에서 <code class=\"codetainer\">start()</code> 메서드를 호출해야한다.</span>\n\n# AnimatedVectorDrawable 사용하기\n\n[안드로이드 개발문서-AnimatedVectorDrawable 바로가기](https://developer.android.com/reference/android/graphics/drawable/AnimatedVectorDrawable?hl=ko)\n\nvectorDrawable은 흐려지거나 픽셀화되는 현상 없이 확장가능한 드로어블 타입이다.  \nvectorDrawable 애니메이션을 구현하기 위해서는 3개의 xml 파일이 필요하다.\n\n## 1) vectorDrawable\n\n| Element Name  | Animatable attribute name                                                                                                      |\n| ------------- | ------------------------------------------------------------------------------------------------------------------------------ |\n| `<vector>`    | alpha                                                                                                                          |\n| `<group>`     | rotation, pivotX, pivotY, scaleX, scaleY, translateX, translateY                                                               |\n| `<path>`      | pathData, fillColor, strokeColor, strokeColor, strokeWidth, strokeAlpha, fillAlpha, trimPathStart, trimPathEnd, trimPathOffset |\n| `<clip-path>` | pathData                                                                                                                       |\n\n```xml\n <!--res/drawable/vectordrawable.xml-->\n <vector xmlns:android=\"http://schemas.android.com/apk/res/android\"\n     android:height=\"64dp\"\n     android:width=\"64dp\"\n     android:viewportHeight=\"600\"\n     android:viewportWidth=\"600\" >\n     <group\n         android:name=\"rotationGroup\"\n         android:pivotX=\"300.0\"\n         android:pivotY=\"300.0\"\n         android:rotation=\"45.0\" >\n         <path\n             android:name=\"v\"\n             android:fillColor=\"#000000\"\n             android:pathData=\"M300,70 l 0,-70 70,70 0,0 -70,70z\" />\n     </group>\n </vector>\n```\n\n## 2) AnimatedVectorDrawable\n\n<span class=\"li-nonicon\">한 개의 `android:drawable` 속성과 하나 이상의 `<target>`을 가진다.</span>\n<span class=\"li-nonicon\">`<target>` 은 `android:name` 속성으로 `ObjectAnimator` 또는 `AnimatorSet`의 타겟이 되는 `vectorDrawable`을 명시한다.\n<span class=\"clr-grey\">**Note:** 타겟은 vectorDrawable의 group element 또는 path element가 될 수 있다.</span></span>\n\n```xml\n<!--res/drawable/animatedVector.xml-->\n<animated-vector xmlns:android=\"http://schemas.android.com/apk/res/android\"\n     android:drawable=\"@drawable/vectordrawable\" >\n     <target\n         android:name=\"rotationGroup\"\n         android:animation=\"@animator/rotation\" />\n     <target\n         android:name=\"v\"\n         android:animation=\"@animator/path_morph\" />\n </animated-vector>\n```\n\n<span class=\"li-icon\">vectorDrawable에서 rotationGroup 이름 속성을 가진 `<group>` 엘리먼트에 rotation 애니메이션을 적용</span>\n<span class=\"li-icon\">vectorDrawable에서 v 이름 속성을 가진 `<path>` 엘리먼트에 path_morph 애니메이션을 적용</span>\n\n## 3) ObjectAnimator or AnimatorSet 애니메이션 정의\n\n애니메이션은 `ObjectAnimator` 와 `AnimatorSet`으로 정의할 수 있다.\n\n```xml\n<!-- res/animator/rotation.xml -->\n<objectAnimator\n    android:duration=\"6000\"\n    android:propertyName=\"rotation\"\n    android:valueFrom=\"0\"\n    android:valueTo=\"360\" />\n```\n\n6초동안 360도 회전하는 애니메이션\n\n```xml\n<!-- res/animator/path_morph.xml -->\n<set xmlns:android=\"http://schemas.android.com/apk/res/android\">\n    <objectAnimator\n        android:duration=\"3000\"\n        android:propertyName=\"pathData\"\n        android:valueFrom=\"M300,70 l 0,-70 70,70 0,0   -70,70z\"\n        android:valueTo=\"M300,70 l 0,-70 70,0  0,140 -70,0 z\"\n        android:valueType=\"pathType\" />\n</set>\n```\n\n3초동안 모양 바뀌는 애니메이션(morph)  \n<span class=\"clr-note\">**Note:** `android:valueFrom` 과 `android:valueTo`의 명령 순서와 파라미터 값은 동일해야한다.</span>  \n<span class=\"clr-grey\">**Note:** path 값은 string 리소스에 저장하는 것을 추천한다.</span>\n\n## 4) 3개의 xml을 AAPT 툴의 지원으로 하나의 xml에 정의할 수 있다.\n\n```xml\n <animated-vector xmlns:android=\"http://schemas.android.com/apk/res/android\"\n                  xmlns:aapt=\"http://schemas.android.com/aapt\" >\n     <aapt:attr name=\"android:drawable\">\n         <vector\n             android:height=\"64dp\"\n             android:width=\"64dp\"\n             android:viewportHeight=\"600\"\n             android:viewportWidth=\"600\" >\n             <group\n                 android:name=\"rotationGroup\"\n                 android:pivotX=\"300.0\"\n                 android:pivotY=\"300.0\"\n                 android:rotation=\"45.0\" >\n                 <path\n                     android:name=\"v\"\n                     android:fillColor=\"#000000\"\n                     android:pathData=\"M300,70 l 0,-70 70,70 0,0 -70,70z\" />\n             </group>\n         </vector>\n     </aapt:attr>\n\n     <target android:name=\"rotationGroup\"> *\n         <aapt:attr name=\"android:animation\">\n             <objectAnimator\n             android:duration=\"6000\"\n             android:propertyName=\"rotation\"\n             android:valueFrom=\"0\"\n             android:valueTo=\"360\" />\n         </aapt:attr>\n     </target>\n\n     <target android:name=\"v\" >\n         <aapt:attr name=\"android:animation\">\n             <set>\n                 <objectAnimator\n                     android:duration=\"3000\"\n                     android:propertyName=\"pathData\"\n                     android:valueFrom=\"M300,70 l 0,-70 70,70 0,0 -70,70z\"\n                     android:valueTo=\"M300,70 l 0,-70 70,0  0,140 -70,0 z\"\n                     android:valueType=\"pathType\"/>\n             </set>\n         </aapt:attr>\n      </target>\n </animated-vector>\n```\n\n## 5) 정의한 애니메이션 적용하기\n\nres/drawable/activity_main.xml\n\n```xml\n<ImageView\n            android:id=\"@+id/emotion_mouth\"\n            android:layout_width=\"wrap_content\"\n            android:layout_height=\"wrap_content\"\n            android:layout_gravity=\"center\"\n            android:src=\"@drawable/animatedVector\" />\n```\n\nMainActivity.java\n\n```java\n ImageView emotionImage;\n\npublic void onCreate(Bundle savedInstanceState) {\n  super.onCreate(savedInstanceState);\n  setContentView(R.layout.main);\n\n  emotionImage  = (ImageView) findViewById(R.id.emotion_mouth);\n\n  emotionImage.setOnClickListener(new View.OnClickListener() {\n      @Override\n      public void onClick(View view) {\n        Drawable drawable = emotionImage.getDrawable();\n            if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.LOLLIPOP) {\n                if (drawable instanceof AnimatedVectorDrawable) {\n                    AnimatedVectorDrawable animatedVectorDrawable = (AnimatedVectorDrawable) drawable;\n                    animatedVectorDrawable.start();\n                }\n            } else {\n                if (drawable instanceof AnimatedVectorDrawableCompat) {\n                    AnimatedVectorDrawableCompat animatedVectorDrawableCompat = (AnimatedVectorDrawableCompat) drawable;\n                    animatedVectorDrawableCompat.start();\n                }\n            }\n      }\n  });\n\n}\n```\n"}}},"previous":{"repository":{"post":{"__typename":"GitHub_Blob","oid":"e4b0c00bcef7f5a64f4941b849fa6cb2fec43752","text":"# Liquid 문법\n\n- Title : Liquid 문법\n- Date : 2019-03-05\n- Category: Jekyll\n\njekyll 블로그 운영시 알아야할 필수 liquid 문법\n\n[liquid 문법 정리된 사이트](https://shopify.github.io/liquid/basics/types/)\n\n## Liquid\n\n<table>\n<thead>\n\t<tr><th>category</th><th>Input</th><th>Output</th></tr>\n</thead>\n<tbody>\n\t<tr>\n\t\t<td>Objects</td>\n\t\t<td>\n\t\t{ { page.title } }\t\n\t\t</td>\n\t\t<td>Introduction</td>\n\t</tr>\n\t<tr>\n\t\t<td>Tags</td>\n\t\t<td>\n\t\t{ % if user % } <br/>\n\t\t  &nbsp;&nbsp;Hello { { user.name } }! <br/>\n\t\t{ % endif % }\n\t\t</td>\n\t\t<td>Hello Adam!</td>\n\t</tr>\n\t<tr>\n\t\t<td>Filters</td>\n\t\t<td>\n\t\t{ { \"/my/fancy/url\" | append: \".html\" } }\n\t\t</td>\n\t\t<td>/my/fancy/url.html</td>\n\t</tr>\n\t<tr>\n\t\t<td>Filters</td>\n\t\t<td>\n\t\t{ { \"adam!\" | capitalize | prepend: \"Hello \" } }\n\t\t</td>\n\t\t<td>Hello Adam!</td>\n\t</tr>\n\t<tr>\n\t\t<td>assing String</td>\n\t\t<td>\n\t\t{ % assign my_string = \"Hello World!\" % }\n\t\t</td>\n\t\t<td>String 타입</td>\n\t</tr>\n\t<tr>\n\t\t<td>assing Number</td>\n\t\t<td>\n\t\t{ % assign my_int = 25 % }\n\t\t</td>\n\t\t<td>Number 타입</td>\n\t</tr>\n\t<tr>\n\t\t<td>assing Boolean</td>\n\t\t<td>\n\t\t{ % assign foo = true % }\n\t\t</td>\n\t\t<td>Boolean 타입</td>\n\t</tr>\n\t<tr>\n\t\t<td>Nil (empty)</td>\n\t\t<td>\n\t\tThe current user is { { user.name } }\n\t\t</td>\n\t\t<td>The current user is</td>\n\t</tr>\n\t<tr>\n\t\t<td>Array</td>\n\t\t<td>\n\t\t{ % for user in site.users % }<br/>\n\t\t  &nbsp;&nbsp; { { user } }<br/>\n\t\t{ % endfor % }\n\t\t</td>\n\t\t<td>Tobi Laura Tetsuro Adam</td>\n\t</tr>\n\t<tr>\n\t\t<td>Array</td>\n\t\t<td>\n\t\t{ { site.users[0] } }<br/>\n\t\t{ { site.users[1] } }<br/>\n\t\t{ { site.users[3] } }\n\t\t</td>\n\t\t<td>Tobi <br/>\n\t\tLaura <br/>\n\t\tAdam</td>\n\t</tr>\n\t<tr>\n\t\t<td>plus</td>\n\t\t<td>\n\t\t{ { 4 | plus: 2 } }\n\t\t</td>\n\t\t<td>6</td>\n\t</tr>\n\t<tr>\n\t\t<td>limit</td>\n\t\t<td>\n\t\t{ % for item in array limit:2 % }<br/>\n\t       &nbsp;&nbsp; { { item } }<br/>\n\t\t{ % endfor % }\n\t\t</td>\n\t\t<td>limit를 통해 2개까지만 반복문을 돌린다.</td>\n\t</tr>\n</tbody>\n</table>\n"}}},"next":{"repository":{"post":{"__typename":"GitHub_Blob","oid":"57a9a023880800c47fc8fb09eb9ea97232df6cad","text":"# [Drawable 리소스] LayerDrawable과 ShapeDrawable을 이용해 둥근모서리와 그림자 있는 배경 만들기.\n\n- Title : [Drawable 리소스] LayerDrawable과 ShapeDrawable을 이용해 둥근모서리와 그림자 있는 배경 만들기.\n- Date : 2019-01-16\n- Category: Android\n\nLayerDrawable과 ShapeDrawable을 이용해 둥근모서리+그림자+투명배경이 있는 디자인을 다른 XML 리소스의 background로 적용하는 방법입니다.\n\n[안드로이드 개발문서-Drawable 바로가기](https://developer.android.com/guide/topics/resources/drawable-resource?hl=ko)\n\n## 드로어블(Drawable) 리소스\n\n앱 화면에 그리고 싶은 것을 XML 파일로 미리 정의할 수 있으며, <code class=\"codetainer\">getDrawable(int)</code>와 같은 API를 사용하여 가져오거나\n<code class=\"codetainer\">android:drawable</code> 및 <code class=\"codetainer\">android:icon</code>과 같은 속성을 사용하여 다른 XML 리소스에 적용할 수 있다.  \n<span class=\"clr-grey\">**Example)** android:background=\"@drawable/custom_layer_resource\"</span>\n\n# LayerDrawable\n\n각 `<item>` 요소는 순서대로 그려지므로, 맨 마지막 `<item>`이 맨 위에 보이게 된다.\n\n<span class=\"li-nonicon\">위치 : res/drawable/filename.xml</span>\n<span class=\"li-nonicon\">Java 리소스 참조 : R.drawable.filename</span>\n<span class=\"li-nonicon\">XML 리소스 참조 : @[package:]drawable/filename</span>\n\n```xml\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<layer-list\n    xmlns:android=\"http://schemas.android.com/apk/res/android\" ><!-- XML 네임스페이스 정의 필수 -->\n    <item\n        android:drawable=\"@[package:]drawable/drawable_resource\"\n        android:id=\"@[+][package:]id/resource_name\"\n        android:top=\"dimension\"\n        android:right=\"dimension\"\n        android:bottom=\"dimension\"\n        android:left=\"dimension\" />\n</layer-list>\n```\n\n<span class=\"li-icon\"><code class=\"codetainer\">android:top=\"dimension\"</code> top에서 dimension 값만큼 padding</span>\n\n# ShapeDrawable\n\n<span class=\"li-nonicon\">위치 : res/drawable/filename.xml</span>\n<span class=\"li-nonicon\">Java 리소스 참조 : R.drawable.filename</span>\n<span class=\"li-nonicon\">XML 리소스 참조 : @[package:]drawable/filename</span>\n\n```xml\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<shape\n    xmlns:android=\"http://schemas.android.com/apk/res/android\"\n    android:shape=[\"rectangle\" | \"oval\" | \"line\" | \"ring\"] >\n    <corners\n        android:radius=\"integer\"\n        android:topLeftRadius=\"integer\"\n        android:topRightRadius=\"integer\"\n        android:bottomLeftRadius=\"integer\"\n        android:bottomRightRadius=\"integer\" />\n    <gradient\n        android:angle=\"integer\"\n        android:centerX=\"float\"\n        android:centerY=\"float\"\n        android:centerColor=\"integer\"\n        android:endColor=\"color\"\n        android:gradientRadius=\"integer\"\n        android:startColor=\"color\"\n        android:type=[\"linear\" | \"radial\" | \"sweep\"]\n        android:useLevel=[\"true\" | \"false\"] />\n    <padding\n        android:left=\"integer\"\n        android:top=\"integer\"\n        android:right=\"integer\"\n        android:bottom=\"integer\" />\n    <size\n        android:width=\"integer\"\n        android:height=\"integer\" />\n    <solid\n        android:color=\"color\" />\n    <stroke\n        android:width=\"integer\"\n        android:color=\"color\"\n        android:dashWidth=\"integer\"\n        android:dashGap=\"integer\" />\n</shape>\n```\n\n<span class=\"li-icon\"><code class=\"codetainer\">corners : </code>둥근모서리</span>\n<span class=\"li-icon\"><code class=\"codetainer\">gradient : </code>그라데이션 색상</span>\n<span class=\"li-icon\"><code class=\"codetainer\">padding : </code>shape가 아닌 view 요소에 적용할 패딩</span>\n<span class=\"li-icon\"><code class=\"codetainer\">size : </code>shape 크기</span>\n<span class=\"li-icon\"><code class=\"codetainer\">solid : </code>채우기 색상</span>\n<span class=\"li-icon\"><code class=\"codetainer\">stroke : </code>선 속성</span>\n\n# 실전예제\n\n1. 둥근모서리+그림자+투명배경 드로어블 생성하기\n\nres/drawable/round_border.xml\n\n```xml\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<layer-list xmlns:android=\"http://schemas.android.com/apk/res/android\" >\n    <item>\n        <shape android:shape=\"rectangle\" >\n            <solid android:color=\"@android:color/darker_gray\" />\n        </shape>\n    </item>\n    <item\n        android:bottom=\"-2dp\"\n        android:left=\"2dp\"\n        android:right=\"2dp\"\n        android:top=\"2dp\">\n        <shape android:shape=\"rectangle\" >\n            <stroke\n                android:width=\"0.75dp\"\n                android:color=\"#f5f5f5\" />\n            <corners\n                android:topLeftRadius=\"10dp\"\n                android:topRightRadius=\"10dp\"/>\n            <solid android:color=\"#3cffffff\" />\n        </shape>\n    </item>\n</layer-list>\n```\n\n2. round_border를 LinearLayout의 배경으로 적용하기\n\n```xml\n<LinearLayout\n        android:layout_width=\"match_parent\"\n        android:layout_height=\"10dp\"\n        android:background=\"@drawable/round_border\">\n</LinearLayout>\n```\n"}}}},"pageContext":{"id":"5e41146edb49643835d7c14219615e273c6680a1","previousPostId":"e4b0c00bcef7f5a64f4941b849fa6cb2fec43752","nextPostId":"57a9a023880800c47fc8fb09eb9ea97232df6cad"}},"staticQueryHashes":["2685952063","2841359383"]}