{"componentChunkName":"component---src-templates-blog-post-js","path":"/d40dfa460c3404882d4c862ecddb0374d3a40df0","result":{"data":{"site":{"siteMetadata":{"title":"보노보노의 평화로운 개발 이야기"}},"current":{"repository":{"post":{"__typename":"GitHub_Blob","oid":"d40dfa460c3404882d4c862ecddb0374d3a40df0","text":"# 자바스크립트 동작 방식 - 스레드 큐와 setTimeout()\n\nDate: Mar 31, 2020\n\n- Title : 자바스크립트 동작 방식 - 스레드 큐와 setTimeout()\n- Date : 2020-03-31\n- Category : Javascript\n\n# WHY?\n\n자바스크립트가 단일 스레드 환경에서 돌아간다는 것은 대부분의 사람들이 알고 있을 것이다. 하지만 어떻게 동작하는 지는 모르는 사람이 있다.. ~~바로..나처럼..?~~ 그런 이유로 자바스크립트가 어떻게 돌아가는 지 낱낱이 파헤쳐 봐야지!\n\n# 스레드 큐(태스크 큐)\n\n스레드 큐는 단일 스레드 환경에서 어떠한 순서로 함수나 기능을 수행할지 결정하는 목록으로 FIFO(First-In First-Out)의 정책을 가진다. 스레드 큐 덕분에 지연이 발생하더라도 들어온 순서대로 요청을 처리할 수 있다. \n\n> ✨ 여기서 말하는 지연이란? 자바스크립트는 사용자와 상호작용하는 이벤트 기반 언어라, 비동기로 동작하거나 현재 소스가 실행 중에 사용자의 입력이 들어오면 지연이 발생할 수 있다.\n\n# setTimeOut() 파헤치기\n\n🎉아래 코드에서 `buttonAddItem.onclick`, `divItems.appendChild()`, `inputCloneItem.focus()` 가 스레드 큐에 어떤 순서로 들어갈지 생각해보자.\n\n    <!DOCTYPE html>\n    <html lang=\"en\">\n      <head>\n        <meta charset=\"UTF-8\" />\n        <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n        <title>Document</title>\n      </head>\n      <body>\n        <button id=\"addItem\">Add New Input</button>\n        <div id=\"items\"></div>\n        <script>\n          (function() {\n            const divItems = document.getElementById(\"items\"),\n              buttonAddItem = document.getElementById(\"addItem\"),\n              inputItem = document.createElement(\"input\");\n            buttonAddItem.onclick = () => {\n              const inputCloneItem = inputItem.cloneNode(true);\n              inputCloneItem.value = \"Give me focus\";\n    \n              divItems.appendChild(inputCloneItem);\n              setTimeout(() => {\n                inputCloneItem.focus();\n              }, 0);\n            };\n          }());\n        </script>\n      </body>\n    </html>\n\n`setTimeout()` 함수의 두번째 파라미타를 0으로 했으니깐 버튼을 클릭하면 `divItems.appendChild(inputCloneItem)` 보다 `inputCloneItem.focus()` 가 먼저 들어가있을거라고 생각했다면...? 땡땡!!😂😂 정답은 아래와 같다. `setTimeout()` 함수를 0초 후에 호출되도록 설정하면 호출하자마자 실행되는 것이 아니라 UI 업데이트가 이루어지고 나서 호출된다. 즉, setTimeout() 함수는 특정 시간이 되면 콜백 함수를 호출하도록 실행 큐 뒤에 해당 함수를 넣는 거지 함수 자체를 호출한다는 의미가 아니다.\n\n![https://raw.githubusercontent.com/devgaram/TIL/master/Javascript/images/2020-03-31-img/Untitled.png](https://raw.githubusercontent.com/devgaram/TIL/master/Javascript/images/2020-03-31-img/Untitled.png)\n\n🎉 다음 예제를 통해 `setTimeout()` 함수와 단일 스레드 환경을 명확하게 이해해보자. 방금 예제와 비슷하지만 `setTimeout()`은 버튼이 클릭되고 2초 뒤에 콜백함수로 호출하도록 했고 `sleep()` 함수를 추가해서 10초동안 while 문이 돌아가게 했다. 자, 그럼 `setTimeout()`의 콜백함수는 언제 실행될까?\n\n    <!DOCTYPE html>\n    <html lang=\"en\">\n      <head>\n        <meta charset=\"UTF-8\" />\n        <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n        <title>Document</title>\n      </head>\n      <body>\n        <button id=\"addItem\">Add New Input</button>\n        <div id=\"items\"></div>\n        <script>\n          (function() {\n            const divItems = document.getElementById(\"items\"),\n              buttonAddItem = document.getElementById(\"addItem\"),\n              inputItem = document.createElement(\"input\"),\n              divLog = document.getElementById(\"log\");\n            buttonAddItem.onclick = () => {\n              const inputCloneItem = inputItem.cloneNode(true),\n                    waitSeconds = 10;\n              \n              inputCloneItem.value = \"Give me focus\";\n    \n              divItems.appendChild(inputCloneItem);\n    \n              console.log(\"Execute setTimeout at: \\t\" + Date.now());\n              setTimeout(() => {\n                inputCloneItem.focus();\n                console.log(\"Execute setTimeout at: \\t\" + Date.now());\n              }, 2000);\n    \n              sleep(waitSeconds * 1000);\n            };\n    \n            function sleep(waitSeconds) {\n              const waitUntil = Date.now() + waitSeconds;\n              while (Date.now() < waitUntil);\n            }\n          }());\n        </script>\n      </body>\n    </html>\n\n아래의 실행결과를 보면 setTimeout() 안의 콜백함수는 2초 뒤에 실행되지않고 10초 뒤에 실행된다.\n\n![https://raw.githubusercontent.com/devgaram/TIL/master/Javascript/images/2020-03-31-img/Untitled%201.png](https://raw.githubusercontent.com/devgaram/TIL/master/Javascript/images/2020-03-31-img/Untitled%201.png)\n\nsetTimeout()의 콜백함수는 버튼 클릭 2초 후 스레드 큐에 등록되지만 버튼 클릭 핸들러 내 sleep() 함수가 다 실행되어야 순서대로 처리되기 때문에 10초보다 뒤에 실행된다.\n\n![https://raw.githubusercontent.com/devgaram/TIL/master/Javascript/images/2020-03-31-img/Untitled%202.png](https://raw.githubusercontent.com/devgaram/TIL/master/Javascript/images/2020-03-31-img/Untitled%202.png)\n\n🎉 위 예제에서 버튼 클릭 시 setTimeout() 함수를 두번 호출하도록 코드를 수정해보고 실행이 어떤식으로 되는 지 알아보자.\n\n    <!DOCTYPE html>\n    <html lang=\"en\">\n      <head>\n        <meta charset=\"UTF-8\" />\n        <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n        <title>Document</title>\n      </head>\n      <body>\n        <button id=\"addItem\">Add New Input</button>\n        <div id=\"items\"></div>\n        <script>\n          (function() {\n            const divItems = document.getElementById(\"items\"),\n              buttonAddItem = document.getElementById(\"addItem\"),\n              inputItem = document.createElement(\"input\"),\n              divLog = document.getElementById(\"log\");\n            buttonAddItem.onclick = () => {\n              const inputCloneItem = inputItem.cloneNode(true),\n                    waitSeconds = 10;\n              \n              inputCloneItem.value = \"Give me focus\";\n    \n              divItems.appendChild(inputCloneItem);\n    \n              console.log(\"onclick function invoked at: \\t\" + Date.now());\n              setTimeout(() => {\n                console.log(\"1st Execute setTimeout at: \\t\" + Date.now());\n                sleep(waitSeconds * 1000);\n              }, 2000);\n              setTimeout(() => {\n                inputCloneItem.focus();\n                console.log(\"2 Execute setTimeout at: \\t\" + Date.now());\n              }, 2000);\n    \n              sleep(waitSeconds * 1000);\n            };\n    \n            function sleep(waitSeconds) {\n              const waitUntil = Date.now() + waitSeconds;\n              while (Date.now() < waitUntil);\n            }\n          }());\n        </script>\n      </body>\n    </html>\n\n클릭 이벤트가 발생하면 setTimeout() 함수의 콜백 이벤트를 등록하고 2초 뒤에는 등록한 2개의 setTimeout() 함수가 호출된다(스레드 큐에 콜백함수가 들어간다) 이때 스레드 큐에서는 10초간 sleep()을 수행하기때문이 sleep()이 끝나고 UI 업데이트가 이루어진 후 첫번째 콜백이 실행된다. 콜백 안에 또 sleep()이 있어서 10초 뒤에 두번째 콜백이 수행된다. 즉, 두번째 setTimeout 콜백은 20초 뒤에나 실행된다.\n\n![https://raw.githubusercontent.com/devgaram/TIL/master/Javascript/images/2020-03-31-img/Untitled%203.png](https://raw.githubusercontent.com/devgaram/TIL/master/Javascript/images/2020-03-31-img/Untitled%203.png)\n\n스레드 큐는 아래와 같다.\n\n![https://raw.githubusercontent.com/devgaram/TIL/master/Javascript/images/2020-03-31-img/Untitled%204.png](https://raw.githubusercontent.com/devgaram/TIL/master/Javascript/images/2020-03-31-img/Untitled%204.png)\n\n# 결론\n\nsetTimeout() 뿐만 아니라 모든 XMLHttpRequest나 다른 콜백 이벤트가 발생했다고 해서 바로바로 현재의 스레드에 인터럽트를 걸고 실행하는 것이 아니라, **현재 실행하고 있는 스레드 큐가 끝나고 자신의 차리가 와야 실행된다**. 즉, 처리가 오래 걸리는 자바스크립트 함수가 있을 때는 호출이 이루어져야 하는 시간이 되어도 그 함수의 처리가 끝날 때까지 스레드 큐에서 대기한다."}}},"previous":{"repository":{"post":{"__typename":"GitHub_Blob","oid":"d828d76a01fdf156e30e5cff57c159e3cbf5c5f0","text":"# git rebase\n\nDate: Apr 27, 2020\n\n- Title : git rebase\n- Date : 2020-04-27\n- Category : Git\n\n## git rebase 하기\n\n```bash\ngit checkout develop\n\ngit fetch origin develop\n\ngit checkout feature\n\ngit rebase origin/develop\n\n// conflict 발생 시 충돌 해결 후\ngit add <수정된 파일 이름>\n\ngit rebase --continue\n```\n\n- git fetch origin develop을 하면 로컬의 origin/develop 에 원격저장소 develop의 최신 커밋들이 싱크된다. 그래서 rebase 대상이 develop이 아니라 origin/develop 이다.\n- 충돌 해결 후 파일을 commit 이 아니라 **꼭 add만 해야 한다.**\n\n## git rebase 취소\n\n이미 remote 까지 push 했을 때 rebase 취소하는 방법\n\n```bash\ngit reflog <브랜치명>\n\n// 돌아가고 싶은 커밋 확인\ngit reset --hard <128e6d4>\n\ngit push -f origin <브랜치명>\n```\n\n## 생각하기\n\n### `git rebase origin/develop` 과 `git rebase develop` 의 차이점\n\n### `git fetch origin develop` 과 `git pull origin develop` 의 차이점\n\npull 은 내부적으로 `fetch + merge` 를 실행한 것과 같다. 즉 pull 을 실행하면 원격 저장소의 내용을 가져오고(fetch) 병합작업(merge)를 수행하게 된다. 만약 단순히 원격 저장소의 내용을 확인만 하고 로컬 데이터와 병합은 하고 싶지 않다면 fetch를 수행하면 된다. fetch를 하게되면 최신 커밋들은 로컬에 `FETCH_HEAD` 라는 이름으로 가져오게 된다. 이 상태에서 원격 저장소의 내용을 로컬 저장소에 통합하고 싶다면 `FETCH_HEAD` 브랜치를 merge 하거나 pull 하면 된다.\n"}}},"next":{"repository":{"post":{"__typename":"GitHub_Blob","oid":"f25955ea62ff44f6182d7c5afe657bb1472e9cb6","text":"# Travis에서 MongoDB 사용하기 & Heroku 배포하기\n\n- Title : Travis에서 MongoDB 사용하기\n- Date : 2020-03-30\n- Category : Infra\n\n# WHY?\n\nTravis에서 MongoDB Altas 연결이 실패하여 테스트 실패하는 현상이 계속 발생하였다. 로컬에서는 잘되는 데 왜 travis에서는 안될까? 해결 방법은 간단했다. travis 내에서 로컬 MongoDB를 돌려주는 거였고 이는 Travis가 아주 편리하게 제공하고 있었다.\n\n# SOLVE\n\n1. .travis.yml 에 아래 코드를 추가해준다.\n\n    services:\n      – mongodb\n\n2. travis → setting → 변수 설정에서 이름은 각자 코드 내에서 쓰는 환경 변수 이름을 적고 값은 `mongodb://localhost:27017/mydb_test` 로 하면 된다.\n\ntravis에서 mongodb를 사용할 때는 따로 데이터베이스 만들 필요가 없고 로컬 호스트(127.0.0.1)로 바인딩되므로 위와 같이 쓰면 된다.\n\n# WHY?\n\n헤로쿠로 자동 배포되게 하는 거 까먹어서 기록 + Node.js 앱 배포\n\n[Travis CI Documentation](https://docs.travis-ci.com/user/deployment/heroku/)\n\n# SOLVE\n\n1. .travis.yml에 아래와 같이 작성한다.\n\n    deploy:\n      provider: heroku\n      api_key:\n        secure: <암호화한 heroku api token>\n      app: express-project-blog\n\n- app은 헤로쿠 앱 이름을 적으면 된다. 안 적어도 되긴 함\n\n2. secure 키 구하기\n\n- Heroku CI를 깔고 token 얻기. 아래 명령어를 치면 나오는 토큰을 복사해놓는다.\n\n    heroku auth:token\n\n- 윈도우인 경우 ruby cmd창에 travis CI를 깔고 아래 명령어 입력. 이 때 명령어 실행 위치에 .travis.yml 파일이 있어야한다. 따로 repo 설정을 안해줘서 —repo 옵션으로 github 위치 적어주면 travis.yml 파일에 알아서 암호화된 api_key가 생김\n\n    travis encrypt <복사한 TOKEN> --add deploy.api_key --pro --repo=devgaram/express-mongo-rest-api\n\n> [travis-ci.com](http://travis-ci.com/) 에서 빌드할 경우 —pro 옵션과 함께 암호화해야 정상적으로 인증할 수 있음..\n\n3. 헤로쿠 설정\n\n- 빌드팩에 nodejs 추가하기\n\n![Travis%20MongoDB%20Heroku/Untitled.png](https://raw.githubusercontent.com/devgaram/TIL/master/Infra/images/2020-03-30-img/Untitled.png)\n\n- 프로젝트에서 es6를 사용하기 위해 babel을 이용해 빌드하는 경우가 있는 데, 이 때는 환경변수를 따로 설정해줘야 devdependencies도 설치되서 babel을 실행할 수 가 있다.\n\n![Travis%20MongoDB%20Heroku/Untitled%201.png](Travis%20MongoDB%20Heroku/Untitled%201.png)"}}}},"pageContext":{"id":"d40dfa460c3404882d4c862ecddb0374d3a40df0","previousPostId":"d828d76a01fdf156e30e5cff57c159e3cbf5c5f0","nextPostId":"f25955ea62ff44f6182d7c5afe657bb1472e9cb6"}},"staticQueryHashes":["2685952063","2841359383"]}