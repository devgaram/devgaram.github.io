{"componentChunkName":"component---src-templates-blog-post-js","path":"/c636b7749da7503e1608b5aa12d6ee7b06881fa5","result":{"data":{"site":{"siteMetadata":{"title":"보노보노의 평화로운 개발 이야기"}},"current":{"repository":{"post":{"__typename":"GitHub_Blob","oid":"c636b7749da7503e1608b5aa12d6ee7b06881fa5","text":"# npm 로컬 패키지 설치하기\n\n- Title : npm 로컬 패키지 설치하기\n- Date : 2018-04-13\n- Category: Nodejs\n\n# 4. 로컬에 패키지를 설치해보자\n\n패키지를 어떤 방식으로 사용하는지에 따라 우리는 로컬 또는 전역에 npm 패키지를 설치할 수 있습니다.\n\n- Node.js의 require을 사용하여 당신의 모듈에서 패키지를 사용하려면 로컬로 설치하면 됩니다. 이는 npm 설치의 기본 동작입니다.\n- 패키지를 CLI와 같은 커맨드 라인 툴에서 사용하려면 전역으로 설치하면 됩니다.\n\n## 패키지 다운로드하기\n\n```\n> npm install <package_name>\n```\n\n명령어를 실행하면 현재 디렉토리에 node_modules 디렉토리가 생성됩니다. (node_modules 디렉토리가 없을 경우)\n그리고 node_modules 디렉토리 안에 다운로드 받은 패키지가 존재하게됩니다.\n\n## 설치된 패키지 어떤 버전일까?\n\n로컬 디렉토리에 package.json 파일이 없다면, 가장 최신 버전의 패키지가 설치됩니다. package.json 파일이 있으면 npm은 package.json 파일에 선언된 semver rule을 만족하는 최신버전을 설치합니다.\n\n예) package.json\n\n```\n...\n\"dependencies\" : {\n\"lodash\" : \"~1.0.4\"\n}\n....\n```\n\nnpm은 package.json에 따라 1.0.4 버전의 lodash 패키지를 설치하게됩니다.\n\n## 패키지를 어떻게 사용할까?\n\n일단 node_modules 디렉토리에 패키지가 있다면, 우리의 코드에서 패키지를 사용할 수 있습니다.\n\n예) index.js 파일\n\n```\nvar lodash = require('lodash');\nvar output = lodash.without([1,2,3],1);\nconsole.log(output);    // 결과 : [2,3]\n```\n\n만약 lodash 패키지가 설치되지않았다면 Error : Cannot find module 'lodash' 에러를 보게될 것 입니다.\n\n# 7. 로컬에 설치된 패키지 삭제해보자\n\nnode_modules 디렉토리의 패키지를 삭제하는 명령어\n\n```\n> npm uninstall lodash\n```\n\npackage.json의 dependecies에서 패키지를 제거하려면 save 플래그를 사용해야합니다.\n\n```\n> npm uninstall --save lodash\n```\n\n**Note:** 패키지가 devDependency로 설치된 경우, package.json에서 제거하는 방법은 다음과 같습니다.\n\n```\n> npm uninstall --save-dev lodash\n```\n\nnode_modules 디렉토리에 해당 패키지가 없다면 삭제가 정상적으로 된 것입니다.\n\n# 8~10. 전역에 패키지를 설치/업데이트/삭제 해보기\n\n패키지 설치\n\n```\n> npm install -g jshint\n```\n\n패키지업데이트\n\n```\n> npm update -g jshint\n```\n\n패키지 삭제\n\n```\n> npm uninstall -g jshint\n```\n"}}},"previous":{"repository":{"post":{"__typename":"GitHub_Blob","oid":"1915e03780a46a3344b4cdf3bc8284ba7af6804e","text":"# npm Working with package.json\n\n- Title : npm Working with package.json\n- Date : 2018-04-16\n- Category: Nodejs\n\n# 5. Working with package.json\n\n로컬에 설치된 npm 패키지를 관리하는 최상의 방법은 package.json 파일을 생성하는 것입니다.\n\npackage.json 파일은 :\n\n- 프로젝트가 의존하고 있는 패키지들의 리스트를 보여줍니다.\n- semantic versioning rule에 따라 프로젝트에 의존한 패키지들의 버전을 설정할 수 있습니다.\n- 빌드를 재현할 수 있으므로, 좀 더 쉽게 다른 개발자와 공유할 수 있습니다.\n\n## 요구사항\n\npackage.json 파일이 반드시 가져야하는 것\n\n- \"name\"\n  - 소문자\n  - 한단어, 띄어쓰기 허용X\n  - -(dashes) 와 \\_ (underscores) 허용O\n- \"version\"\n  - x.x.x 형태\n  - semver spec을 따름\n\n```\n{\n \"name\" : \"my-awesome-package\",\n \"version\" : \"1.0.0\"\n}\n```\n\n## package.json 파일 생성하기\n\n```\n> npm init\n또는\n> npm init --yes\n#--yes === -y\n```\n\n위 명령어는 현재 디렉토리로부터 정보를 추출해서 해당 package.json 파일을 생성합니다.\n\n```\n{\n  \"name\": \"my_package\",\n  \"description\": \"\",\n  \"version\": \"1.0.0\",\n  \"main\": \"index.js\",\n  \"scripts\": {\n    \"test\": \"echo \\\"Error: no test specified\\\" && exit 1\"\n  },\n  \"repository\": {\n    \"type\": \"git\",\n    \"url\": \"https://github.com/ashleygwilliams/my_package.git\"\n  },\n  \"keywords\": [],\n  \"author\": \"\",\n  \"license\": \"ISC\",\n  \"bugs\": {\n    \"url\": \"https://github.com/ashleygwilliams/my_package/issues\"\n  },\n  \"homepage\": \"https://github.com/ashleygwilliams/my_package\"\n}\n```\n\n- name : 현재 디렉토리 이름\n- version : 항상 1.0.0\n- description : readme 정보 또는 \"\"\n- main : 항상 index.js\n- scripts : 기존적으로 빈 테스트 스크립트를 만든다.\n- keywords : empty\n- author : empty\n- license : ISC\n- bugs : 현재 디렉토리의 정보\n- homepage : 현재 디렉토리의 정보\n\n다음과 같이 명령어 실행시 옵션을 설정할 수 있습니다.\n\n```\n> npm set init.author.email \"wombat@npmjs.com\"\n> npm set init.author.name \"ag_dubs\"\n> npm set init.license \"MIT\"\n```\n\n## Dependencies 지정하기\n\n프로젝트가 의존하는 패키지를 지정하려면 package.json 파일에 사용할 패키지들을 나열해야합니다. 그리고 패키지들은 두 개의 타입으로 나열될 수 있습니다.\n\n- \"dependencies\" : 프로젝트 배포 시\n- \"devDependencies\" : 프로젝트 개발 또는 테스트 시\n\npackage.jsondp dependencies를 추가하는 더 쉬운 방법은 npm install 명령어 실행시 --save 또는 --save-dev 플래그를 사용하는 것 입니다.\n\n```\n> npm install <package_name> --save\n> npm install <package_name> --save-dev\n```\n"}}},"next":{"repository":{"post":{"__typename":"GitHub_Blob","oid":"5c020cb338a81a219b4f92989a7d45ac5bdfe3e6","text":"# npm 시작하기\n\n- Title : npm 시작하기\n- Date : 2018-04-11\n- Category: Nodejs\n\n# 1. npm이란?\n\n## npm은 어떻게 구성되어있을까?\n\nnpm은 세 개의 컴포넌트로 구성되어있습니다.\n\n- the website - 패키지 탐색, 프로파일 설정, 개인 npm histoty 관리\n- CLI ( the Command Line Interface ) - 개발자와 npm이 소통하는 방법으로 터미널에서 동작\n- the registry - 자바스크립트 소프트웨어의 공용 데이터베이스 및 메타 정보\n\n## npm은 언제 사용할까?\n\n- 앱에 패키지를 적용시키거나, 통합시키고 싶을 때\n- 바로 사용할 수 있는 독립된 툴을 다운받고싶을 때\n- npx를 사용하여 다운로드받는 것 없이 패키지를 실행하고 싶을 때\n- 조직을 만들어서 유지보수, 개발 협업하고 싶을 때\n- 어디서든 npm 사용자와 코드를 공유하고 싶을 때\n- 코드 활용을 특정 개발자들로만 제한하고 싶을 때\n- 버전 및 코드 의존성 관리하고 싶을 때\n- 근본적인 코드가 업데이트될 때, 애플리케이션도 쉽게 업데이트되게 하고 싶을 때\n- 같은 문제를 해결하는 다양한 방법을 찾고싶을 때\n- 비슷한 프로젝트를 진행하는 개발자를 찾고 싶을 때\n\n# 2. 패키지는 어떻게 찾을까?\n\n패키지를 찾기위해서 npm의 검색창을 활용해야합니다. 그럼, 당신의 앱에 바코드(QR code) 기능을 넣고 싶다면 검색창에 QR code라고 입력해봅시다. QR Code와 관련된 패키지들이 조회되고, 패키지 선택에 도움을 줄 수 있는 랭킹 정보를 볼 수 있습니다.\n\n그렇다면 비슷한 패키지들 중, 우리는 어떤 패키지를 선택하면 될까요?\n\n## 각각의 패키지들은 npm 분석기에 의해 다음의 4가지로 랭킹되고있습니다.\n\n- Optimal - 아래 세가지 기준을 의미있게 조합하여 순위를 지정합니다.\n- Populary - 패키지가 다운로드된 횟수로 패키지 순위를 지정하며, 유용하고 안정적인 패키지가 해당됩니다.\n- Quality - readme 파일 존재여부, 안정성, 테스트, 최신 의존성주입, 사용자정의 웹사이트, 코드 복잡성등을 고려합니다.\n- Maintenance - 개발자가 관심을 기울이며, 보다 자주 유지보수되는 패키지를 순위로 지정합니다.\n\n## 패키지를 선택해서 들어가보면 패키지 정보와 사용 방법등의 다양한 정보를 얻을 수 있습니다.\n\n- Readme - 개발자가 생성한 readme 파일로 패키지의 목적과 사용방법에 대해 설명되어있습니다.\n- Dependencies - 대부분의 패키지들은 다른 패키지들로 만들어집니다. 이 패키지가 의존하고 있는 패키지들의 정보를 보여줍니다.\n- Dependents - 이 패키지를 의존하고 있는 패키지들을 보여줍니다.\n- Versions - 패키지 업데이트 정보를 보여줍니다.\n\n# 3. npm 시작하기\n\nnpm은 Node.js로 개발되었기에 npm을 사용하기 위해서는 Node.js를 설치해야합니다.  \nWindows의 경우, 반드시 LTS 버전을 설치해야합니다.\n\n```\n> node -v\n```\n\n설치가 완료되면 다음과 같이 노드의 버전을 확인해봅시다. 정상적으로 출력된다면 설치가 완료된 것입니다.  \nNode.js를 설치할 때, npm은 자동적으로 설치됩니다. 하지만, npm은 Node.js보다 더 자주 업데이트되기때문에 최신 버전으로 업데이트하는 방법을 알아야합니다.\n\n```\n> npm -v\n#npm 버전을 확인합니다.\n>npm install npm@latest -g\n#최신버전으로 업데이트합니다.\n```\n"}}}},"pageContext":{"id":"c636b7749da7503e1608b5aa12d6ee7b06881fa5","previousPostId":"1915e03780a46a3344b4cdf3bc8284ba7af6804e","nextPostId":"5c020cb338a81a219b4f92989a7d45ac5bdfe3e6"}},"staticQueryHashes":["2841359383"]}