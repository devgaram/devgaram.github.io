{"componentChunkName":"component---src-templates-blog-post-js","path":"/68ea80dc2124e8d2e6495a2ae7232f0d565aecf7","result":{"data":{"site":{"siteMetadata":{"title":"보노보노의 평화로운 개발 이야기"}},"current":{"repository":{"post":{"__typename":"GitHub_Blob","oid":"68ea80dc2124e8d2e6495a2ae7232f0d565aecf7","text":"# 운영체제 - 프로세스 동기화 1\n\n- Title : 운영체제 - 프로세스 동기화 1\n- Date : 2020-01-06\n- Category: 운영체제\n\n> 1. 프로세스 동기화란?\n> 2. 임계구역이란?\n> 3. 세마포란?\n\n# 프로세스 동기화(Process Synchronization, Thread Synchronization)\n\n프로세스들이 서로 공유하는 데이터에 동시에 접근할 때 순서대로 실행하여 **일관성있는 데이터를 유지**하는 것\n\n- Independent : 프로세스1과 프로세스2가 관계가 없을 때\n- Cooperating : 다른 프로세스에게 영향을 미치거나 다른 프로세스로부터 영향을 받을 때\n- 프로세스 간 통신 : 전자 우편, 파일 전송\n- 프로세스 간 자원 공유 : 메모리 상의 자료, 데이터베이스 등\n- 실생활 예 : 명절 기차표 예약, 대학 온라인 수강신청, 실시간 주식 거래\n\n## 프로세스/쓰레드 동기화를 하려면?\n\n- 임계구역 문제 해결(틀린 답이 나오지 않도록)\n- 프로세스 실행 순서 제어(원하는 대로)\n- busy wait 등 비효율성은 제거\n\n## 동기화 도구\n\n- 세마포(Semaphores)\n- 모니터(Monitors)\n- Misc.\n\n## 은행 계좌 예시\n\n아래의 코드는 공통 변수(balance)에 대해 동시 업데이트를 수행하여 0이 아닌 잘못된 결과값이 출력된다. 이는 한번에 한 쓰레드만 업데이트하도록 하여 해결할 수 있다. -> **임계구역 문제**\n\n```java\nclass Test {\npublic static void main(String[] args) throws InterruptedException {\n  BankAccount b = new\n  BankAccount();\n  Parent p = new Parent(b);\n  Child c = new Child(b);\n  p.start();\n  c.start();\n  p.join();\n  c.join();\n  System.out.println( \"\\nbalance = \" + b.getBalance());\n  }\n}\n```\n\n```java\nclass BankAccount {\n  int balance;\n  void deposit(int amount) {\n    int temp = balance + amount;\n    System.out.print(\"+\")\n    balance = temp; // 임계구역\n  }\n  void withdraw(int amount) {\n    int temp = balance - amount;\n    System.out.print(\"-\")\n    balance = temp; // 임계구역\n  }\n  int getBalance() {\n    return balance;\n  }\n}\n\n```\n\n```java\nclass Parent extends Thread {\n  BankAccount b;\n  Parent(BankAccount b) {\n    this.b = b;\n  }\n  public void run() {\n    for (int i=0; i<100; i++)\n    b.deposit(1000);\n  }\n}\nclass Child extends Thread {\n  BankAccount b;\n  Child(BankAccount b) {\n    this.b = b;\n  }\n  public void run() {\n    for (int i=0; i<100; i++)\n    b.withdraw(1000);\n  }\n}\n```\n\n# 임계구역 문제(The Critical-Section Problem)\n\n## 임계구역(Critical Section)\n\n여러 개의 스레드로 구성된 시스템에서 각 스레드가 같이 사용하는 변수, 테이블, 파일을 바꾸는 코드 영역을 임계구역이라고 한다. 예) 은행 계좌 예시에서 balance 값을 바꾸는 코드가 임계구역이다.\n\n## 임계구역 문제 해결방법 - 아래 3가지 다 만족해야한다!\n\n- Mutual exclusion (상호배타): 오직 한 쓰레드만 진입<br/>예) Parent 스레드가 임계구역 실행 중에는 Child 스레드는 임계구역에 들어갈 수 없다.\n- Progress (진행): 진입 결정은 유한 시간 내<br/>예) 임계구역에 어떤 스레드가 먼저 진입할지에 대한 결정은 유한 시간 내에 결정되어야 한다.\n- Bounded waiting (유한대기): 어느 쓰레드라도<br/>예) 어느 스레드라도 기다리고 있으면 유한한 시간내에 임계구역에 들어갈 수 있다.\n\n# 세마포 (Semaphore)\n\n동기화 문제 해결을 위한 소프트웨어 도구로 <span class=\"clr-note\">정수형 변수 + 두 개의 동작 (P, V)</span>으로 이루어져있다.\n\n## 동작\n\n- P: Proberen (test) → **acquire()**\n- V: Verhogen (increment) → **release()**\n\n## 구조\n\n- acquire() : 임계구역 전에 호출하여 value가 조건에 맞으면 **프로세스(or 스레드)를 list(큐)에 넣는다.** 큐에 들어간 프로세스는 다른 프로세스에 의해 release()가 호출될 때까지 Block된다. 즉 임계구역을 실행할 수 없게 된다. (Block이 된다 == Ready Queue에 들어가지 못한다)\n- release() : value 조건에 맞으면 list에서 **프로세스를 꺼내서 깨운다.** 깨운다는 것은 Ready Queue(cpu 서비스 기다리는 줄)에 넣는 다는 것을 의미한다.\n\n```java\nclass Semaphore {\n  int value; // number of permits\n\n  Semaphore(int value) {\n  ... }\n  void acquire() {\n    value--;\n    if (value < 0) {\n      add this process/thread to list;\n      block;\n    }\n  }\n  void release() {\n    value++;\n    if (value <= 0) {\n      remove a process P from list;\n      wakeup P;\n    }\n  }\n}\n\n```\n\n## 세마포의 사용 - 상호 배타(Mutual exclusion)\n\nsem.value = 1로 두어 임계구역에는 프로세스 한 개만 들어갈 수 있도록 한다.\n\n![process tree](https://raw.githubusercontent.com/devgaram/TIL/master/OperatingSystem/images/2020-01-06-img/1.png)<br/>\n\n아래 코드는 은행 계좌 예시의 BankAccount 클래스를 수정한 것으로 임계구역 문제를 해결한다.\n\n```java\nimport java.util.concurrent.Semaphore;\n\nclass BankAccount {\n  int balance;\n  Semaphore sem;\n  public BankAccount () {\n    this.sem = new Semaphore(1)\n  }\n  void deposit(int amount) {\n    try {\n      sem.acquire()\n    } catch(InterruptedException) {}\n\n    int temp = balance + amount;\n    System.out.print(\"+\")\n    balance = temp;\n    sem.release()\n  }\n  void withdraw(int amount) {\n    try {\n      sem.acquire()\n    } catch(InterruptedException) {}\n    int temp = balance - amount;\n    System.out.print(\"-\")\n    balance = temp;\n    sem.release()\n  }\n  int getBalance() {\n    return balance;\n  }\n}\n\n```\n\n1. Parent 프로세스가 deposit()을 호출하면 acquire() 메소드가 실행된다. 이는 value를 0으로 만드나 조건이 false라 바로 빠져나와 임계구역을 실행한다.\n2. 문맥 전환에 의해 Child 프로세스의 witdhdraw()가 호출되면 acquire()이 호출된다. value를 -1로 만들어 조건이 true가 되어 Child 프로세스는 큐에 들어가고 Block 된다. 즉, 임계구역을 못 간다.\n3. Parent 프로세스가 임계구역 실행을 완료한 후 release()를 호출하면 큐의 프로세스 하나를 뺀다. 즉, Child 프로세스를 깨워 Ready Queue로 보낸다.\n\n## 세마포의 사용 - 프로세스 실행 순서 제어(Ordering)\n\nCPU 스케줄링 알고리즘에 관련없이 P1에 들어간 S1 코드가 P2의 S2 코드보다 먼저 실행되게 하고 싶을 때? 세마포를 사용하자!\n\n![process tree](https://raw.githubusercontent.com/devgaram/TIL/master/OperatingSystem/images/2020-01-06-img/2.png)<br/>\n\n항상 입금이 먼저 되게 BankAccount 클래스를 수정해보자.\n\n```java\nimport java.util.concurrent.Semaphore;\n\nclass BankAccount {\n  int balance;\n  Semaphore sem;\n  Semaphore sem2;\n  public BankAccount () {\n    this.sem = new Semaphore(1);\n    this.sem2 = new Semaphore(0)\n  }\n  void deposit(int amount) {\n    try {\n      sem.acquire()\n    } catch(InterruptedException) {}\n\n    int temp = balance + amount;\n    System.out.print(\"+\")\n    balance = temp;\n    sem.release()\n    sem2.release()\n  }\n  void withdraw(int amount) {\n    try {\n      sem2.acquire()\n      sem.acquire()\n    } catch(InterruptedException) {}\n    int temp = balance - amount;\n    System.out.print(\"-\")\n    balance = temp;\n    sem.release()\n  }\n  int getBalance() {\n    return balance;\n  }\n}\n\n```\n\n이제 입출금 교대로 되게 BankAccount 클래스를 수정해보자.\n\n```java\nimport java.util.concurrent.Semaphore;\n\nclass BankAccount {\n  int balance;\n  Semaphore sem;\n  Semaphore dsem;\n  Semaphore wsem;\n  public BankAccount () {\n    this.sem = new Semaphore(1);\n    this.dsem = new Semaphore(0);\n    this.wsem = new Semaphore(0);\n  }\n  void deposit(int amount) {\n    try {\n      sem.acquire();\n    } catch(InterruptedException) {}\n\n    int temp = balance + amount;\n    System.out.print(\"+\")\n    balance = temp;\n    sem.release();\n    wsem.release();\n    try {\n      dsem.acquire();\n    } catch(InterruptedException) {}\n\n  }\n  void withdraw(int amount) {\n    try {\n      wsem.acquire();\n      sem.acquire();\n    } catch(InterruptedException) {}\n    int temp = balance - amount;\n    System.out.print(\"-\")\n    balance = temp;\n    sem.release();\n    dsem.release();\n  }\n  int getBalance() {\n    return balance;\n  }\n}\n\n```\n"}}},"previous":{"repository":{"post":{"__typename":"GitHub_Blob","oid":"40f40953b7ab43bf93781786a87871d92de6d63c","text":"# React 기반을 다져보자!\n\n- Title : React 기반을 다져보자!\n- Date : 2020-01-07\n- Category: React\n\n<span class=\"clr-grey\">새로 알게 된 내용이 있으면 계속해서 추가할 예정입니다. </span>\n\n> **참조 링크** <br/>\n>\n> - [리액트 공식 문서](https://reactjs-kr.firebaseapp.com/docs/hello-world.html)\n\n# JSX\n\n```javascript\nconst element = <h1>Hello, world</h1>;\nReactDOM.render(\n  element,\n  document.getElementById(\"root\") // ID가 root인 노드에 렌더링하겠다!\n);\n```\n\n- JSX는 화면에서 볼 수 있는 내용에 대한 설명인 <code>React elements</code> 객체를 만든다.\n- 표현식이므로 if문, for 반복, 변수 할당, 매개 변수로 사용 가능하다.\n- Babel은 JSX를 <code>React.createElement()</code> 호출로 컴파일합니다.\n- 리액트 요소는 <code>Immutable Objects</code>라서 한번 만들면 그 자식이나 속성을 변경할 수 없다. UI를 업데이트 하려면 새로운 요소를 만들어서 <code>ReactDOM.render()</code>에 전달해야한다.\n\n> **Note:** <br/>\n> 실제로 대부분의 React 어플리케이션은 ReactDOM.render() 를 한번만 호출한다. -> state를 이용한다.\n\n# 순수 함수란?\n\n순수 함수는 입력을 변경하지않으며 항상 동일한 입력에 대해 동일한 결과를 반환하는 함수다.\n\n**순수 함수**\n\n```javascript\nfunction sum(a, b) {\n  return a + b;\n}\n```\n\n**순수 함수가 아님**\n\n```javascript\nfunction withdraw(account, amount) {\n  account.total -= amount;\n}\n```\n\n# Props\n\n- 부모 컴포넌트에서 자식 컴포넌트로 전달된 데이터다.\n- Props는 읽기전용이므로 수정할 수 없다.\n- 모든 React 컴포넌트는 props와 관련한 동작을 할 때 <code>순수 함수</code>처럼 동작해야한다.\n\n# State\n\n## 1. 클래스 컴포넌트에서 state 사용하기\n\n```javascript\nclass Clock extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = { date: new Date() };\n  }\n\n  // mounting : Clock 이 DOM에 최초로 렌더링 될 때\n  componentDidMount() {}\n\n  // unmounting : DOM에서 Clock 을 삭제했을 때\n  componentWillUnmount() {}\n  render() {\n    return (\n      <div>\n        <h1>Hello, world!</h1>\n        <h2>It is {this.state.date.toLocaleTimeString()}.</h2>\n      </div>\n    );\n  }\n}\n\nReactDOM.render(<Clock />, document.getElementById(\"root\"));\n```\n\n## 2. 함수형 컴포넌트에서 state 사용하기\n\n```javascript\nimport React, { useEffect, useState } from \"react\";\n// ...\n\nconst PetSitterApplyContainer = () => {\n  const [current, setCurrent] = useState(0); // 인자는 초기값\n\n  // ...\n\n  // 라이프사이클 훅\n  useEffect(() => {\n    function handleResize() {\n      dispatch(resize(window.innerWidth, window.innerHeight));\n    }\n    window.addEventListener(\"resize\", handleResize);\n  });\n\n  const next = () => {\n    setCurrent(current + 1);\n  };\n\n  const prev = () => {\n    setCurrent(current - 1);\n  };\n\n  return <PetSitterApply current={current} />;\n};\n```\n\n- state는 React 컴포넌트가 유저 액션, 네트워크 응답, 기타 등등에 대한 응답으로 시간 경과에 따라 출력을 변경할 수 있게 한다.\n- State는 로컬이며 캡슐화되어있다 : 부모 컴포넌트나 자식 컴포넌트는 특정 컴포넌트의 state 유무를 알 수 없으며 해당 컴포넌트가 함수나 클래스로 선언되었는 지 알 수 없기 때문\n- <code>componentDidMount() 훅</code> : 컴포넌트 출력이 DOM에 렌더링 된 이후 동작한다.\n- <code>componentWillUnmount() 훅</code> : 컴포넌트가 DOM에서 삭제된 이후 동작한다.\n- <code>useEffect</code> : 리액트 컴포넌트가 렌더링 될 때마다 특정 작업을 수행하도록 설정 할 수 있는 Hook으로 클래스형 컴포넌트의 componentDidMount 와 componentDidUpdate 를 합친 형태다.\n\n## 3. State 바르게 사용하기\n\n- State를 직접 수정하지말기\n\n```javascript\n// Wrong\nthis.state.comment = \"Hello\";\n\n// Correct\nthis.setState({ comment: \"Hello\" });\n```\n\n- this.props 및 this.state가 비동기로 업데이트될 수 있다는 것을 고려하기\n\n```javascript\n// Wrong\nthis.setState({\n  counter: this.state.counter + this.props.increment\n});\n\n// Correct : 이전 state를 인수로 받음\nthis.setState((prevState, props) => ({\n  counter: prevState.counter + props.increment\n}));\n```\n\n# 하향식(top-down) 혹은 단방향(unidirectional) 데이터 흐름\n\n- 모든 state는 항상 특정 컴포넌트가 가지며, 해당 state에서 파생된 모든 데이터 또는 UI는 트리의 컴포넌트 <code>아래(below)</code>에만 영향을 미친다.\n- 컴포넌트는 자신의 state를 자식 컴포넌트에 props 로 내려줄 수 있다. => <code>컴포넌트 트리 == props의 폭포</code>\n\n# Refs\n\n일반적인 리액트 데이터 플로우에서 부모 컴포넌트와 자식 컴포넌트는 <code>props</code>를 통해서만 통신할 수 있어서 자식 컴포넌트를 수정하려면 새로운 <code>props</code>와 함께 다시 렌더링해야한다. 그럼 일반적인 데이터 플로우 밖에서 자식 컴포넌트(컴포넌트 인스턴스 or DOM)에 직접 접근하려면 어떻게 해야할까? <code>Refs</code>를 사용하면 되지만 공식문서에서는 Refs 보다는 state를 이용하기로 권장한다.\n\n```javascript\nclass CustomTextInput extends React.Component {\n  constructor(props) {\n    super(props);\n    this.focusTextInput = this.focusTextInput.bind(this);\n  }\n\n  focusTextInput() {\n    // Explicitly focus the text input using the raw DOM API\n    this.textInput.focus();\n  }\n\n  render() {\n    // Use the `ref` callback to store a reference to the text input DOM\n    // element in an instance field (for example, this.textInput).\n    return (\n      <div>\n        <input\n          type=\"text\"\n          ref={input => {\n            this.textInput = input;\n          }}\n        />\n        <input\n          type=\"button\"\n          value=\"Focus the text input\"\n          onClick={this.focusTextInput}\n        />\n      </div>\n    );\n  }\n}\n```\n\n- React는 컴포넌트가 마운트될 때 DOM 요소와 함께 ref 콜백을 호출하며 언마운트될 때 null 과 함께 호출한다. ref 콜백은 componentDidMount 나 componentDidUpdate 라이프사이클 훅 전에 호출된다.\n- ref 속성을 HTML 요소에서 사용하면, ref 콜백은 기본 DOM 요소를 인수로 받는다.\n\n> Refs는 언제 사용하면 좋을까?\n>\n> - input/textarea 포커스 제어, 텍스트 선택, 미디어 재생을 관리할 때\n> - 명령형 애니메이션을 발동시킬 때\n> - 써드 파티 DOM 라이브러리를 통합할 때\n"}}},"next":{"repository":{"post":{"__typename":"GitHub_Blob","oid":"bc66abbed338f762f562dfdd8ad9e2e2db1953a7","text":"# 알고리즘 개념 잡자 - 이진힙\n\n- Title : 알고리즘 개념 잡자 - 이진힙\n- Date : 2020-01-03\n- Category: Algorithm\n\n> 참고 서적<br/> > [코딩 인터뷰 완전분석](https://www.aladin.co.kr/shop/wproduct.aspx?ItemId=115116545) 트리와 그래프<br/> > [C언어로 쉽게 풀어쓴 자료구조](http://www.yes24.com/Product/Goods/69750539) 제 7장 트리, 제 8장 우선순위 큐\n\n# 1. 이진 힙(최소힙과 최대힙)\n\n**우선 순위 큐(priority queue)**에서 각 노드들은 우선 순위를 가지고 있고 우선 순위가 높은 노드가 먼저 나가게 된다. 이는 배열, 연결 리스트 등 여러 가지 방법으로 구현이 가능한데, 가장 효율적인 구조는 **히프(heap)**다.\n\n## 우선 순위 큐 구현 방법\n\n**배열을 이용한 방법**\n\n- 정렬이 안 된 배열\n  - 삽입 : 맨 끝에 삽입 O(1)\n  - 삭제 : 가장 우선 순위 높은 요소 찾기 O(n) + 삭제 후 뒤에 요소들 앞으로 이동 부담\n- 정렬이 된 배열(우선 순위 낮은 순으로)\n  - 삽입 : 탐색을 통해 삽입 위치를 결정해야 하며, 위치를 찾은 후에는 요소를 이동시켜서 빈 공간을 만들어야 한다. O(n)\n  - 삭제 : 맨 끝 요소 삭제 O(1)\n\n<br/>\n\n**연결리스트를 이용한 방법**\n\n- 정렬이 안 된 리스트\n  - 삽입 : 첫 번째 노드로 삽입 O(1)\n  - 삭제 : 포인터 따라서 모든 노드를 뒤져보아야 한다. O(n)\n- 정렬이 된 리스트(우선 순위 높은 순으로) - 삽입 : 맨 끝에 삽입해야하므로 O(n) - 삭제 : 맨 앞 노드 삭제 O(1)\n  <br/>\n\n**히프를 이용한 방법**\n\n- 히프는 완전 이진 트리의 일종으로 우선 순위 큐를 위하여 만들어진 자료 구조이다.\n- 반 정렬 상태를 유지한다.\n- 삽입, 삭제 시간복잡도는 **O(log<sub>2</sub>n)**로 상당히 유리\n\n## 히프란?\n\n- 여러 개의 값들 중에서 가장 큰 값이나 가장 작은 값을 빠르게 찾아내도록 만들어진 자료구조다.\n- **부모 노드의 키 값이 자식 노드의 키 값보다 항상 큰(작은)** 이진 트리다.\n- 반 정렬 상태로, 큰 값이 상위 레벨에 있고 작은 값이 하위 레벨에 있다는 정도다.\n- 히프 트리는 중복된 값을 허용한다.\n- 히프는 <span class=\"clr-note\">완전 이진 트리</span>다.\n- 최대 힙 : 부모 노드의 키 값이 자식 노드의 키 값보다 크거나 같은 완전 이진 트리\n- 최소 힙 : 부모 노드의 키 값이 자식 노드의 키 값보다 작거나 같은 완전 이진 트리\n\n## 히프 구현 방법(최대 힙)\n\n히프는 완전 이진 트리이기 때문에 표준적인 자료 구조는 배열이다. 완전 이진 트리 구현 방법은 위 트리의 표현 방법에서 이미 언급했다.\n\n**최대 힙 표현 방법**\n<br/>\n\n![히프](https://raw.githubusercontent.com/devgaram/TIL/master/Algorithm/images/2020-01-03-img/3.png)\n\n<br/>\n\n- 삽입 연산\n\n  - 1단계 - 히프의 끝(마지막 노드 다음)에 새로운 노드를 삽입한다. <span class=\"clr-grey\">위 그림에서 키 값이 3인 말단 노드의 형제로 삽입한다.</span>\n  - 2단계 - 삽입된 노드와 그 부모 노드의 키 값을 비교한다. 삽입된 노드의 키 값이 부모 노드의 키 값보다 크면 두 노드의 위치를 바꾼다.\n  - 3단계 - 삽입된 노드의 키 값이 자신의 부모 노드 키 값보다 작아질 때까지 단계 2를 반복한다.\n\n- 삭제 연산\n  - 1단계 - 루트 노드가 삭제 된다. 빈자리에는 히프의 마지막 노드를 가져온다.\n  - 2단계 - 새로운 루트 노드를 자식 노드들과 비교해보면서 자식 노드가 더 크면 두 노드의 위치를 바꾼다. 자식 노드 두 개 모두 값이 더 크다면 더 큰 값을 가진 노드와 교환한다.\n  - 3단계 - 노드의 값이 자식보다 클 때까지 2단계를 반복한다.\n\n**자바스크립트 구현 코드**\n\n<br/>\n\n```javascript\nclass MaxHeap {\n  constructor(elements) {\n    this.heap = [, ...elements];\n  }\n\n  insert(key) {\n    this.heap.push(key);\n    let current = this.heap.length - 1;\n    let parent = parseInt(current / 2);\n    while (parent >= 1) {\n      if (key > this.heap[parent])\n        [this.heap[current], this.heap[parent]] = [\n          this.heap[parent],\n          this.heap[current]\n        ];\n      else break;\n      current = parent;\n      parent = parseInt(current / 2);\n    }\n  }\n\n  delete() {\n    if (this.heap.length === 1) {\n      return \"heap is empty\";\n    }\n    [this.heap[1], this.heap[this.heap.length - 1]] = [\n      this.heap[this.heap.length - 1],\n      this.heap[1]\n    ];\n    let maxValue = this.heap.pop();\n    let current = 1;\n    let leftChild = current * 2;\n    while (leftChild < this.heap.length) {\n      let largest = leftChild;\n      if (leftChild + 1 < this.heap.length)\n        largest =\n          this.heap[leftChild] < this.heap[leftChild + 1]\n            ? leftChild + 1\n            : leftChild;\n      if (this.heap[largest] > this.heap[current])\n        [this.heap[largest], this.heap[current]] = [\n          this.heap[current],\n          this.heap[largest]\n        ];\n      else break;\n      current = largest;\n      leftChild = current * 2;\n    }\n\n    return maxValue;\n  }\n}\n\nconst maxHeap = new MaxHeap([9, 7, 6, 5, 4, 3, 2, 2, 1, 3]);\nconsole.log(maxHeap.heap);\nmaxHeap.insert(8);\nconsole.log(maxHeap.heap);\nlet maxValue = maxHeap.delete();\nconsole.log(maxValue);\nconsole.log(maxHeap.heap);\n```\n\n## 히프의 시간 복잡도\n\n- 삽입 연산\n  - 최악의 경우는 루트 노드까지 올라간 경우이므로 트리의 높이에 해당하는 비교 연산과 이동 연산이 필요하다. 히프는 완전 이진 탐색이므로 히프의 높이는 log<sub>2</sub>n이 되고 시간 복잡도도 O(log<sub>2</sub>n)\n- 삭제 연산\n  - 삽입 연산과 같다.\n\n## 히프의 응용\n\n- 히프 정렬\n  - 최대 히프를 이용하여 정렬할 수 있다.\n  - 요소가 n개일 때, 시간 복잡도는 **O(nlog<sub>2</sub>n)**이다.\n  - 전체 자료 정렬이 아닌 가장 큰 값 몇 개만 정렬하고 싶을 때 사용하면 좋다.\n\n```javascript\nconst heapSort = (elements, num) => {\n  const sortedElements = [];\n  const maxHeap = new MaxHeap([]);\n  elements.forEach(element => {\n    maxHeap.insert(element);\n  });\n  for (let i = 0; i < num; i++) {\n    sortedElements.push(maxHeap.delete());\n  }\n  return sortedElements;\n};\n\nconsole.log(heapSort([2, 4, 1, 9, 5, 7, 6, 5, 2, 8], 5));\n```\n\n- 허프만 코드 (Huffman Coding) <span class=\"clr-grey\">나중에 추가할 예정..</span>\n"}}}},"pageContext":{"id":"68ea80dc2124e8d2e6495a2ae7232f0d565aecf7","previousPostId":"40f40953b7ab43bf93781786a87871d92de6d63c","nextPostId":"bc66abbed338f762f562dfdd8ad9e2e2db1953a7"}},"staticQueryHashes":["2685952063","2841359383"]}