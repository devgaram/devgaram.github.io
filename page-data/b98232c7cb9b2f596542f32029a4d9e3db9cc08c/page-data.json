{"componentChunkName":"component---src-templates-blog-post-js","path":"/b98232c7cb9b2f596542f32029a4d9e3db9cc08c","result":{"data":{"site":{"siteMetadata":{"title":"보노보노의 평화로운 개발 이야기"}},"current":{"repository":{"post":{"__typename":"GitHub_Blob","oid":"b98232c7cb9b2f596542f32029a4d9e3db9cc08c","text":"# JVM 메모리 구조\n\n- Title : JVM 메모리 구조\n- Date : 2019-10-16\n- Category: Java\n\n예전 면접에서 JVM 메모리 구조에 관한 질문을 받은 적이 있었다...  \n횡설수설하며 대답하긴 했지만 좀 더 깔끔한 답변을 위해 정리해야할 필요성을 느꼈다..!!!\n\n우선, JVM이 뭘까?\n\nJVM(Java Virtual Machine) 은 자바로 작성된 애플리케이션을 실행하기 위해서 반드시 필요한 가상머신이다!\n\n![1](https://raw.githubusercontent.com/devgaram/TIL/master/Java/images/2019-10-16-img/memory01.png) <br/>\n\n위 그림을 보면 일반 애플리케이션 코드는 OS만 거치고 하드웨어로 전달되지만 자바 애플리케이션은 JVM을 한번 더 거친다.\n그래서 자바는 속도가 느린 단점이 있다고 한다.\n\n왜??? 이유를 알기 위해 잠시 자바 응용 프로그램의 실행되는 과정을 살펴볼 필요가 있다.\n\n1. 응용프로그램이 실행되면 JVM은 시스템으로부터 프로그램을 수행하는데 필요한 메모리를 할당받고 JVM은 이 메모리를 용도에 따라 여러 영역으로 나누어 관리한다.\n2. javac.exe (자바 컴파일러)가 자바소스를 바이트 코드(\\*.class)로 컴파일한다.\n3. Class Loader가 JVM에 클래스 파일을 로드시킨다.\n4. java.exe (자바인터프리터, 실행엔진)이 컴파일된 바이트 코드를 해석한다.\n5. 해석된 바이트 코드는 Runtime Data Areas에 배치되어 실행된다.\n\n위와 같이 하드웨어에 맞게 완전히 컴파일된 상태가 아닌 바이트 코드로 컴파일된 상태고 실행 시에 해석되기 때문에 느리다.\n그래도 요즘엔 바이트 코드를 하드웨어의 기계어로 바로 변환해주는 JIT 컴파일러와 향상된 최적화 기술이 적용되어서 속도 문제가 많이 개선되었다고 한다.\n\n장점으로는 JVM 덕분에 자바 애플리케이션은 OS에 종속되지 않는 점이 있다.  \n그래도 JVM은 OS에 종속되니깐 OS에 맞는 JVM이 필요하다.\n\n## JVM 메모리 구조\n\n![1](https://raw.githubusercontent.com/devgaram/TIL/master/Java/images/2019-10-16-img/JvmSpec7.png) <br/>\n[JVM스펙](https://ko.wikipedia.org/wiki/자바_가상_머신)\n\n이 중 3가지 주요 영역에 대해 알아보자.\n\n## 메서드 영역\n\n메서드 영역(Method area = static area = Class area)은 JVM이 \\*.class을 해석하여 얻은 클래스 정보(클래스 데이터)가 저장되는 공간이다. 이 때, 클래스 변수(static 멤버변수)도 같이 저장된다.  \n클래스정보에는 멤버변수의 이름/데이터 타입/접근 제어자 정보, 메소드의 이름/리턴 타입/매개변수/접근제어자 정보, 클래스인지 인터페이스인지 여부, 전체이름들이 해당된다.\n\n## 힙\n\n힙(Heap) 영역은 프로그램 실행 중에 생성되는 인스턴스(객체)가 저장되는 공간이다.  \n즉 new 키워드로 생성된 객체와 배열을 저장한다. 물론 인스턴스 변수도 같이 저장된다.\n\n## 호출스택\n\n호출 스택(call stack 또는 execution stack)은 호출된 메서드를 위한 메모리가 할당되는 곳으로 이 메모리는 메서드가 작업을 수행하는 동안 지역변수(매개변수 포함), 연산의 중간 결과, 리턴 값들을 저장하는 데 사용한다. 메서드가 작업을 마치면 할당되었던 메모리 공간은 반환되어 비워진다.\n\n참고서적) 자바의 정석  \n참고블로그) [https://asfirstalways.tistory.com/158](https://asfirstalways.tistory.com/158)\n"}}},"previous":{"repository":{"post":{"__typename":"GitHub_Blob","oid":"2570d25c403b748053bcd53d0ff0e32d37cc4697","text":"# Java Comparator과 Comparable\n\n- Title : Java Comparator과 Comparable\n- Date : 2019-10-18\n- Category: Java\n\nPS 문제를 풀다가 Arrays.sort()와 Collections.sort()를 오름차순(디폴트)이 아닌 다른 기준으로 정렬하고 싶을 때가 있었다. 찾아보니 Comparator 또는 Comparable을 사용하면 된다고 한다. 음.. 알아본 김에 잊어버리지않게 기록을 해야겠다!\n\n# 컬렉션을 입맛대로 정렬하고 싶다면?\n\n내맘대로 컬렉션의 정렬 기준을 정하고 싶다면 `Comparator`과 `Comparable` 인터페이스를 사용하면 된다.\n\n```java\nimport java.util.Comparator;\npublic interface Comparator {\n    int compare(Object o1, Object o2);\n    boolean equals(Object obj);\n}\n```\n\n<br/>\n\n```java\nimport java.lang.Comparable;\npublic interface Comparable {\n    public int compareTo(Object o); // 양수 : 내림차순, 음수 : 오름차순\n}\n```\n\n# 그럼 둘의 차이는 무엇일까?\n\nComparable을 구현한 클래스들은 기본적으로 오름차순으로 정렬되도록 구현되어있다.  \nInteger, Character와 같은 `wrapper` 클래스(int, long, float, double 등을 객체화한 클래스)와 `String, Date, File`과 같은 것이 Comparable을 구현한 대표적 클래스이다. 그 외 Java API 문서에서 클래스 목록을 확인할 수 있다.  \n그래서 우리가 `Arrays.sort(정렬대상)` 로 오름차순 정렬을 할 수 있는 것이다. 아하!\n\n```java\npublic final class Integer extends Number implements Comparable {\n    ...\n    public int compareTo(Object o) {\n        return compareTo((Integer) o);\n    }\n\n    public int compareTo(Integer anotherInteger) {\n        int thisVal = this.value;\n        int anotherVal = anotherInteger.value;\n        return (thisVal < anotherVal ? -1 : (thisVal ==anotherVal ? 0 : 1));\n    }\n}\n```\n\n실제 Integer 클래스의 일부이다.  \n보이는 것 처럼 Comparable 인터페이스를 구현하고 compareTo 메서드에서 오름차순으로 정렬되도록 정의해놓았다.\n\nComparator 인터페이스는 Comparable로 구현된 클래스를, 또는 커스텀 클래스를 기본 정렬 기준 외에 다른 기준으로 정렬하고자 할 때 사용하면 된다.  \n아래는 실제 예제로 백준 16236 아기 상어 문제를 풀 때 우선순위큐의 정렬기준을 Comparator을 이용해 정의한 것이다.\n\n```java\nPriorityQueue<Point> pq = new PriorityQueue<>(new Comparator<Point>() {\n\t@Override\n\tpublic int compare(Point o1, Point o2) {\n\t\tif (o1.dis != o2.dis) return o1.dis-o2.dis;\n\t\tif (o1.row != o2.row) return o1.row-o2.row;\n\t\treturn o1.col-o2.col;\n\t}\n});\n```\n\n또는 책의 예제를 보면 따로 클래스를 정의해서 사용할 수 있다.  \n이 예제는 Comparable을 구현한 클래스 String의 정렬 방식을 내림차순으로 바꾸는 방법이다.  \n단순히 -1을 곱해 반대의 값을 반환하게 구현했다.\n\n```java\n\nArrays.sort(strArr, new Descending());\n\nClass Descending implements Comparator {\n    public int compareTo(Object o1, Object o2) {\n        if (o1 instanceof Comparable && o2 instanceof Comparable) {\n            Comparable c1 = (Comparable) o1;\n            Comparable c2 = (Comparable) o2;\n            return c1.compareTo(c2) * -1;\n        }\n    }\n}\n```\n\n이제 내맘대로 정렬할 수 있게 되었담!!!!\n\n자바의 정석 책을 참고했습니다.\n"}}},"next":{"repository":{"post":{"__typename":"GitHub_Blob","oid":"d3dc616060fb13934c41fc45065d110b9e8704ee","text":"# 시스템 설계 및 규모 확장성 문제 5 - 판매순위\n\n- Title : [코딩인터뷰] 시스템 설계 및 규모 확장성 문제 5 - 판매순위\n- Date : 2019-08-31\n- Category: Algorithm\n\n> 코딩 인터뷰 완전분석 (CRACKING THE CODING INTERVIEW 6/E) / 게일 라크만 맥도웰 지음 / 인사이트\n\n# Q. 판매순위 : 한 전자상거래 회사는 가장 잘 팔리는 제품의 리스트(전체에서 그리고 각 목록별로)를 알고 싶어 한다. 예를 들어, 어떤 제품은 전체 제품 중에서 1,506번째로 잘 팔리지만 운동 장비 중에서는 13번째로 잘 팔리고, 안전용품 중에서는 24번째로 잘 팔릴 수 있다. 이 시스템을 어떻게 설계할지 설명하라.\n\n## 내풀이\n\n각 제품 정보에 판매수량을 저장을 하고 리스트 조회할 때마다 정렬하는 건 좀 그럴거 같긴한뎁,,\n동시에 전체 중 ~위 운동 장비 중 ~위.. 이런식으로 표현하게 되면 정렬을 넘 많이 하게 되는 듯싶은뎅\n구입할 때마다 리스트의 맨앞에..?음..\n매번 순위 조회할때마다 정렬해야되니깐 이건 좀 별루고\n아예 전체 연결리스트를 순서가 유지되게 하는 게 좋을 듯\n삽입 삭제가 빈번하니깐 연결리스트가 좋을거같고...\n\n## 책풀이\n\n**1단계 : 문제 범위를 한정하고 합리적인 가정을 하자**\n\n구현하려는 시스템을 다음과 같이 정의했다.\n\n- 잘 팔린다는 것은 판매량이 많다는 것을 의미한다.\n- 판매량은 평생/지난달/저번주 판매량인지 명확하게 정의할 것이다. 여기서는 저번주 판매량으로 한정한다.\n- 각 제품은 여러 목록에 포함될 수 있고 하위목록 개념은 없다고 가정한다.\n\n다음과 같은 합리적인 가정을 세웠다.\n\n- 통계 결과가 언제나 100% 최신 데이터가 아닐 수 있다고 가정할 것이다.\n- 인기 있는 제품의 경우 정확도가 중요하나 인기 없는 제품은 약간의 오차가 있어도 괜찮다.\n- 가장 인기 있는 제품의 경우 한 시간마다 갱신이 이루어진다고 가정할 것이다.\n\n**2단계 : 주요 구성요소 그리기**\n\n![1](https://raw.githubusercontent.com/devgaram/TIL/master/Algorithm/images/2019-08-30-img/5-1.jpg) <br/>\n\n**3단계 : 핵심문제 파악**\n\n1. 분석은 비용이 비싸다.\n2. 데이터베이스에 너무 자주 기록한다.\n3. join 비용이 비싸다\n\n2번 데이터베이스에 너무 자주 기록된다.  \n구매할 때마다 판매량 정보 테이블을 업데이트하기보다는 모아서 일괄적(batch)으로 한번에 데이터베이스에 쓰는 방법을 쓴다.  \n즉, 곧바로 데이터베이스에 자료를 집어넣기보단, 메모리 내의 캐시와 같은 저장소에 구매 정보와 백업용 로그 파일을 저장해 놓은 뒤 주기적으로 로그/캐시 데이터를 모아서 한 번에 데이터베이스에 넣는 것이다. (특정 시점까지의 자료만 데이터베이스에 넣는 식)\n\n3번 join 비용이 비싸다.  \n수천 개의 제품 목록을 제품 ID에 join 하는 작업은 고비용이다.\n"}}}},"pageContext":{"id":"b98232c7cb9b2f596542f32029a4d9e3db9cc08c","previousPostId":"2570d25c403b748053bcd53d0ff0e32d37cc4697","nextPostId":"d3dc616060fb13934c41fc45065d110b9e8704ee"}},"staticQueryHashes":["2841359383"]}