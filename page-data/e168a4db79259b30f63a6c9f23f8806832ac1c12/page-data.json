{"componentChunkName":"component---src-templates-blog-post-js","path":"/e168a4db79259b30f63a6c9f23f8806832ac1c12","result":{"data":{"site":{"siteMetadata":{"title":"보노보노의 평화로운 개발 이야기"}},"current":{"repository":{"post":{"__typename":"GitHub_Blob","oid":"e168a4db79259b30f63a6c9f23f8806832ac1c12","text":null}}},"previous":{"repository":{"post":{"__typename":"GitHub_Blob","oid":"a4f5ba562def4c89e50365067823859bbeb87faf","text":"# mssql 쿼리 팁 - 여러 행의 데이터를 한 칼럼에 담기\n\n- Title : mssql 쿼리 팁 - 여러 행의 데이터를 한 칼럼에 담기\n- Date : 2018-01-26\n- Category: Database\n\n<table class=\"half\">\n<thead>\n\t<tr><th>IDX</th><th>NAME </th></tr>\n</thead>\n<tbody>\n\t<tr><td>1</td><td>A</td></tr>\n\t<tr><td>1</td><td>B</td></tr>\n\t<tr><td>1</td><td>C</td></tr>\n\t<tr><td>2</td><td>B</td></tr>\n\t<tr><td>2</td><td>D</td></tr>\n</tbody>\n</table>\n\n위 테이블을 아래와 같이 출력하고 싶다.\n\n<table class=\"half\">\n<thead>\n\t<tr><th>IDX</th><th>NAME </th></tr>\n</thead>\n<tbody>\n\t<tr><td>1</td><td>A,B,C</td></tr>\n\t<tr><td>2</td><td>B,D</td></tr>\t\n</tbody>\n</table>\n\n<br/><br/>\n\n```sql\nSELECT\n\tDISTINCT IDX,\n\tSTUFF\n\t( (\n\t\tSELECT ',' + NAME FROM TB_NAME A WHERE A.IDX = B.IDX\n\t\tFOR XML PATH('')\n\t),1,1,'') AS NAME\nFROM TB_NAME B\n```\n\nSTUFF(STRING,1,1,'') - 맨 앞 문자 한개 제거\n\n# STUFF 함수\n\n[참고페이지](https://docs.microsoft.com/ko-kr/sql/t-sql/functions/stuff-transact-sql)\n\nSTUFF ( character_expression , start , length , replaceWith_expression )\n\n<table>\n<thead>\n\t<tr><th>인수</th><th>설명</th></tr>\n</thead>\n<tbody>\n\t<tr><td>start</td><td>삭제 및 삽입 시작 위치, 0, 음수면 NULL이 반환된다.</td></tr>\n\t<tr><td>length</td><td>삭제 할 문자 수 지정, 0, 음수면 NULL이 반환된다.</td></tr>\t\n\t<tr><td>replaceWith_expression </td><td>''이면 아무것도 삽입하지 않고 문자를 제거</td></tr>\t\n</tbody>\n</table>\n"}}},"next":{"repository":{"post":{"__typename":"GitHub_Blob","oid":"116d87bf74c4c19e11740085d22550d499c73a9d","text":"# [생활코딩] javascript 함수지향2\n\n- Title : [생활코딩] javascript 함수지향2\n- Date : 2018-01-13\n- Category: Javascript\n\n생활코딩 함수지향 파트 중 값으로서의 함수와 콜백에 대한 내용을 정리했습니다.\n\n# 1. 값으로서 함수\n\n예제1) 자바스크립트에서는 함수도 객체이며, 함수도 값이 될 수 있다.\n\n```javascript\nfunction a() {} //함수는 a라는 변수에 담겨진 값.\nvar a = function() {};\n```\n\n예제2) 함수는 객체 안에 저장될 수 있다.\n\n```javascript\na = {\n  b: function() {}\n};\n```\n\nb는 key, 객체 안에서 변수 역할(어떤 값을 저장하고 있기 때문) = 속성(property)  \n속성에 저장된 값이 함수면 메소드라 부름.  \n즉, a라는 객체에 b라는 속성이 있는데, 이 속성의 값은 함수(메소드)다.\n\n예제3) 함수는 변수, 객체에 저장될 수 있고 인자로도 사용할 수 있다.\n\n```javascript\nfunction cal (func, num){\n   return func(num)\n}\n\nfunction increase (num){\n   return num+1;\n}\nalert (cal (increase, 1) );\n\n// 위 코드는 아래와 같이 해석될 수 있다.\nfunction cal ( func, num){\n   var func = increase (num){\n       return num+1\n   }\n}\n// 즉, func(1) => 2가 출력됨.\n```\n\n예제4) 함수를 리턴 값으로도 사용할 수 있다.\n\n```javascript\nfunction cal (mode){\n val funcs = {\n  'plus' : function (left, right) { return left + right },\n  'minus' : function (left, right) { return left - right }\n }\n return funcs[mode];\n}\nalert (cal('plus')(2,1));\n```\n\nreturn funcs['plus'] 는 funcs 객체의 plus 속성의 값인 function(left, right) {return left+right} 메소드를 리턴시킨다.  \ncal('plus')(2,1)은 cal('plus')함수의 인자 값으로 2, 1을 전달하겠다는 의미이다.  \ncal('plus')는 function(left, right) {return left+right} 이므로 알럿창에 3이 뜬다.\n\n예제5) 함수를 배열의 값으로 사용할 수 있다.\n\n```javascript\nvar process = [\n  function(input) {\n    return input + 10;\n  },\n  function(input) {\n    return input * input;\n  },\n  function(input) {\n    return input / 2;\n  }\n];\nvar input = 1;\nfor (var i = 0; i < process.length; i++) input = process[i](input);\n\nalert(input); //60.5\n```\n\n# 2. 콜백\n\n```javascript\nvar numbers = [20, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1];\nnumbers.sort(); // numbers는 배열객체, sort()는 메소드(내장메소드)\nconsole.log(numbers); // 1, 10, 2, 20, 3, 4, 5, 6, 7, 8, 9 - 문자 기준으로 정렬한 듯.\n```\n\n<span class=\"clr-grey\">\nsort()    \narray.sort (sortfunc)    \n반환값 : 정렬된 배열\n</span>\n\n```javascript\nvar numbers = [20, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1];\nvar sortfunc = function(a, b) {\n  if (a > b) return 1;\n  else if (a < b) return -1;\n  else return 0;\n};\nvar sortfunc = function(a, b) {\n  return a - b; //역순은 return b-a;\n};\nnumbers.sort(sortfunc); // 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 20\n```\n\nsortfunc가 콜백함수가 된다.  \n함수는 값으로서 사용할 수 있기 때문에 sortfunc를 sort에 인자로 전달함으로서 sort 메소드를 사용자가 원하는 방식으로 바꿀 수 있다.\n\n<span class=\"clr-note\">\\*\\*콜백은 비동기처리에서 유용하게 사용된다.</span>\n"}}}},"pageContext":{"id":"e168a4db79259b30f63a6c9f23f8806832ac1c12","previousPostId":"a4f5ba562def4c89e50365067823859bbeb87faf","nextPostId":"116d87bf74c4c19e11740085d22550d499c73a9d"}},"staticQueryHashes":["2685952063","2841359383"]}