{"componentChunkName":"component---src-templates-blog-post-js","path":"/43c62d138aba5719c8fa3bc79ecccce9865fb59c","result":{"data":{"site":{"siteMetadata":{"title":"보노보노의 평화로운 개발 이야기"}},"current":{"repository":{"post":{"__typename":"GitHub_Blob","oid":"43c62d138aba5719c8fa3bc79ecccce9865fb59c","text":"# 자바스크립트 단위테스트 시작하기\n\n- Title : 자바스크립트 단위테스트 시작하기\n- Date : 2018-01-27\n- Category: Nodejs\n\nmocha 자바스크립트 테스트 프레임워크로 단위테스트 시작하는 방법입니다.\n\n# 단위테스트(Unit Test)가 필요한 이유?\n\n프로그램을 작은 단위로 쪼개서 내가 짠 프로그램이 내가 원하는 결과대로 동작하는 지 테스트할 수 있다.  \n단위테스트를 거치면 프로그램의 안정성이 높아지며, 단위테스트를 믿고 리팩토링을 할 수 있다.\n\n자바스크립트로 짜여진 프로그램에서 오류를 찾을 때, 단위테스트를 거치지 않은 프로그램의 경우는 전체 흐름을 파악해가며 원인을 찾아야한다.  \n원인을 찾아 수정한다해도 이 결과가 어떤 이펙트를 가져올지 예상하기가 어려울 수 있다.\n\n# mocha 자바스크립트 테스트 프레임워크\n\n## 1. 셋팅하기 (Windows8)\n\nmocha는 node.js가 기반인 프레임워크이기 때문에 node.js가 설치되어있어야 한다.  \n설치 후 cmd 창에 node --version 이라고 쳐서 버전 정보가 제대로 나오면 설치가 잘 된 것이다.\n\ncmd 창에 아래와 같이 입력하면 mocha 사용 준비 완료!\n\n```\n$npm install -g mocha\n```\n\n그리고 Assertion Library인 Chai를 추가해보자. 작업 디렉토리에서 아래를 cmd 창에서 실행한다.\n\n```\n$nbm install chai\n```\n\n그 결과, node_moduls 폴더가 생성된다.\n\n## 2. 사용하기\n\n[InspiredJW님의 티스토리 블로그를 참고했습니다!](http://inspiredjw.com/entry/Mocha-%EB%A1%9C-%ED%95%98%EB%8A%94-JavaScript-Testing).\n\n모카는 test 디렉토리에 있는 파일을 실행하기 때문에, 테스트 코드는 이 디렉토리 안에 위치시켜야한다.\n\nJsStudy/JsStudy.js\n\n```javascript\n\"use strict\";\nexports.foo = (a, b) => {\n  if (typeof a !== \"number\" || typeof b !== \"number\") return false;\n  return a * b;\n};\nexports.bar = callback => {};\n```\n\nJsStudy/test/JsStudyTest.js\n\n```javascript\n\"use strict\";\n\nlet chai = require(\"chai\");\nlet should = chai.should();\nlet foo = require(\"../JsStudy\").foo;\n\ndescribe(\"Function Foo\", () => {\n  describe(\"with two number params\", () => {\n    it(\"should return product\", () => {\n      let result = foo(3, 4);\n      result.should.be.a(\"number\");\n      result.should.equal(12);\n    });\n  });\n});\n\ndescribe(\"with non-number params\", () => {\n  it(\"should return false\", () => {\n    let result = foo(3, null);\n    result.should.be.false;\n  });\n});\n```\n\n테스트 실행방법은 cmd 창에서 JsStudy 폴더로 이동한후, mocha 실행하기\n\n```\n$mocha\n```\n\n<span class=\"clr-grey\">\nAPI    \n- describe() : 테이스틔 이름을 지정하며, 중첩하여 사용할 수 있다. 테스트를 구분하는 section이며, 단위테스트 부분을 콜백으로 넘겨준다.\n- it() : 단위테스트의 이름을 작성하고 실제 실행되는 코드를 콜백(done)으로 넘겨준다.\n- befor() : 테스트 코드가 실행되기 전 한번 실행된다.\n- after() : 모든 테스트 코드가 실행된 후 한 번 실행된다.\n- beforeEach() : (테스트 코드가 여러개일 경우) 각각의 테스트 코드가 실행되기 전마다 실행된다.\n- afterEach() : (테스트코드가 여러개일 경우) 각각의 테스트 코드가 실행된 후마다 실행된다.\n- .a(type[,msg]) : 지정된 타입과 동일한지 리턴.\n- .equal(val[,msg]) : === var과 주어진 타켓이 같은지.\n- .false : 타켓 === false\n</span>\n"}}},"previous":{"repository":{"post":{"__typename":"GitHub_Blob","oid":"0dbcfc35d480024752ff60c2f66b6ecbbd381e19","text":"# Vue2 65분만에 배우기!\n\n- Title : Vue2 65분만에 배우기!\n- Date : 2018-04-07\n- Category: Vue\n\n유튜브 영상 The Vue Tutorial for 2018 - Learn Vue 2 in 65 Minutes 중 몰랐던 내용 정리한 글입니다.\n\n## 1. Vue-CLI 설치하기\n\nVue-CLI를 통해 Vue 프로젝트를 빠르고 쉽게 생성할 수 있다.\n\n```\n> mkdir vue-toy\n> cd vue-toy\n> npm install -g @vue/cli        -- Vue-CLI 설치\n> vue create vue-voca            -- Vue 프로젝트 생성[ vue create 프로젝트이름 ]\n```\n\n2018.04.09추가) yarn 설치 후, yarn을 통해 Vue-Cli 설치하는 방법\n\n```\n> npm install -g yarn\n> yarn global add @vue/cli\n```\n\n뷰 프로젝트를 생성하면 다음과 같은 프롬프트를 볼 수 있다.\n\n```\nVue CLI v3.0.0-beta.6\n?Please Pick a preset : (Use arrow Keys)\n> default (babel, eslint)\n   menually select features\n```\n\n2018.04.09추가)\n\n- Vue-Cli의 기본 템플릿은 babel, eslint, unit-mocha를 포함한다.\n\ndefault로 생성을 성공적으로 완료하면 다음과 같이 명령어를 실행한다.\n\n```\n> cd vue-voca\n> npm run serve\n```\n\n성공적으로 컴파일이 되면 http://localhost:8080/ 로 들어가본다.\n아래와 같은 화면을 볼 수 있다면, 성공적으로 Vue.js App을 생성한 것이다.\n\n![화면](https://raw.githubusercontent.com/devgaram/TIL/master/Vue/images/2018-04-07-img/2018-04-07-img.png)\n\n## 2. Vue Form Validation\n\nVeeValidate는 폼 유효성 체크를 위한 패키지다.\n\n설치방법\n\n```\n> yarn add vee-validate\n#또는\n> npm install vee-validate --save\n```\n\n사용방법\n\n```\nimport VeeValidate from 'vee-validate';\nVue.use(veeValidate);\n```\n\n## 3. Vue router\n\n```\n> npm add vue-router\n#또는\n> yarn add vue-router\n```\n\n```\nimport vue from 'vue'\nimport Router from 'vue-router'\n```\n\nvue 후에 vue-router를 임포트해야한다.\n\n동영상에서 진행한 프로젝트를 따라한 [깃으로 가기](https://github.com/devgaram/vueStudy). 개인적인 주석이 포함되어있습니다.\n"}}},"next":{"repository":{"post":{"__typename":"GitHub_Blob","oid":"116d87bf74c4c19e11740085d22550d499c73a9d","text":"# [생활코딩] javascript 함수지향2\n\n- Title : [생활코딩] javascript 함수지향2\n- Date : 2018-01-13\n- Category: Javascript\n\n생활코딩 함수지향 파트 중 값으로서의 함수와 콜백에 대한 내용을 정리했습니다.\n\n# 1. 값으로서 함수\n\n예제1) 자바스크립트에서는 함수도 객체이며, 함수도 값이 될 수 있다.\n\n```javascript\nfunction a() {} //함수는 a라는 변수에 담겨진 값.\nvar a = function() {};\n```\n\n예제2) 함수는 객체 안에 저장될 수 있다.\n\n```javascript\na = {\n  b: function() {}\n};\n```\n\nb는 key, 객체 안에서 변수 역할(어떤 값을 저장하고 있기 때문) = 속성(property)  \n속성에 저장된 값이 함수면 메소드라 부름.  \n즉, a라는 객체에 b라는 속성이 있는데, 이 속성의 값은 함수(메소드)다.\n\n예제3) 함수는 변수, 객체에 저장될 수 있고 인자로도 사용할 수 있다.\n\n```javascript\nfunction cal (func, num){\n   return func(num)\n}\n\nfunction increase (num){\n   return num+1;\n}\nalert (cal (increase, 1) );\n\n// 위 코드는 아래와 같이 해석될 수 있다.\nfunction cal ( func, num){\n   var func = increase (num){\n       return num+1\n   }\n}\n// 즉, func(1) => 2가 출력됨.\n```\n\n예제4) 함수를 리턴 값으로도 사용할 수 있다.\n\n```javascript\nfunction cal (mode){\n val funcs = {\n  'plus' : function (left, right) { return left + right },\n  'minus' : function (left, right) { return left - right }\n }\n return funcs[mode];\n}\nalert (cal('plus')(2,1));\n```\n\nreturn funcs['plus'] 는 funcs 객체의 plus 속성의 값인 function(left, right) {return left+right} 메소드를 리턴시킨다.  \ncal('plus')(2,1)은 cal('plus')함수의 인자 값으로 2, 1을 전달하겠다는 의미이다.  \ncal('plus')는 function(left, right) {return left+right} 이므로 알럿창에 3이 뜬다.\n\n예제5) 함수를 배열의 값으로 사용할 수 있다.\n\n```javascript\nvar process = [\n  function(input) {\n    return input + 10;\n  },\n  function(input) {\n    return input * input;\n  },\n  function(input) {\n    return input / 2;\n  }\n];\nvar input = 1;\nfor (var i = 0; i < process.length; i++) input = process[i](input);\n\nalert(input); //60.5\n```\n\n# 2. 콜백\n\n```javascript\nvar numbers = [20, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1];\nnumbers.sort(); // numbers는 배열객체, sort()는 메소드(내장메소드)\nconsole.log(numbers); // 1, 10, 2, 20, 3, 4, 5, 6, 7, 8, 9 - 문자 기준으로 정렬한 듯.\n```\n\n<span class=\"clr-grey\">\nsort()    \narray.sort (sortfunc)    \n반환값 : 정렬된 배열\n</span>\n\n```javascript\nvar numbers = [20, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1];\nvar sortfunc = function(a, b) {\n  if (a > b) return 1;\n  else if (a < b) return -1;\n  else return 0;\n};\nvar sortfunc = function(a, b) {\n  return a - b; //역순은 return b-a;\n};\nnumbers.sort(sortfunc); // 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 20\n```\n\nsortfunc가 콜백함수가 된다.  \n함수는 값으로서 사용할 수 있기 때문에 sortfunc를 sort에 인자로 전달함으로서 sort 메소드를 사용자가 원하는 방식으로 바꿀 수 있다.\n\n<span class=\"clr-note\">\\*\\*콜백은 비동기처리에서 유용하게 사용된다.</span>\n"}}}},"pageContext":{"id":"43c62d138aba5719c8fa3bc79ecccce9865fb59c","previousPostId":"0dbcfc35d480024752ff60c2f66b6ecbbd381e19","nextPostId":"116d87bf74c4c19e11740085d22550d499c73a9d"}},"staticQueryHashes":["2685952063","2841359383"]}