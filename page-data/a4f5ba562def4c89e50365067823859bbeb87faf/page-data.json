{"componentChunkName":"component---src-templates-blog-post-js","path":"/a4f5ba562def4c89e50365067823859bbeb87faf","result":{"data":{"site":{"siteMetadata":{"title":"보노보노의 평화로운 개발 이야기"}},"current":{"repository":{"post":{"__typename":"GitHub_Blob","oid":"a4f5ba562def4c89e50365067823859bbeb87faf","text":"# mssql 쿼리 팁 - 여러 행의 데이터를 한 칼럼에 담기\n\n- Title : mssql 쿼리 팁 - 여러 행의 데이터를 한 칼럼에 담기\n- Date : 2018-01-26\n- Category: Database\n\n<table class=\"half\">\n<thead>\n\t<tr><th>IDX</th><th>NAME </th></tr>\n</thead>\n<tbody>\n\t<tr><td>1</td><td>A</td></tr>\n\t<tr><td>1</td><td>B</td></tr>\n\t<tr><td>1</td><td>C</td></tr>\n\t<tr><td>2</td><td>B</td></tr>\n\t<tr><td>2</td><td>D</td></tr>\n</tbody>\n</table>\n\n위 테이블을 아래와 같이 출력하고 싶다.\n\n<table class=\"half\">\n<thead>\n\t<tr><th>IDX</th><th>NAME </th></tr>\n</thead>\n<tbody>\n\t<tr><td>1</td><td>A,B,C</td></tr>\n\t<tr><td>2</td><td>B,D</td></tr>\t\n</tbody>\n</table>\n\n<br/><br/>\n\n```sql\nSELECT\n\tDISTINCT IDX,\n\tSTUFF\n\t( (\n\t\tSELECT ',' + NAME FROM TB_NAME A WHERE A.IDX = B.IDX\n\t\tFOR XML PATH('')\n\t),1,1,'') AS NAME\nFROM TB_NAME B\n```\n\nSTUFF(STRING,1,1,'') - 맨 앞 문자 한개 제거\n\n# STUFF 함수\n\n[참고페이지](https://docs.microsoft.com/ko-kr/sql/t-sql/functions/stuff-transact-sql)\n\nSTUFF ( character_expression , start , length , replaceWith_expression )\n\n<table>\n<thead>\n\t<tr><th>인수</th><th>설명</th></tr>\n</thead>\n<tbody>\n\t<tr><td>start</td><td>삭제 및 삽입 시작 위치, 0, 음수면 NULL이 반환된다.</td></tr>\n\t<tr><td>length</td><td>삭제 할 문자 수 지정, 0, 음수면 NULL이 반환된다.</td></tr>\t\n\t<tr><td>replaceWith_expression </td><td>''이면 아무것도 삽입하지 않고 문자를 제거</td></tr>\t\n</tbody>\n</table>\n"}}},"previous":{"repository":{"post":{"__typename":"GitHub_Blob","oid":"43c62d138aba5719c8fa3bc79ecccce9865fb59c","text":"# 자바스크립트 단위테스트 시작하기\n\n- Title : 자바스크립트 단위테스트 시작하기\n- Date : 2018-01-27\n- Category: Nodejs\n\nmocha 자바스크립트 테스트 프레임워크로 단위테스트 시작하는 방법입니다.\n\n# 단위테스트(Unit Test)가 필요한 이유?\n\n프로그램을 작은 단위로 쪼개서 내가 짠 프로그램이 내가 원하는 결과대로 동작하는 지 테스트할 수 있다.  \n단위테스트를 거치면 프로그램의 안정성이 높아지며, 단위테스트를 믿고 리팩토링을 할 수 있다.\n\n자바스크립트로 짜여진 프로그램에서 오류를 찾을 때, 단위테스트를 거치지 않은 프로그램의 경우는 전체 흐름을 파악해가며 원인을 찾아야한다.  \n원인을 찾아 수정한다해도 이 결과가 어떤 이펙트를 가져올지 예상하기가 어려울 수 있다.\n\n# mocha 자바스크립트 테스트 프레임워크\n\n## 1. 셋팅하기 (Windows8)\n\nmocha는 node.js가 기반인 프레임워크이기 때문에 node.js가 설치되어있어야 한다.  \n설치 후 cmd 창에 node --version 이라고 쳐서 버전 정보가 제대로 나오면 설치가 잘 된 것이다.\n\ncmd 창에 아래와 같이 입력하면 mocha 사용 준비 완료!\n\n```\n$npm install -g mocha\n```\n\n그리고 Assertion Library인 Chai를 추가해보자. 작업 디렉토리에서 아래를 cmd 창에서 실행한다.\n\n```\n$nbm install chai\n```\n\n그 결과, node_moduls 폴더가 생성된다.\n\n## 2. 사용하기\n\n[InspiredJW님의 티스토리 블로그를 참고했습니다!](http://inspiredjw.com/entry/Mocha-%EB%A1%9C-%ED%95%98%EB%8A%94-JavaScript-Testing).\n\n모카는 test 디렉토리에 있는 파일을 실행하기 때문에, 테스트 코드는 이 디렉토리 안에 위치시켜야한다.\n\nJsStudy/JsStudy.js\n\n```javascript\n\"use strict\";\nexports.foo = (a, b) => {\n  if (typeof a !== \"number\" || typeof b !== \"number\") return false;\n  return a * b;\n};\nexports.bar = callback => {};\n```\n\nJsStudy/test/JsStudyTest.js\n\n```javascript\n\"use strict\";\n\nlet chai = require(\"chai\");\nlet should = chai.should();\nlet foo = require(\"../JsStudy\").foo;\n\ndescribe(\"Function Foo\", () => {\n  describe(\"with two number params\", () => {\n    it(\"should return product\", () => {\n      let result = foo(3, 4);\n      result.should.be.a(\"number\");\n      result.should.equal(12);\n    });\n  });\n});\n\ndescribe(\"with non-number params\", () => {\n  it(\"should return false\", () => {\n    let result = foo(3, null);\n    result.should.be.false;\n  });\n});\n```\n\n테스트 실행방법은 cmd 창에서 JsStudy 폴더로 이동한후, mocha 실행하기\n\n```\n$mocha\n```\n\n<span class=\"clr-grey\">\nAPI    \n- describe() : 테이스틔 이름을 지정하며, 중첩하여 사용할 수 있다. 테스트를 구분하는 section이며, 단위테스트 부분을 콜백으로 넘겨준다.\n- it() : 단위테스트의 이름을 작성하고 실제 실행되는 코드를 콜백(done)으로 넘겨준다.\n- befor() : 테스트 코드가 실행되기 전 한번 실행된다.\n- after() : 모든 테스트 코드가 실행된 후 한 번 실행된다.\n- beforeEach() : (테스트 코드가 여러개일 경우) 각각의 테스트 코드가 실행되기 전마다 실행된다.\n- afterEach() : (테스트코드가 여러개일 경우) 각각의 테스트 코드가 실행된 후마다 실행된다.\n- .a(type[,msg]) : 지정된 타입과 동일한지 리턴.\n- .equal(val[,msg]) : === var과 주어진 타켓이 같은지.\n- .false : 타켓 === false\n</span>\n"}}},"next":{"repository":{"post":{"__typename":"GitHub_Blob","oid":"e168a4db79259b30f63a6c9f23f8806832ac1c12","text":null}}}},"pageContext":{"id":"a4f5ba562def4c89e50365067823859bbeb87faf","previousPostId":"43c62d138aba5719c8fa3bc79ecccce9865fb59c","nextPostId":"e168a4db79259b30f63a6c9f23f8806832ac1c12"}},"staticQueryHashes":["2685952063","2841359383"]}