{"componentChunkName":"component---src-templates-blog-post-js","path":"/38350bdf91fec2dfe882ccaa625590845647701f","result":{"data":{"site":{"siteMetadata":{"title":"보노보노의 평화로운 개발 이야기"}},"current":{"repository":{"post":{"__typename":"GitHub_Blob","oid":"38350bdf91fec2dfe882ccaa625590845647701f","text":"# 백준 벌집 Java\n\n- Title : 백준 벌집 Java\n- Date : 2019-12-09\n- Category: 알고리즘 풀이\n\n# 문제 설명\n\n(https://www.acmicpc.net/problem/2292)[https://www.acmicpc.net/problem/2292]\n\n# 내 풀이\n\n규칙을 찾아보았다.\n\n- 1 (1개) => 1칸\n- 2 ~ 7 (6개) => 2칸\n- 8 ~ 19 (12개) => 3칸\n- 20 ~ 37 (18개) => 4칸\n\n즉, 방의 수를 1부터 6\\*count(1,2,3..) 값을 누적시켰을 때 방의 수가 N보다 크거나 같아지는 순간이 답이 된다.\n\n```java\nimport java.util.Scanner;\n\npublic class Main {\n\tpublic static void main(String[] args) {\n\t\tScanner sc = new Scanner(System.in);\n\t\tint N = sc.nextInt();\n\t\tSystem.out.println(Solution(N));\n\t}\n\n\tpublic static int Solution(int N) {\n\t\tint room = 1;\n\t\tint count = 1;\n\t\twhile (N > room) {\n\t\t\troom += 6 * (count++);\n\t\t}\n\t\treturn count;\n\t}\n}\n```\n"}}},"previous":{"repository":{"post":{"__typename":"GitHub_Blob","oid":"0b7c34714ce4c87957b97c6cb4a503aa70efdaf6","text":"# 백준 설탕배달 Java\n\n- Title : 백준 설탕배달 Java\n- Date : 2019-12-09\n- Category: 알고리즘 풀이\n\n# 문제 설명\n\n상근이는 요즘 설탕공장에서 설탕을 배달하고 있다. 상근이는 지금 사탕가게에 설탕을 정확하게 N킬로그램을 배달해야 한다. 설탕공장에서 만드는 설탕은 봉지에 담겨져 있다. 봉지는 3킬로그램 봉지와 5킬로그램 봉지가 있다.\n\n상근이는 귀찮기 때문에, 최대한 적은 봉지를 들고 가려고 한다. 예를 들어, 18킬로그램 설탕을 배달해야 할 때, 3킬로그램 봉지 6개를 가져가도 되지만, 5킬로그램 3개와 3킬로그램 1개를 배달하면, 더 적은 개수의 봉지를 배달할 수 있다.\n\n상근이가 설탕을 정확하게 N킬로그램 배달해야 할 때, 봉지 몇 개를 가져가면 되는지 그 수를 구하는 프로그램을 작성하시오.\n\n**입력**  \n첫째 줄에 N이 주어진다. (3 ≤ N ≤ 5000)\n\n**출력**  \n상근이가 배달하는 봉지의 최소 개수를 출력한다. 만약, 정확하게 N킬로그램을 만들 수 없다면 -1을 출력한다.\n\n# 내 풀이\n\n최소 개수의 봉지를 구해야해서 5킬로그램 봉지부터 계산한다.\n\n```java\nimport java.util.Scanner;\n\npublic class Main {\n\tpublic static void main(String[] args) {\n\t\tScanner sc = new Scanner(System.in);\n\t\tint N = sc.nextInt();\n\t\tSystem.out.println(Solution(N));\n\t}\n\n\tpublic static int Solution(int N) {\n\t\tint c = N / 5;\n\t\tint r = N % 5;\n\t\twhile (c >= 0 && r > 0) {\n\t\t\tif (r % 3 == 0) {\n\t\t\t\tc += r/3;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tc--;\n\t\t\tr += 5;\n\t\t}\n\t\tif (c < 0) return -1;\n\t\treturn c;\n\t}\n}\n```\n"}}},"next":{"repository":{"post":{"__typename":"GitHub_Blob","oid":"d473c7d17840e5d9159d068cd069263b08e30591","text":"# 프로그래머스 2xn 타일링 Javascript\n\n- Title : 프로그래머스 2xn 타일링 Javascript\n- Date : 2019-11-29\n- Category: 알고리즘 풀이\n\n# 문제 설명\n\n가로 길이가 2이고 세로의 길이가 1인 직사각형모양의 타일이 있습니다. 이 직사각형 타일을 이용하여 세로의 길이가 2이고 가로의 길이가 n인 바닥을 가득 채우려고 합니다. 타일을 채울 때는 다음과 같이 2가지 방법이 있습니다.\n\n타일을 가로로 배치 하는 경우  \n타일을 세로로 배치 하는 경우\n\n직사각형의 가로의 길이 n이 매개변수로 주어질 때, 이 직사각형을 채우는 방법의 수를 return 하는 solution 함수를 완성해주세요.\n\n# 제한 사항\n\n- 가로의 길이 n은 60,000이하의 자연수 입니다.\n- 경우의 수가 많아 질 수 있으므로, 경우의 수를 1,000,000,007으로 나눈 나머지를 return해주세요.\n\n# 풀이\n\n문제를 보는 순간 규칙이 있을 거 같다는 생각을 했다.  \n근데 그 규칙 찾는 데 한참 걸렸다.. ㅠ\\_\\_ㅠ\n\n결론부터 말하자면, 이 문제의 점화식은 **DP[N] = DP[N-1][n-2]** 다. 그리고 n이 최대 60000 이므로 재귀를 쓰는 것보다 메모이제이션을 이용하는 게 낫다고 판단했다.\n\n아래는 점화식 도출 과정이다.\n\n- n = 0, 1개\n- n = 1, 1개\n- n = 2, 2개 (DP[1] + DP[0])\n- n = 3, 3개 (DP[2] + DP[1])\n- n = 4, 4개 (DP[3] + DP[2])\n- ....\n\n```javascript\nfunction solution(n) {\n  const memo = Array(n + 1).fill(0);\n  memo[0] = 1;\n  memo[1] = 1;\n  for (let i = 2; i < n + 1; i++) {\n    memo[i] = (memo[i - 1] + memo[i - 2]) % 1000000007;\n  }\n  return memo[n];\n}\n```\n"}}}},"pageContext":{"id":"38350bdf91fec2dfe882ccaa625590845647701f","previousPostId":"0b7c34714ce4c87957b97c6cb4a503aa70efdaf6","nextPostId":"d473c7d17840e5d9159d068cd069263b08e30591"}},"staticQueryHashes":["2685952063","2841359383"]}