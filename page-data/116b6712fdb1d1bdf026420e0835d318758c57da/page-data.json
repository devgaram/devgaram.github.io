{"componentChunkName":"component---src-templates-blog-post-js","path":"/116b6712fdb1d1bdf026420e0835d318758c57da","result":{"data":{"site":{"siteMetadata":{"title":"보노보노의 평화로운 개발 이야기"}},"current":{"repository":{"post":{"__typename":"GitHub_Blob","oid":"116b6712fdb1d1bdf026420e0835d318758c57da","text":"# 안드로이드 에러 - setText의 파라미터로 숫자를 전달했을 때\n\n- Title : 안드로이드 에러 - setText의 파라미터로 숫자를 전달했을 때\n- Date : 2019-03-10\n- Category: Android\n\nsetText의 파라미터로 숫자를 전달했을 때 발생되는 에러로그\n\n에러로그\n\n```\nandroid.content.res.Resources$NotFoundException: String resource ID #0x1f40\nat android.content.res.Resources.getText(Resources.java:354)\nat android.widget.TextView.setText(TextView.java:6133)\nat org.androidtown.mybudgeter.pager.ExpenditureRecyclerAdapter.onBindViewHolder(ExpenditureRecyclerAdapter.java:30)\nat org.androidtown.mybudgeter.pager.ExpenditureRecyclerAdapter.onBindViewHolder(ExpenditureRecyclerAdapter.java:16)\n....\n```\n\n```java\nexpenditureAmount.setText(currentExpenditure.getAmount());\n```\n\n에러로그는 위와 같은 코드에서 발생된 것으로, setText에 Integer 값을 전달했을 때 경우이다.  \nInteger값을 String으로 변환해주면 에러가 수정된다.\n\n```java\nexpenditureAmount.setText(Integer.toString(currentExpenditure.getAmount()));\n```\n"}}},"previous":{"repository":{"post":{"__typename":"GitHub_Blob","oid":"c30c7b633b6e2cf9a63592eefd001cac75a67c14","text":"# 자바 API 정리\n\n- Title : 자바 API 정리\n- Date : 2019-06-27\n- Category: Java\n\nJAVA 공부하면서 알게 된 API 정리한 글 입니다.\n\n# java.lang.String\n\n## compareTo\n\n```java\npublic int compareTo(String anotherString)\n```\n\n두 개의 String을 사전적으로 비교하는 함수다.\n\n- 내부적으로\n\n```java\nthis.charAt(k) - anotherString.charAt(k)\n```\n\nString을 구성하는 char의 유니코드 값으로 비교를 한다.\n\n```java\nthis.length()-anotherString.length()\n```\n\n각 String의 각 char index의 값이 모두 동일하면, 길이가 더 짧은 스트링이 사전적으로 앞선다.\n\n**사용법**\n\n```java\nint returnVal = string1.compareTo(string2);\n```\n\nreturnVal = 0, string1 == string2  \nreturnVal > 0, string1 > string2 사전적으로 string1이 string2보다 뒤에 있다는 뜻.  \nreturnVal < 0, string1 < string2 사전적으로 string1이 string2보다 앞에 있다는 뜻.\n\n---\n"}}},"next":{"repository":{"post":{"__typename":"GitHub_Blob","oid":"d17108af7f9cb5a3406d3826c036d4f5719706ee","text":"# mssql 쿼리 팁 - group by 없이 카운트하는 방법 & 페이징 처리를 위한 전체 레코드 갯수 구하기\n\n- Title : mssql 쿼리 팁 - group by 없이 카운트하는 방법 & 페이징 처리를 위한 전체 레코드 갯수 구하기\n- Date : 2019-03-07\n- Category: Database\n\n프로시저 속도 개선하는 과정에서 배웠던 sql 팁으로, group by 없이 칼럼과 함께 갯수를 출력하는 방법과\n페이징 처리에 필요한 전체 레코드 갯수를 구하는 방법에 대한 내용입니다.\n\n관리자 페이지 유지보수 중에 한 프로시저의 실행속도가 굉장히 느린 것을 발견했다.  \n실무자에게 확인해 본 결과 페이지 넘길 때마다 기본 일분은 기다린다는 답을 받았다.  \n이 프로시저는 어떤 정보를 프로시저 내에서 페이징 처리를 하여 조회하는 쿼리로 4개의 left outer join 과 복잡한 case 조건의 where 절을 가졌다.  \n심지어 left join 되는 테이블은 조건과 그룹 처리를 하는 서브쿼리로 구성되었다.\n\n# Group by 없이 칼럼과 함께 갯수 출력하기\n\n<span class=\"clr-grey\">\n처음에는 left join 때문이라고 생각했으나 아니였다.      \n진짜 원인은 select 절에서 각 그룹의 갯수를 조회하는 서브쿼리의 문제였다.    \n이를 left outer join 으로 바꿔봤지만 해결되지 않았고 Group by 처리하자니 조회할 컬럼 값이 너무 많았다.    \n고민하다가 검색을 통해 좋은 방법을 찾았다.  \n</span>\n\n```sql\ncount(yy) over (partition by xx)\n```\n\n위는 Group by 없이 컬럼값들과 함께 갯수를 출력할 수 있는 쿼리이다.\n\n```sql\ncount(seq) over (partition by groupSeq)\n```\n\n이를 참고해 select에서 서브쿼리로 조회하던 방식을 위와 같이 수정했더니 실행시간이 13초에서 3초 정도로 줄었다\n\n# 페이징 처리에 필요한 전체 레코드 갯수를 구하는 방법\n\n[전체갯수구하기 참고 블로그](https://m.blog.naver.com/monkeychoi/220629982940)\n\n<span class=\"clr-grey\">\n하지만 아직 한국인을 만족시킬 속도가 아니였기에 속도를 잡아먹는 또 다른 원인을 찾아보았다.     \n바로 전체 레코드 갯수를 구하는 부분이었다.  페이징처리를 위해서 전체 레코드 갯수를 구하는 건 필수였기에 해당 쿼리를 빼는 거는 불가능했다.   \n</span>\n\n기존 페이징 쿼리\n\n```sql\n;WITH myCTE AS\n(\n\tSELECT\n\t\tCOUNT(*) OVER() AS TOTALCNT,\t-- 이 쿼리때문에 느려짐\n\t\tROW_NUMBER() OVER (ORDER BY GroupSeq DESC, seq ASC) AS ROWNUM,\n\t\t*\n\tFROM DBO.MY_BOARD\n)\nSELECT * FROM myCTE WHERE ROWNUM BETWEEN (@I_PAGE -1) * @I_PAGESIZE) + 1 AND @I_PAGE * @I_PAGESIZE\n```\n\n수정 후 쿼리\n\n```sql\n;WITH myCTE AS\n(\n\tSELECT\n\t\tROW_NUMBER() OVER (ORDER BY GroupSeq DESC, seq ASC) AS ROWNUM,\n\t\t*\n\tFROM DBO.MY_BOARD\n)\nSELECT *, (SELECT COUNT(*) FROM myCTE) AS TOTALCNT\nFROM myCTE WHERE ROWNUM BETWEEN (@I_PAGE -1) * @I_PAGESIZE) + 1 AND @I_PAGE * @I_PAGESIZE\n```\n\n위와 같이 쿼리를 수정한 결과 실행시간이 3초에서 1초로 줄었다.\n"}}}},"pageContext":{"id":"116b6712fdb1d1bdf026420e0835d318758c57da","previousPostId":"c30c7b633b6e2cf9a63592eefd001cac75a67c14","nextPostId":"d17108af7f9cb5a3406d3826c036d4f5719706ee"}},"staticQueryHashes":["2685952063","2841359383"]}