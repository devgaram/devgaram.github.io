{"componentChunkName":"component---src-templates-blog-post-js","path":"/40f40953b7ab43bf93781786a87871d92de6d63c","result":{"data":{"site":{"siteMetadata":{"title":"보노보노의 평화로운 개발 이야기"}},"current":{"repository":{"post":{"__typename":"GitHub_Blob","oid":"40f40953b7ab43bf93781786a87871d92de6d63c","text":"# React 기반을 다져보자!\n\n- Title : React 기반을 다져보자!\n- Date : 2020-01-07\n- Category: React\n\n<span class=\"clr-grey\">새로 알게 된 내용이 있으면 계속해서 추가할 예정입니다. </span>\n\n> **참조 링크** <br/>\n>\n> - [리액트 공식 문서](https://reactjs-kr.firebaseapp.com/docs/hello-world.html)\n\n# JSX\n\n```javascript\nconst element = <h1>Hello, world</h1>;\nReactDOM.render(\n  element,\n  document.getElementById(\"root\") // ID가 root인 노드에 렌더링하겠다!\n);\n```\n\n- JSX는 화면에서 볼 수 있는 내용에 대한 설명인 <code>React elements</code> 객체를 만든다.\n- 표현식이므로 if문, for 반복, 변수 할당, 매개 변수로 사용 가능하다.\n- Babel은 JSX를 <code>React.createElement()</code> 호출로 컴파일합니다.\n- 리액트 요소는 <code>Immutable Objects</code>라서 한번 만들면 그 자식이나 속성을 변경할 수 없다. UI를 업데이트 하려면 새로운 요소를 만들어서 <code>ReactDOM.render()</code>에 전달해야한다.\n\n> **Note:** <br/>\n> 실제로 대부분의 React 어플리케이션은 ReactDOM.render() 를 한번만 호출한다. -> state를 이용한다.\n\n# 순수 함수란?\n\n순수 함수는 입력을 변경하지않으며 항상 동일한 입력에 대해 동일한 결과를 반환하는 함수다.\n\n**순수 함수**\n\n```javascript\nfunction sum(a, b) {\n  return a + b;\n}\n```\n\n**순수 함수가 아님**\n\n```javascript\nfunction withdraw(account, amount) {\n  account.total -= amount;\n}\n```\n\n# Props\n\n- 부모 컴포넌트에서 자식 컴포넌트로 전달된 데이터다.\n- Props는 읽기전용이므로 수정할 수 없다.\n- 모든 React 컴포넌트는 props와 관련한 동작을 할 때 <code>순수 함수</code>처럼 동작해야한다.\n\n# State\n\n## 1. 클래스 컴포넌트에서 state 사용하기\n\n```javascript\nclass Clock extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = { date: new Date() };\n  }\n\n  // mounting : Clock 이 DOM에 최초로 렌더링 될 때\n  componentDidMount() {}\n\n  // unmounting : DOM에서 Clock 을 삭제했을 때\n  componentWillUnmount() {}\n  render() {\n    return (\n      <div>\n        <h1>Hello, world!</h1>\n        <h2>It is {this.state.date.toLocaleTimeString()}.</h2>\n      </div>\n    );\n  }\n}\n\nReactDOM.render(<Clock />, document.getElementById(\"root\"));\n```\n\n## 2. 함수형 컴포넌트에서 state 사용하기\n\n```javascript\nimport React, { useEffect, useState } from \"react\";\n// ...\n\nconst PetSitterApplyContainer = () => {\n  const [current, setCurrent] = useState(0); // 인자는 초기값\n\n  // ...\n\n  // 라이프사이클 훅\n  useEffect(() => {\n    function handleResize() {\n      dispatch(resize(window.innerWidth, window.innerHeight));\n    }\n    window.addEventListener(\"resize\", handleResize);\n  });\n\n  const next = () => {\n    setCurrent(current + 1);\n  };\n\n  const prev = () => {\n    setCurrent(current - 1);\n  };\n\n  return <PetSitterApply current={current} />;\n};\n```\n\n- state는 React 컴포넌트가 유저 액션, 네트워크 응답, 기타 등등에 대한 응답으로 시간 경과에 따라 출력을 변경할 수 있게 한다.\n- State는 로컬이며 캡슐화되어있다 : 부모 컴포넌트나 자식 컴포넌트는 특정 컴포넌트의 state 유무를 알 수 없으며 해당 컴포넌트가 함수나 클래스로 선언되었는 지 알 수 없기 때문\n- <code>componentDidMount() 훅</code> : 컴포넌트 출력이 DOM에 렌더링 된 이후 동작한다.\n- <code>componentWillUnmount() 훅</code> : 컴포넌트가 DOM에서 삭제된 이후 동작한다.\n- <code>useEffect</code> : 리액트 컴포넌트가 렌더링 될 때마다 특정 작업을 수행하도록 설정 할 수 있는 Hook으로 클래스형 컴포넌트의 componentDidMount 와 componentDidUpdate 를 합친 형태다.\n\n## 3. State 바르게 사용하기\n\n- State를 직접 수정하지말기\n\n```javascript\n// Wrong\nthis.state.comment = \"Hello\";\n\n// Correct\nthis.setState({ comment: \"Hello\" });\n```\n\n- this.props 및 this.state가 비동기로 업데이트될 수 있다는 것을 고려하기\n\n```javascript\n// Wrong\nthis.setState({\n  counter: this.state.counter + this.props.increment\n});\n\n// Correct : 이전 state를 인수로 받음\nthis.setState((prevState, props) => ({\n  counter: prevState.counter + props.increment\n}));\n```\n\n# 하향식(top-down) 혹은 단방향(unidirectional) 데이터 흐름\n\n- 모든 state는 항상 특정 컴포넌트가 가지며, 해당 state에서 파생된 모든 데이터 또는 UI는 트리의 컴포넌트 <code>아래(below)</code>에만 영향을 미친다.\n- 컴포넌트는 자신의 state를 자식 컴포넌트에 props 로 내려줄 수 있다. => <code>컴포넌트 트리 == props의 폭포</code>\n\n# Refs\n\n일반적인 리액트 데이터 플로우에서 부모 컴포넌트와 자식 컴포넌트는 <code>props</code>를 통해서만 통신할 수 있어서 자식 컴포넌트를 수정하려면 새로운 <code>props</code>와 함께 다시 렌더링해야한다. 그럼 일반적인 데이터 플로우 밖에서 자식 컴포넌트(컴포넌트 인스턴스 or DOM)에 직접 접근하려면 어떻게 해야할까? <code>Refs</code>를 사용하면 되지만 공식문서에서는 Refs 보다는 state를 이용하기로 권장한다.\n\n```javascript\nclass CustomTextInput extends React.Component {\n  constructor(props) {\n    super(props);\n    this.focusTextInput = this.focusTextInput.bind(this);\n  }\n\n  focusTextInput() {\n    // Explicitly focus the text input using the raw DOM API\n    this.textInput.focus();\n  }\n\n  render() {\n    // Use the `ref` callback to store a reference to the text input DOM\n    // element in an instance field (for example, this.textInput).\n    return (\n      <div>\n        <input\n          type=\"text\"\n          ref={input => {\n            this.textInput = input;\n          }}\n        />\n        <input\n          type=\"button\"\n          value=\"Focus the text input\"\n          onClick={this.focusTextInput}\n        />\n      </div>\n    );\n  }\n}\n```\n\n- React는 컴포넌트가 마운트될 때 DOM 요소와 함께 ref 콜백을 호출하며 언마운트될 때 null 과 함께 호출한다. ref 콜백은 componentDidMount 나 componentDidUpdate 라이프사이클 훅 전에 호출된다.\n- ref 속성을 HTML 요소에서 사용하면, ref 콜백은 기본 DOM 요소를 인수로 받는다.\n\n> Refs는 언제 사용하면 좋을까?\n>\n> - input/textarea 포커스 제어, 텍스트 선택, 미디어 재생을 관리할 때\n> - 명령형 애니메이션을 발동시킬 때\n> - 써드 파티 DOM 라이브러리를 통합할 때\n"}}},"previous":{"repository":{"post":{"__typename":"GitHub_Blob","oid":"3c55417e429710884ade0d6c7bca7c149081a2a3","text":"# 알고리즘 개념 잡자 - 재귀와 동적 프로그래밍\n\n- Title : 알고리즘 개념 잡자 - 재귀와 동적 프로그래밍\n- Date : 2020-01-09\n- Category: Algorithm\n\n> 참고 <br/>\n>\n> - [코딩 인터뷰 완전분석](https://www.aladin.co.kr/shop/wproduct.aspx?ItemId=115116545) 재귀와 동적 프로그래밍\n> - [Geeksforgeeks 바로가기](https://www.geeksforgeeks.org/overlapping-subproblems-property-in-dynamic-programming-dp-1/)\n\n# 동적 프로그래밍\n\n- 주어진 문제를 부분 문제로 나눠 값을 계산하는 것\n- 중복되는 계산을 막기 위해 부분 문제의 결과 값을 저장함 - 메모이제이션(Memoization)과 타뷸레이션(Tabulation)\n\n## 메모이제이션(Memoization)과 타뷸레이션(Tabulation)\n\n- 메모이제이션 : 하향식 접근법 (Top Down) - 재귀적\n  - 테이블을 만들고 NIL(예, -1) 값을 넣음\n  - 서브 문제의 결과값을 구할 때, 먼저 테이블 검색\n  - 계산된 값이 있으면 얘를 리턴\n  - NIL이면 계산 실행하여 계산 결과를 테이블에 저장\n  - 요구가 있을 때 채워지므로 테이블에 데이터가 다 채워지지 않을 수도 있음\n- 타뷸레이션 : 상향식 접근법 (Bottom Up) - 순환적\n  - 테이블의 마지막 요소를 반환하는 구조\n  - 첫번째부터 전체가 채워지는\n\n## DP의 2가지 속성\n\n모든 DP 문제는 Overlapping subproblems 속성을 만족하고 대부분의 클래식 DP 문제는 Optimal Substructure 속성을 만족한다.\n\n**1. overlapping subproblems** <br/><br/>\n\n- 부분 문제들이 공통으로 겹치는 부분이 있는 지?<br/>\n\n  > <span class=\"clr-grey\">우리가 메모이제이션이나 타뷸레이션을 사용하는 이유는 부분 문제의 결과값을 저장해놔서 나중에 이를 활용하려고 사용하죠. 근데 겹치는 부분 문제가 없으면?? 이게 필요가 없음.</span>\n\n- 동적 프로그래밍과 분할 정복\n  - 문제를 나누는 방식에 차이가 있음 <br/><br/>\n  - 피보나치<br/>\n    ![피보나치](https://raw.githubusercontent.com/devgaram/TIL/master/Algorithm/images/2020-01-10-img/2.png)\n  - 이진탐색 <br/>\n    ![이진탐색](https://raw.githubusercontent.com/devgaram/TIL/master/Algorithm/images/2020-01-10-img/1.png)\n\n<br/>\n\n**2. Optimal Substructure** <br/>\n\n- 문제의 답을 부분 문제의 답에서 구할 수 있는 가?\n- 최단 경로 vs 최장 경로<br/>\n  - 경로안에 무수히 많은 경로가 있을 때, 중간 정점들이 각각 최단이 된다면 이를 모든 이은 경로 또한 최단이 된다. <br/><br/>\n    ![경로](https://raw.githubusercontent.com/devgaram/TIL/master/Algorithm/images/2020-01-10-img/3.gif)\n    - q -> t 최단 : q -> r + r -> t\n    - q -> t 최장 : q -> s -> t -> r + r -> q -> s -> t\n\n## 문제 푸는 방법\n\n**1. DP 문제인가?**\n\n- DP의 2가지 속성으로 판단하기\n\n**2. 상태 찾기**\n\n- 서브 문제마다 값이 달라지는 변수 찾기\n- 각 서브 문제를 구별하는 값\n- 파라미타들\n- 적을 수록 좋다.\n- DP(상태) = 결과값(예, 최고 이익, 경우의 수..)\n\n**3. 재귀 방법 알아내기 == 상태들의 관계 알아내기** <br/>\n\n- state(n) = state(n-1) + state(n-3) + state(n-5)\n\n**4. 메모이제이션과 타뷸레이션 쓰기**\n\n# 8.1 트리플 스텝\n\n어떤 아이가 n개의 계단을 오른다. 한 번에 1계단 오르기도 하고 2계단이나 3계단을 오르기도 한다. 계단을 오르는 방법이 몇 가지가 있는지 계산하는 메서드를 구현하라.\n\n- Step 1 : DP 문제인지 판별하기\n  - 느낌..\n- Step 2 : 부분 문제마다 값이 달라지는 변수 찾기\n  - N : 계단의 개수 => 매개변수\n  - DP[N] = N을 만족하는 경우의 수\n- Step 3 : 재귀 방법을 알아내기\n  - 조정할 수 있는 거, 오를 수 있는 계단 개수져\n  - upStair(n) = (n - 1) || (n - 2) || (n - 3)\n  - upStair(n) = (n - 1) + (n - 2) + (n - 3)\n- Step 4 : 메모이제이션, 타뷸레이션\n\n```cpp\n#include <iostream>\n#include <vector>\n\nusing namespace std;\n\nint solution(int n, vector<int>& memo) {\n  if (n < 0) return 0;\n  if (n == 0) return 1;\n  if (memo[n] > -1) return memo[n];\n  memo[n] = solution(n - 1, memo) + solution (n - 2, memo) + solution (n - 3, memo);\n  return memo[n];\n}\n\nint solution_BU(int n) {\n  vector<int> dp(n+1, -1);\n  dp[0] = 1;\n  dp[1] = 1;\n  dp[2] = 2;\n  for (int i=3; i<=n; i++) {\n    dp[i] = dp[i-1] + dp[i-2] + dp[i-3];\n  }\n  return dp[n];\n}\n\nint main(){\n  int n = 10;\n  vector<int> memo(n+1, -1);\n  std::cout << solution(n, memo) << \",\";\n  std::cout << solution_BU(n) << std::endl;\n  return 0;\n}\n```\n\n# 8.11 코인\n\n쿼터(25센트), 다임(10센트), 니켈(5센트), 페니(1센트)의 네 가지 동전이 무한히 주어졌을 때, n센트를 표현하는 모든 방법의 수를 계산하는 코드를 작성하라\n\n- Step 1 : DP 문제인지 판별하기\n  - 10원 방법의 수는 5원 방법에 + 5를 더하는 것....\n  - 느낌..\n- Step 2 : 부분 문제마다 값이 달라지는 변수 찾기\n  - 부분 문제는 1원일 때 방법의 수... 2원일 때 방법의 수..3원일 때....N원일 때 방법의 수\n  - N : 구할 센트, => 매개변수, 상태값\n  - D[N] = 방법의 수\n- Step 3 : 재귀 방법을 알아내기\\*\\*\n  - 재귀의 방법을 조정할 수 있는 값은? 동전의 가치 (25, 10, 5, 1)\n  - D(n) = D(n - 25) + D(n - 10) + D(n - 5) + D(n - 1)\n- Step 4 : 메모이제이션, 타뷸레이션\n\n- 10센트 만들기 (D[0] = 1)\n  - 25센트로 : 0 0 0 0 0 0 0 0 0 0\n  - 10센트로 : 0 0 0 0 0 0 0 0 0 1\n  - 5센트로 : 0 0 0 0 1 0 0 0 0 2\n  - 1센트로 : 1 1 1 1 2 2 2 2 2 4\n\n```cpp\n#include <iostream>\n#include <vector>\n#include <string>\n\nusing namespace std;\n\nint coin[4] = {25, 10, 5, 1};\nint solution(int n, int index, vector<vector<int> >& memo) {\n  if (index >= 3) return 1;\n  if (memo[n][index] > 0) return memo[n][index];\n  int answer = 0;\n  for (int i=0; i * coin[index] <= n; i++) {\n    answer += solution(n - i * coin[index], index + 1, memo);\n  }\n\n  memo[n][index] = answer;\n  return memo[n][index];\n}\n\nint solution_BU(int n) {\n  vector<int> dp(n+1, 0);\n  dp[0] = 1;\n  for (int i=0; i<4; i++) {\n    for (int j=1; j<=n; j++) {\n      if (j - coin[i] >= 0) dp[j] += dp[j-coin[i]];\n    }\n  }\n  return dp[n];\n}\n\nint main() {\n  int n = 10;\n  vector<vector<int> > memo(n + 1, vector<int>(4, 0));\n  int answer = solution(n, 0, memo);\n  std::cout << answer << std::endl;\n  int answer_2 = solution_BU(n);\n  std::cout << answer << std::endl;\n  return 0;\n}\n```\n\n# 8.7 중복 없는 순열\n\n문자열이 주어졌을 때 모든 경우의 순열을 계산하는 메서드를 작성하라. 단, 문자는 중복되어 나타날 수 없다.\n\n# 8.9 괄호\n\nn-쌍의 괄호로 만들 수 있는 모든 합당한(괄호가 적절히 열리고 닫힌) 조합을 출력하는 알고리즘을 구현하라\n\n```cpp\n#include <string>\n#include <vector>\n#include <iostream>\n\nusing namespace std;\nvoid fnc(string result, int cur, int dep, int n, vector<string>& answer) {\n  if (cur < 0) return;\n  if (cur > 0 && n - dep < cur) return;\n  if (cur == 0 && dep == n) {\n    answer.push_back(result);\n    return;\n  }\n  fnc(result + \"(\", cur + 1, dep + 1, n, answer);\n  fnc(result + \")\", cur - 1, dep + 1, n, answer);\n}\n\nvector<string> solution(int n) {\n    vector<string> answer;\n    fnc(\"\", 0, 0, n*2, answer);\n    return answer;\n}\n\nvoid solution_2(int leftRem, int rightRem, int index, char *str, vector<string>& answer) {\n  if (leftRem < 0 || leftRem > rightRem) return;\n  if (leftRem == 0 && rightRem == 0) {\n    answer.push_back(str);\n    return;\n  }\n  str[index] = '(';\n  solution_2(leftRem - 1, rightRem, index+1, str, answer);\n\n  str[index] = ')';\n  solution_2(leftRem, rightRem - 1, index + 1, str, answer);\n}\n\nint main() {\n  int n;\n  cout << \"input:\";\n  cin >> n;\n  vector<string> answer = solution(n);\n  for (int i=0; i<answer.size(); i++) {\n    cout << answer[i] << \" \";\n  }\n  cout << endl;\n  vector<string> answer2;\n  char str[n*2];\n  solution_2(n, n, 0, str, answer2);\n  for (int i=0; i<answer2.size(); i++) {\n    cout << answer2[i] << \" \";\n  }\n\n  return 0;\n}\n\n```\n\n# 8.10 영역 칠하기\n\n화면(색이 칠해진 이차원 배열), 화면상의 한 지점, 새로운 색상이 주어졌을 때, 주어진 지점과 색이 같은 주변 영역을 새로운 색상으로 다시 칠하라\n\n- BFS\n\n```cpp\n#include <string>\n#include <vector>\n#include <iostream>\n#include <queue>\n\nusing namespace std;\n\nint row[4] = {0, 0, -1, 1};\nint col[4] = {-1, 1, 0, 0};\n\nint solution(vector<vector<int> >& screen, pair<int, int>& point, int newColor) {\n\n  queue<pair<int, int> > q;\n  int next_row, next_col;\n  int pre_color = screen[point.first][point.second];\n  q.push(point);\n  while (!q.empty()) {\n    pair<int, int> pop = q.front();\n    screen[pop.first][pop.second] = newColor;\n    q.pop();\n    for (int i=0; i<4; i++) {\n      next_row = pop.first + row[i];\n      next_col = pop.second + col[i];\n      if (next_row < 0 || next_col < 0) continue;\n      if (next_row >= screen.size() || next_col >= screen[0].size()) continue;\n      if (screen[next_row][next_col] == pre_color) {\n        q.push(make_pair(next_row, next_col));\n      }\n    }\n  }\n  return 0;\n}\n\nint main() {\n  // vector<vector<int> > screen({\n  //   vector<int>({1, 1, 2, 3}),\n  //   vector<int>({2, 1, 2, 3}),\n  //   vector<int>({1, 1, 2, 2}),\n  //   vector<int>({2, 2, 2, 1})\n  // });\n  /*\n  1 2 2 3\n  2 1 2 3\n  1 1 2 2\n  2 2 2 1\n  */\n vector<vector<int> > screen(4, vector<int>(4));\n  screen[0][0] = 1;\n  screen[0][1] = 2;\n  screen[0][2] = 2;\n  screen[0][3] = 3;\n\n  screen[1][0] = 2;\n  screen[1][1] = 1;\n  screen[1][2] = 2;\n  screen[1][3] = 3;\n\n  screen[2][0] = 1;\n  screen[2][1] = 1;\n  screen[2][2] = 2;\n  screen[2][3] = 2;\n\n  screen[3][0] = 2;\n  screen[3][1] = 2;\n  screen[3][2] = 2;\n  screen[3][3] = 1;\n\n  pair<int, int> point = make_pair(1, 2);\n  for (int i=0; i<screen.size(); i++) {\n    for (int j=0; j<screen[0].size(); j++)\n      std::cout << screen[i][j] << \" \";\n    std::cout << std::endl;\n  }\n  solution(screen, point, 0);\n  std::cout << std::endl;\n  for (int i=0; i<screen.size(); i++) {\n    for (int j=0; j<screen[0].size(); j++)\n      std::cout << screen[i][j] << \" \";\n    std::cout << std::endl;\n  }\n  return 0;\n}\n```\n\n# 8.14 불린값 계산\n\n0(false), 1(true), &(AND), |(OR), ^(XOR)으로 구성된 불린 표현식과 원하는 계산 결과(불린값)이 주어졌을 때, 표현식에 괄호를 적절하게 추가하여 그 값이 원하는 결과값과 같게 만들 수 있는 모든 경우의 수 출력하기\n\n출력 예시\n\n- countEval(\"1^0|0|1\", false) -> 2개\n- countEval(\"0&0&0&1^1|0\", true) -> 10개\n\n- Step 1 : DP 문제인지 판별하기\n  - 뭔가.. 적절하게 조합해서 모든 경우 구하는 거라서.. dp같네..?\n- Step 2 : 부분 문제마다 값이 달라지는 변수 찾기\n  - 음.. 전체 수식을 쪼개니깐 수식이 부분문제마다 달라지넵, 매개변수로 쪼개진 수식을 보내야겠댜~\n- Step 3 : 재귀 방법을 알아내기\\*\\*\n  - 괄호를 추가한다라..\n  - 1^0|0|1 예시로 보면..\n  - 1 ^ (0|0|1) 처럼 괄호를 추가하고 싶다는 건데..\n  - 그럼 ^ 같은 표현식을 기준으로 왼쪽 오른쪽 나눠어..\n  - D[수식] = D[왼쪽 수식] \\* D[오른쪽 수식]\n  - 서로 연관있으니깐 \\*곱하기\n  - 표현식은 index 1, 3, 5, 7 ..에 위치\n- Step 4 : 메모이제이션, 타뷸레이션\n\n1 ^ 0|0|1  \n1^0 | 0|1  \n1^0|0 | 1\n\n```cpp\n#include <string>\n#include <vector>\n#include <iostream>\n#include <map>\n\nusing namespace std;\n\nint fnc(std::string exp, bool r, map<string, int>& memo) {\n  if (exp.length() == 1) return exp[0] == (r ? '1' : '0') ? 1 : 0;\n  if (memo.count(exp + (r ? \"-1\" : \"-0\")) == 1) return memo[exp + (r ? \"-1\" : \"-0\")];\n  int sum = 0;\n  for (int i=1; i<exp.length(); i+=2) {\n    char e = exp[i];\n    string left = exp.substr(0, i);\n    string right = exp.substr(i+1);\n    if (e == '^') {\n      if (r) {  // true\n        sum += fnc(left, r, memo) * fnc(right, r^1, memo);\n        sum += fnc(left, r^1, memo) * fnc(right, r, memo);\n      } else {\n        sum += fnc(left, r, memo) * fnc(right, r, memo);\n        sum += fnc(left, r^1, memo) * fnc(right, r^1, memo);\n      }\n\n    } else if (e == '|') {\n      if (r) { // true\n        sum += fnc(left, r, memo) * fnc(right, r, memo);\n        sum += fnc(left, r, memo) * fnc(right, r^1, memo);\n        sum += fnc(left, r^1, memo) * fnc(right, r, memo);\n      } else { // false\n        sum += fnc(left, r, memo) * fnc(right, r, memo);\n      }\n    } else {\n      if (r) { // true\n        sum += fnc(left, r, memo) * fnc(right, r, memo);\n      } else { // false\n        sum += fnc(left, r, memo) * fnc(right, r, memo);\n        sum += fnc(left, r^1, memo) * fnc(right, r, memo);\n        sum += fnc(left, r, memo) * fnc(right, r^1, memo);\n      }\n\n    }\n  }\n  memo.insert(pair<string, int>(exp + (r ? \"-1\" : \"-0\") , sum));\n  return sum;\n}\n\nint countEval(std::string exp, bool result) {\n  map<string, int> map;\n  return fnc(exp, result, map);\n}\n\nint main() {\n  std::cout << countEval(\"1^0|0|1\", false) << std::endl;\n  std::cout << countEval(\"0&0&0&1^1|0\", true) << std::endl;\n  return 0;\n}\n```\n"}}},"next":{"repository":{"post":{"__typename":"GitHub_Blob","oid":"68ea80dc2124e8d2e6495a2ae7232f0d565aecf7","text":"# 운영체제 - 프로세스 동기화 1\n\n- Title : 운영체제 - 프로세스 동기화 1\n- Date : 2020-01-06\n- Category: 운영체제\n\n> 1. 프로세스 동기화란?\n> 2. 임계구역이란?\n> 3. 세마포란?\n\n# 프로세스 동기화(Process Synchronization, Thread Synchronization)\n\n프로세스들이 서로 공유하는 데이터에 동시에 접근할 때 순서대로 실행하여 **일관성있는 데이터를 유지**하는 것\n\n- Independent : 프로세스1과 프로세스2가 관계가 없을 때\n- Cooperating : 다른 프로세스에게 영향을 미치거나 다른 프로세스로부터 영향을 받을 때\n- 프로세스 간 통신 : 전자 우편, 파일 전송\n- 프로세스 간 자원 공유 : 메모리 상의 자료, 데이터베이스 등\n- 실생활 예 : 명절 기차표 예약, 대학 온라인 수강신청, 실시간 주식 거래\n\n## 프로세스/쓰레드 동기화를 하려면?\n\n- 임계구역 문제 해결(틀린 답이 나오지 않도록)\n- 프로세스 실행 순서 제어(원하는 대로)\n- busy wait 등 비효율성은 제거\n\n## 동기화 도구\n\n- 세마포(Semaphores)\n- 모니터(Monitors)\n- Misc.\n\n## 은행 계좌 예시\n\n아래의 코드는 공통 변수(balance)에 대해 동시 업데이트를 수행하여 0이 아닌 잘못된 결과값이 출력된다. 이는 한번에 한 쓰레드만 업데이트하도록 하여 해결할 수 있다. -> **임계구역 문제**\n\n```java\nclass Test {\npublic static void main(String[] args) throws InterruptedException {\n  BankAccount b = new\n  BankAccount();\n  Parent p = new Parent(b);\n  Child c = new Child(b);\n  p.start();\n  c.start();\n  p.join();\n  c.join();\n  System.out.println( \"\\nbalance = \" + b.getBalance());\n  }\n}\n```\n\n```java\nclass BankAccount {\n  int balance;\n  void deposit(int amount) {\n    int temp = balance + amount;\n    System.out.print(\"+\")\n    balance = temp; // 임계구역\n  }\n  void withdraw(int amount) {\n    int temp = balance - amount;\n    System.out.print(\"-\")\n    balance = temp; // 임계구역\n  }\n  int getBalance() {\n    return balance;\n  }\n}\n\n```\n\n```java\nclass Parent extends Thread {\n  BankAccount b;\n  Parent(BankAccount b) {\n    this.b = b;\n  }\n  public void run() {\n    for (int i=0; i<100; i++)\n    b.deposit(1000);\n  }\n}\nclass Child extends Thread {\n  BankAccount b;\n  Child(BankAccount b) {\n    this.b = b;\n  }\n  public void run() {\n    for (int i=0; i<100; i++)\n    b.withdraw(1000);\n  }\n}\n```\n\n# 임계구역 문제(The Critical-Section Problem)\n\n## 임계구역(Critical Section)\n\n여러 개의 스레드로 구성된 시스템에서 각 스레드가 같이 사용하는 변수, 테이블, 파일을 바꾸는 코드 영역을 임계구역이라고 한다. 예) 은행 계좌 예시에서 balance 값을 바꾸는 코드가 임계구역이다.\n\n## 임계구역 문제 해결방법 - 아래 3가지 다 만족해야한다!\n\n- Mutual exclusion (상호배타): 오직 한 쓰레드만 진입<br/>예) Parent 스레드가 임계구역 실행 중에는 Child 스레드는 임계구역에 들어갈 수 없다.\n- Progress (진행): 진입 결정은 유한 시간 내<br/>예) 임계구역에 어떤 스레드가 먼저 진입할지에 대한 결정은 유한 시간 내에 결정되어야 한다.\n- Bounded waiting (유한대기): 어느 쓰레드라도<br/>예) 어느 스레드라도 기다리고 있으면 유한한 시간내에 임계구역에 들어갈 수 있다.\n\n# 세마포 (Semaphore)\n\n동기화 문제 해결을 위한 소프트웨어 도구로 <span class=\"clr-note\">정수형 변수 + 두 개의 동작 (P, V)</span>으로 이루어져있다.\n\n## 동작\n\n- P: Proberen (test) → **acquire()**\n- V: Verhogen (increment) → **release()**\n\n## 구조\n\n- acquire() : 임계구역 전에 호출하여 value가 조건에 맞으면 **프로세스(or 스레드)를 list(큐)에 넣는다.** 큐에 들어간 프로세스는 다른 프로세스에 의해 release()가 호출될 때까지 Block된다. 즉 임계구역을 실행할 수 없게 된다. (Block이 된다 == Ready Queue에 들어가지 못한다)\n- release() : value 조건에 맞으면 list에서 **프로세스를 꺼내서 깨운다.** 깨운다는 것은 Ready Queue(cpu 서비스 기다리는 줄)에 넣는 다는 것을 의미한다.\n\n```java\nclass Semaphore {\n  int value; // number of permits\n\n  Semaphore(int value) {\n  ... }\n  void acquire() {\n    value--;\n    if (value < 0) {\n      add this process/thread to list;\n      block;\n    }\n  }\n  void release() {\n    value++;\n    if (value <= 0) {\n      remove a process P from list;\n      wakeup P;\n    }\n  }\n}\n\n```\n\n## 세마포의 사용 - 상호 배타(Mutual exclusion)\n\nsem.value = 1로 두어 임계구역에는 프로세스 한 개만 들어갈 수 있도록 한다.\n\n![process tree](https://raw.githubusercontent.com/devgaram/TIL/master/OperatingSystem/images/2020-01-06-img/1.png)<br/>\n\n아래 코드는 은행 계좌 예시의 BankAccount 클래스를 수정한 것으로 임계구역 문제를 해결한다.\n\n```java\nimport java.util.concurrent.Semaphore;\n\nclass BankAccount {\n  int balance;\n  Semaphore sem;\n  public BankAccount () {\n    this.sem = new Semaphore(1)\n  }\n  void deposit(int amount) {\n    try {\n      sem.acquire()\n    } catch(InterruptedException) {}\n\n    int temp = balance + amount;\n    System.out.print(\"+\")\n    balance = temp;\n    sem.release()\n  }\n  void withdraw(int amount) {\n    try {\n      sem.acquire()\n    } catch(InterruptedException) {}\n    int temp = balance - amount;\n    System.out.print(\"-\")\n    balance = temp;\n    sem.release()\n  }\n  int getBalance() {\n    return balance;\n  }\n}\n\n```\n\n1. Parent 프로세스가 deposit()을 호출하면 acquire() 메소드가 실행된다. 이는 value를 0으로 만드나 조건이 false라 바로 빠져나와 임계구역을 실행한다.\n2. 문맥 전환에 의해 Child 프로세스의 witdhdraw()가 호출되면 acquire()이 호출된다. value를 -1로 만들어 조건이 true가 되어 Child 프로세스는 큐에 들어가고 Block 된다. 즉, 임계구역을 못 간다.\n3. Parent 프로세스가 임계구역 실행을 완료한 후 release()를 호출하면 큐의 프로세스 하나를 뺀다. 즉, Child 프로세스를 깨워 Ready Queue로 보낸다.\n\n## 세마포의 사용 - 프로세스 실행 순서 제어(Ordering)\n\nCPU 스케줄링 알고리즘에 관련없이 P1에 들어간 S1 코드가 P2의 S2 코드보다 먼저 실행되게 하고 싶을 때? 세마포를 사용하자!\n\n![process tree](https://raw.githubusercontent.com/devgaram/TIL/master/OperatingSystem/images/2020-01-06-img/2.png)<br/>\n\n항상 입금이 먼저 되게 BankAccount 클래스를 수정해보자.\n\n```java\nimport java.util.concurrent.Semaphore;\n\nclass BankAccount {\n  int balance;\n  Semaphore sem;\n  Semaphore sem2;\n  public BankAccount () {\n    this.sem = new Semaphore(1);\n    this.sem2 = new Semaphore(0)\n  }\n  void deposit(int amount) {\n    try {\n      sem.acquire()\n    } catch(InterruptedException) {}\n\n    int temp = balance + amount;\n    System.out.print(\"+\")\n    balance = temp;\n    sem.release()\n    sem2.release()\n  }\n  void withdraw(int amount) {\n    try {\n      sem2.acquire()\n      sem.acquire()\n    } catch(InterruptedException) {}\n    int temp = balance - amount;\n    System.out.print(\"-\")\n    balance = temp;\n    sem.release()\n  }\n  int getBalance() {\n    return balance;\n  }\n}\n\n```\n\n이제 입출금 교대로 되게 BankAccount 클래스를 수정해보자.\n\n```java\nimport java.util.concurrent.Semaphore;\n\nclass BankAccount {\n  int balance;\n  Semaphore sem;\n  Semaphore dsem;\n  Semaphore wsem;\n  public BankAccount () {\n    this.sem = new Semaphore(1);\n    this.dsem = new Semaphore(0);\n    this.wsem = new Semaphore(0);\n  }\n  void deposit(int amount) {\n    try {\n      sem.acquire();\n    } catch(InterruptedException) {}\n\n    int temp = balance + amount;\n    System.out.print(\"+\")\n    balance = temp;\n    sem.release();\n    wsem.release();\n    try {\n      dsem.acquire();\n    } catch(InterruptedException) {}\n\n  }\n  void withdraw(int amount) {\n    try {\n      wsem.acquire();\n      sem.acquire();\n    } catch(InterruptedException) {}\n    int temp = balance - amount;\n    System.out.print(\"-\")\n    balance = temp;\n    sem.release();\n    dsem.release();\n  }\n  int getBalance() {\n    return balance;\n  }\n}\n\n```\n"}}}},"pageContext":{"id":"40f40953b7ab43bf93781786a87871d92de6d63c","previousPostId":"3c55417e429710884ade0d6c7bca7c149081a2a3","nextPostId":"68ea80dc2124e8d2e6495a2ae7232f0d565aecf7"}},"staticQueryHashes":["2685952063","2841359383"]}