{"componentChunkName":"component---src-templates-blog-post-js","path":"/e904a40fa0b358c66e6c794f773f77275fcba701","result":{"data":{"site":{"siteMetadata":{"title":"보노보노의 평화로운 개발 이야기"}},"current":{"repository":{"post":{"__typename":"GitHub_Blob","oid":"e904a40fa0b358c66e6c794f773f77275fcba701","text":"# [안드로이드] 안드로이드 ViewModel에 대해 알아보자\n\n- Title : [안드로이드] 안드로이드 ViewModel에 대해 알아보자\n- Date : 2019-01-07\n- Category: Android\n\n안드로이드 아키텍쳐 중 ViewModel 클래스에 대한 내용입니다.\n\n안드로이드 프레임워크는 액티비티와 프래그먼트와 같은 UI 컨트롤러의 라이프 사이클을 관리한다.\n\n![액티비티가 회전을 거쳐 끝날 때까지의 라이프 사이클](https://raw.githubusercontent.com/devgaram/TIL/master/Android/images/2019-01-07-img/viewmodel-lifecycle.png)  \n[ UI 컨트롤러 라이프 사이클과 ViewModel 스코프]\n\n아래와 같은 구성 변경 발생 시, 안드로이드는 UI 컨트롤러를 종료하거나 재생성한다.\n\n- 런타임에 화면 방향이 전환되는 경우\n- 언어, 글꼴 배율과 같은 기기 구성이 변경되는 경우\n\n이 때 두가지 문제가 발생한다.\n\n## 1) UI에 종속된 데이터 손실\n\n해결1 - 적은 데이터의 경우 <code class=\"codetainer\">OnCreate()</code>에서 <code class=\"codetainer\">onSaveInstanceState()</code> 메서드를 사용하여 번들에서 해당 데이터를 복원할 수 있다.\n<span class=\"clr-grey\">많은 데이터와 비트맵에는 부적절하다.</span>  \n해결2 - UI가 없는 워커 프래그먼트에 UI에 필요한 데이터를 관리하고 프래그먼트를 <code class=\"codetainer\">SetRetainInstance(true)</code>로 설정함으로써 프래그먼트를 메모리에 유지(유보)시킨다.\n\n## 2) 메모리 누수, 리소스 낭비\n\nUI 컨트롤러 재생성 시 다시 데이터를 로드하므로 리소스가 낭비되며, UI 컨트롤러가 비동기 호출을 하고 콜백을 받을 때 해당 컨트롤러가 파괴되었다면 에러가 발생하거나 메모리 누수가 날 수도 있다.\n\n## 문제해결방법\n\nUI 컨트롤러는 아래와 같은 작업을 다루는 경향이 있다.\n\n- UI 데이터 표시\n- 사용자 행동에 반응\n- 권한 요청\n\n그러므로 데이터베이스 또는 네트워크에서 데이터를 요청하고 로드하는 작업은 다른 클래스에 위임하여 UI 컨트롤러 로직에서 뷰 데이터에 대한 소유권을 분리하는 것이 효율적이다.\n\n# ViewModel 클래스 구현\n\n[예제로 바로가기](/android/android-mvvm/#viewModel).\n\nArchitecture Components는 ViewModel 클래스를 제공한다.  \n**ViewModel 클래스의 인스턴스(객체)는 구성 변경에도 데이터를 유지하며, ViewModel 인스턴스는 재생성된 액티비티에서 즉시 사용될 수 있다.**\n소유자가 액티비티를 끝낼 때, 안드로이드는 ViewModel 객체의 <code class=\"codetainer\">onCleared()</code> 메서드를 호출하여 리소스를 정리한다.\n\n<span class=\"clr-note\">\nViewModel 사용 시 ViewModel에 액티비티, 프래그먼트, 뷰에 대한 컨텍스트를 저장해서는 안된다.     \n</span>\n\n<span class=\"clr-grey\">액티비티가 재생성 될 때, ViewModel은 액티비티 생명주기 외부에 존재하기 때문에 UI 컨텍스트를 ViewModel에 저장하면 메모리 락을 발생시키는 직접적인 원인이 된다. 단, Application 컨텍스트(전체 앱의 수명주기)를 저장하는 것은 괜찮다. Application 컨텐스트는 AndroidViewModel 클래스를 통해 받을 수 있다.\n"}}},"previous":{"repository":{"post":{"__typename":"GitHub_Blob","oid":"9aacac8dd60a2171340862343e0ee39877fa3df9","text":"# [안드로이드] 안드로이드 MVVM에 대해 알아보자1\n\n- Title : [안드로이드] 안드로이드 MVVM에 대해 알아보자1\n- Date : 2019-01-07\n- Category: Android\n\nCoding in Flow의 Room + ViewModel + LiveData + RecyclerView (MVVM) 튜토리얼을 정리했습니다.\n\n# 파일 구성\n\n- MainActivity.java\n- Note.java\n- NoteAdapter.java\n- NoteDao.interface\n- NoteDatabase.java\n- NoteRepository.java\n- NoteViewModel.java\n\n# MVVM - VIEW와 VIEWMODEL\n\n<span class=\"li-icon\">MainActivity.class : 앱의 시작점으로 RecyclerView 설정 및 ViewModel 생성하는 부분 </span>\n<span class=\"li-icon\">NoteViewModel.class : UI 컴포넌트와 UI 데이터의 분리</span>\n<span class=\"li-icon\">NoteAdapter.class : 리사이클러뷰 어댑터</span>\n<span class=\"li-icon\">NoteRepository.class : 저장소, 도메인과 모델 사이의 중간체 역할?</span>\n\n## 1. 리사이클러뷰 구현\n\n```java\nRecyclerView recyclerView = findViewById(R.id.recycler_view);\nrecyclerView.setLayoutManager(new LinearLayoutManager(this));   // 1)\nrecyclerView.setHasFixedSize(true); // 2)\n\nfinal NoteAdapter adapter = new NoteAdapter();  // 3)\nrecyclerView.setAdapter(adapter);   // 3-1)\n```\n\n1. LayoutManager 클래스, 아이템을 어떻게 배치할 것인가를 결정한다.  \n   <span class=\"clr-grey\">LinearLayoutManager 클래스 : 가로/세로 형태로 아이템을 배열한다.</span>\n\n2. 각 아이템의 변화가 리사이클러 뷰의 전체 크기에 영향을 끼치지 않는다면 true를 사용한다.\n\n3. 데이터를 리사이클러뷰에 연결해 줄 어댑터 객체 생성\n\n3-1) 3)에서 생성한 어댑터 객체를 리사이클러뷰에 붙인다.\n\n<span id=\"viewModel\"></span>\n\n## 2. ViewModel과 LiveData\n\n[뷰모델 개념 익히러가기](/android/android-viewModel/).\n\n```java\nnoteViewModel = ViewModelProviders.of(this).get(NoteViewModel.class);\n```\n\n**ViewModel 객체 요청**  \n보통 ViewModel 생성 요청은 <code class=\"codetainer\">onCreate()</code> 메서드에서 이루어지며, **ViewModelProvider 클래스**를 통해서 ViewModel 객체를 생성한다.\nViewModelProviders 클래스의 <code class=\"codetainer\">of(this)</code> 를 통해 this(UI 컨트롤러) 스코프를 가진 ViewModelProvider 인스턴스가 반환된다.\n리턴된 ViewModelProvider 객체의 메서드 <code class=\"codetainer\">get(NoteViewModel.class)</code> 를 통해 NoteViewModel 인스턴스가 생성된다.\n\n<span class=\"clr-grey\">**NOTE:** get()은 이미 ViewModel 객체가 생성되었을 경우, 그 객체를 리턴한다. </span>\n\n<span id=\"LiveData\"></span>\n**LiveData 사용**  \n[LiveData 개념 익히러가기](/android/android-LiveData/).\n\nnoteViewModel.java\n\n```java\npublic class NoteViewModel extends AndroidViewModel {\n    // ...생략\n    private LiveData<List<Note>> allNotes;\n\n    public NoteViewModel(@NonNull Application application) {\n        super(application);\n        repository = new NoteRepository(application);\n        allNotes = repository.getAllNotes();\n    }\n\n    // ...생략\n    public LiveData<List<Note>> getAllNotes() {\n        return allNotes;\n    }\n}\n```\n\nLiveData는 보통 ViewModel 내에서 함께 쓰인다.\n\nMainActivity.java\n\n```java\nnoteViewModel.getAllNotes().observe(this, new Observer<List<Note>>() {  // 1) LifeCycleOwner, Observer\n    @Override\n    public void onChanged(@Nullable List<Note> notes) { // 2)\n        // update RecyclerView\n        // Toast.makeText(MainActivity.this, \"onchanged\", Toast.LENGTH_SHORT).show();\n        adapter.setNotes(notes);\n    }\n});\n```\n\n1. <code class=\"codetainer\">noteViewModel.getAllNotes()</code>를 통해 LiveData를 리턴받고 <code class=\"codetainer\">observe()</code> 메서드를 통해 Observer를 붙여 감지를 시작한다.\n   <span class=\"clr-grey\">보통 Observer는 프래그먼트나 액티비티 같은 UI 컨트롤러에서 만든다.</span>  \n   <span class=\"clr-note\">LiveData의 data가 변경될 때 LifeCycleOwner가 활성화 되어있는 한 등록된 모든 Observer들 에게 이벤트를 보낸다.</span>\n\n2. Observer는 <code class=\"codetainer\">onChanged()</code> 메서드를 반드시 오버라이드해야하며, <code class=\"codetainer\">onChanged()</code> 메서드에서 UI 업데이트를 한다.\n\n# MVVM - MODEL\n\n<span class=\"li-icon\">NoteDatabase.class</span>\n<span class=\"li-icon\">NoteDao.interface</span>\n<span class=\"li-icon\">Note.class</span>\n\nRoom은 SQLite 추상계층을 감싸고 있으며, 쉽게 데이터베이스에 접근하여 SQLite를 자유롭게 사용할 수 있다. Room에는 세가지 주요한 컴포넌트가 있다.\n\n## 1. Database (NoteDatabase.class)\n\n데이터베이스 홀더를 포함하고, 관계형 데이터베이스에 접근할 수 있는 액세스 포인트를 제공한다.\n\n```java\n@Database(entities = {Note.class}, version = 1, exportSchema = false)   // 1)\npublic abstract class NoteDatabase extends RoomDatabase {\n\n    private static NoteDatabase instance;\n\n    public abstract NoteDao noteDao();  // 3)\n\n    public static synchronized NoteDatabase getInstance(Context context) {\n        if (instance == null) {\n            instance = Room.databaseBuilder(context.getApplicationContext(),    // 4)\n                    NoteDatabase.class, \"note_database\")\n                    .fallbackToDestructiveMigration()\n                    .addCallback(roomCallback)\n                    .build();\n        }\n        return instance;\n    }\n    // ..생략\n}\n```\n\n1. @Database 애노테이션을 클래스에 달아야하며, 데이터베이스와 관련된 Entity들은 애노테이션 인자값으로 포함해야한다.\n2. RoomDatabase를 상속한 abstract class여야 한다.\n3. abstract method 포함해야하는데, 이 메소드에는 인자가 0개이고 reture되는 클래스가 @Dao 애노테이션을 달고 있어야한다.\n4. 런타임때에는 Room.databaseBuilder() 또는 Room.inMemoryDatabaseBuilder()를 통해 Database의 객체를 얻어 낼 수 있다.\n\n<span class=\"clr-grey\">**Note:** RoomDatabase 객체를 인스턴스화 하는 비용은 매우 크므로 인스턴스를 얻는 작업을 싱글톤패턴으로 만드는 게 좋다.</span>\n\n```java\n@Database(entities = {Note.class}, version = 1, exportSchema = false)   // 1)\npublic abstract class NoteDatabase extends RoomDatabase {\n    private static NoteDatabase instance;\n    public abstract NoteDao noteDao();\n    // ..생략\n\n    private static RoomDatabase.Callback roomCallback = new RoomDatabase.Callback() {\n\n        // 데이터베이스가 처음 생성될 때 호출됨, 모든 테이블이 생성된 후 호출됨.\n        @Override\n        public void onCreate(@NonNull SupportSQLiteDatabase db) {\n            super.onCreate(db);\n            new PopulateDbAsyncTask(instance).execute(); // AsyncTask 실행\n        }\n    };\n\n    private static class PopulateDbAsyncTask extends AsyncTask<Void, Void, Void> {\n        private NoteDao noteDao;\n\n        private PopulateDbAsyncTask(NoteDatabase db) {\n            noteDao = db.noteDao();\n        }\n\n        @Override\n        protected Void doInBackground(Void... voids) {\n            noteDao.insert(new Note(\"Title 1\", \"Description 1\", 1));\n            noteDao.insert(new Note(\"Title 2\", \"Description 2\", 2));\n            noteDao.insert(new Note(\"Title 3\", \"Description 3\", 3));\n\n            return null;\n        }\n    }\n}\n```\n\n**AsyncTask클래스**  \n비즈니스 로직과 UI 컴포넌트 조작이 동시에 일어나야 할 때 유용하며, 비교적 오래 걸리지 않는 작업에 적합하다. 또한, task 캔슬이 용이하다.\n\nAsyncTask <Params, Progress, Result> 제너릭 타입\n<span class=\"li-icon\">Params: doInBackground 파라미타 타입이며, execute 메소드의 인자 값이 된다.</span>\n<span class=\"li-icon\">Progress: doInBakcgroud 작업 시 진행 단위의 타입으로 onProgressUpdate 파라미터의 타입이다.</span>\n<span class=\"li-icon\">doInBackground 리턴값으로 onPostExecute 파라미터 타입이다.</span>\n\n<span class=\"clr-grey\">**제네릭스(Generics):** 객체 생성시 타입을 선언하므로 캐스팅할 필요가 없으며, 다른 타입을 할당할 경우 컴파일 단계에서 예외처리가 된다. <T>는 객체(Object) 타입이다.</span>\n\n## 2. Entity (Note.class)\n\nEntity를 사용하여 데이터 구조를 정의하고, 데이터베이스 테이블을 표현한다.\n\n```java\n@Entity(tableName = \"note_table\")   // tableName 속성 : 테이블명을 Note로 사용하고 싶지 않을 때\npublic class Note {\n\n    @PrimaryKey(autoGenerate = true)    // 기본키 정의 필수\n    private int id;\n    @ColumnInfo(name = \"Notetitle\") // name 속성 : 필드명을 다르게 지정하고 싶을 때\n    private String title;\n    private String description;\n    private int priority;\n    @Ignore // 데이터베이스에서 칼럼으로 생성되기를 원치 않을 때\n    Bitmap picture;\n\n    public Note(String title, String description, int priority) {\n        this.title = title;\n        this.description = description;\n        this.priority = priority;\n    }\n\n    // ..생략 (반드시, getter setter 필요)\n}\n```\n\n## 3. DAO (NoteDao.interface)\n\n데이터베이스의 데이터에 접근하기 위해서는 DAO가 필요하다. 직접적인 쿼리를 작성하는 대신 DAO 클래스를 사용하여 데이터베이스에 추상적으로 접근한다. <span class=\"clr-note\">DAO는 interface나 abstract class가 되야한다.</span>\n\n```java\n@Dao\npublic interface NoteDao {\n\n    @Insert\n    void insert(Note note);\n\n    @Update\n    void update(Note note);\n\n    @Delete\n    void delete(Note note);\n\n    @Query(\"DELETE FROM note_table\")\n    void deleteAllNotes();\n\n    @Query(\"SELECT * FROM note_table ORDER BY priority DESC\")\n    LiveData<List<Note>> getAllNotes();\n}\n```\n"}}},"next":{"repository":{"post":{"__typename":"GitHub_Blob","oid":"21592a4a75d3f4c8d56813075597b1287f9822f2","text":"# [안드로이드] fragment를 사용하자\n\n- Title : [안드로이드] fragment를 사용하자\n- Date : 2018-12-07\n- Category: Android\n\n[될 때까지 안드로이드]의 fragment 파트를 정리한 내용입니다.\n\n[기본 프래그먼트 구현 예제](https://github.com/devgaram/androidExample/tree/master/fragmentexam).  \n[다이얼로그 프래그먼트 구현 예제](https://github.com/devgaram/androidExample/tree/master/exitdialogfragment).  \n[콜백 구현 예제](https://github.com/devgaram/androidExample/tree/master/callbackexam).\n\n여러 개의 프래그먼트를 하나의 액티비티에 조합하여 창이 여러 개인 UI를 구축할 때 사용할 수 있다.\n\n- 하나의 프래그먼트를 여러 액티비티에서 재사용할 수 있으며,동적으로 추가, 삭제, 교체가 쉽다.\n- 프래그먼트는 자체 수명 주기를 가진다.\n- 프래그먼트는 부모-자식 관계를 가질 수 있다.\n\n---\n\n# 생명주기 (소속 액티비티가 실행 중일 때)\n\n최소한 다음과 같은 수명 주기 메서드를 구현해야한다.\n\n**onCreate()**  \n프래그먼트를 생성할 때 호출되는 콜백 메서드  \n프래그먼트가 일시정지되거나 중지되었다가 재개되었을 때 유지하고자 하는 것을 초기화하는 부분\n\n**onCreateView()**  \n액티비티는 <code class=\"codetainer\">onCreate()</code> 콜백 메서드에서 <code class=\"codetainer\">setContentView()</code> 메서드를 호출하여 View 객체(레이아웃)을 가져온다.  \n프래그먼트는 <code class=\"codetainer\">onCreateView()</code> 콜백 메서드에서 LayoutInflater를 통해 레이아웃을 가져온다.\n\n**onPause()**  \n시스템이 이 메서드를 호출하는 것은 사용자가 프래그먼트를 떠난다는 첫 번째 신호.  \n현재 사용자 세션을 넘어서 지속되어야 하는 변경 사항을 저장하는 부분\n\n프래그먼트 추가  \nonAttach() -> onCreate() -> onCreateView() -> onActivityCreated() -> onStart() -> onResume()\n\n프래그먼트 소멸  \nonPause() -> onStop() -> onDestroyView() -> onDestroy() -> onDetach()\n\n# 실습\n\n## 프래그먼트의 생성자\n\n생성자를 오버로드할 수 없으며, 생성자를 통해 파라미터 전달을 금지하고 있다.  \n재생성 시에 정보를 자동으로 저장 및 복원하기 위한 설계가 이미 되어 있고 그것을 따르기 위한 제약이다.\n프래그먼트의 생성과 동시에 파라미터를 전달하는 방법은 **Bundle 객체**를 활용한다.\n\n```java\npublic class ColorFragment extends Fragment {\n\n    public ColorFragment() {\n        // Required empty public constructor\n    }\n\n    @Override\n    public View onCreateView(LayoutInflater inflater, ViewGroup container,\n                             Bundle savedInstanceState) {\n        // Inflate the layout for this fragment\n        return inflater.inflate(R.layout.fragment_color, container, false);\n    }\n}\n```\n\n## 프래그먼트 매니저\n\n프래그먼트 조작을 위해 프래그먼트 매니저가 필요하다.  \n프래그먼트 매니저는 액티비티 처럼 백스택을 가지고 있음.\n\n- 액티비티 내 XML에 포함된 프래그먼트를 <code class=\"codetainer\">findFragmentById()</code> 메서드로 가져오기 또는 <code class=\"codetainer\">findFragmentByTag()</code>로 가져오기\n- 액티비티 백스택에서 프래그먼트를 <code class=\"codetainer\">popBackStack()</code>메서드로 빠져나오게 하여 액티비티의 뒤로 가기와 같은 효과를 냄 ( <code class=\"codetainer\">addToBackStack()</code> : 프래그먼트 매니저의 백스택에 프래그먼트 추가하는 메서드 )\n\n```java\npublic class MainActivity extends AppCompatActivity {\n\n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n      ...생략...\n        FragmentManager fragmentManager = getSupportFragmentManager();\n        ColorFragment colorFragment = (ColorFragment) fragmentManager.findFragmentById(R.id.color_fragment);\n        colorFragment.setColor(Color.BLUE);\n    }\n}\n```\n\n## 프래그먼트에서 액티비티에 접근하는 방법\n\n```java\nView listView = getActivity().findViewById(R.id.list);\n```\n\n## 프래그먼트 교체, 삭제, 추가\n\n프래그먼트를 교체하기 위해서는 <fragment<fragment>>를 <FrameLayout<FrameLayout>>과 같은 레이아웃으로 감싸줘야한다.  \n**프래그먼트 트랜지션 수행** add(), remove(), replace() 같은 메서드를 사용하고 commit()을 수행하면 트랜지션이 적용된다.\n\n```java\npublic class MainActivity extends AppCompatActivity {\n\n  ...생략....\n\n    public void change(View view) {\n        ColorFragment fragment = new ColorFragment();\n        int red = new Random().nextInt(256);\n        int green = new Random().nextInt(256);\n        int blue = new Random().nextInt(256);\n        fragment.setColor(Color.rgb(red, green, blue));\n        getSupportFragmentManager()\n                .beginTransaction()\n                .replace(R.id.container, fragment)\n                .commit();\n    }\n}\n```\n\n## 프래그먼트와 액티비티 간의 통신\n\n일반적으로 액티비티에서 프래그먼트나 다른 뷰들의 인스턴스를 가지고 있어서 이들의 메서드를 호출하는 식이다. 따라서 프래그먼트의 상태가 변했을 때 액티비티에서 이것을 알아차리려면 계속해서 프래그먼트의 상태 값을 알아내는 메서드를 호출해야한다.\n\n그러나 콜백 인터페이스를 사용하여 프래그먼트의 상태가 변할 때마다 자동으로 액티비티에게 알려줄 수 있다.\nButton의 <code class=\"codetainer\">onClick()</code> 이벤트나 액티비티의 <code class=\"codetainer\">onCreate()</code>가 대표적인 콜백 메서드이며, 호출자 입장에서는 피호출자의 변화를 감시하다가 알아채기 때문에 리스너(Listener) 라고도 불른다.\n"}}}},"pageContext":{"id":"e904a40fa0b358c66e6c794f773f77275fcba701","previousPostId":"9aacac8dd60a2171340862343e0ee39877fa3df9","nextPostId":"21592a4a75d3f4c8d56813075597b1287f9822f2"}},"staticQueryHashes":["2685952063","2841359383"]}