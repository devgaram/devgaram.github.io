{"componentChunkName":"component---src-templates-blog-post-js","path":"/21592a4a75d3f4c8d56813075597b1287f9822f2","result":{"data":{"site":{"siteMetadata":{"title":"보노보노의 평화로운 개발 이야기"}},"current":{"repository":{"post":{"__typename":"GitHub_Blob","oid":"21592a4a75d3f4c8d56813075597b1287f9822f2","text":"# [안드로이드] fragment를 사용하자\n\n- Title : [안드로이드] fragment를 사용하자\n- Date : 2018-12-07\n- Category: Android\n\n[될 때까지 안드로이드]의 fragment 파트를 정리한 내용입니다.\n\n[기본 프래그먼트 구현 예제](https://github.com/devgaram/androidExample/tree/master/fragmentexam).  \n[다이얼로그 프래그먼트 구현 예제](https://github.com/devgaram/androidExample/tree/master/exitdialogfragment).  \n[콜백 구현 예제](https://github.com/devgaram/androidExample/tree/master/callbackexam).\n\n여러 개의 프래그먼트를 하나의 액티비티에 조합하여 창이 여러 개인 UI를 구축할 때 사용할 수 있다.\n\n- 하나의 프래그먼트를 여러 액티비티에서 재사용할 수 있으며,동적으로 추가, 삭제, 교체가 쉽다.\n- 프래그먼트는 자체 수명 주기를 가진다.\n- 프래그먼트는 부모-자식 관계를 가질 수 있다.\n\n---\n\n# 생명주기 (소속 액티비티가 실행 중일 때)\n\n최소한 다음과 같은 수명 주기 메서드를 구현해야한다.\n\n**onCreate()**  \n프래그먼트를 생성할 때 호출되는 콜백 메서드  \n프래그먼트가 일시정지되거나 중지되었다가 재개되었을 때 유지하고자 하는 것을 초기화하는 부분\n\n**onCreateView()**  \n액티비티는 <code class=\"codetainer\">onCreate()</code> 콜백 메서드에서 <code class=\"codetainer\">setContentView()</code> 메서드를 호출하여 View 객체(레이아웃)을 가져온다.  \n프래그먼트는 <code class=\"codetainer\">onCreateView()</code> 콜백 메서드에서 LayoutInflater를 통해 레이아웃을 가져온다.\n\n**onPause()**  \n시스템이 이 메서드를 호출하는 것은 사용자가 프래그먼트를 떠난다는 첫 번째 신호.  \n현재 사용자 세션을 넘어서 지속되어야 하는 변경 사항을 저장하는 부분\n\n프래그먼트 추가  \nonAttach() -> onCreate() -> onCreateView() -> onActivityCreated() -> onStart() -> onResume()\n\n프래그먼트 소멸  \nonPause() -> onStop() -> onDestroyView() -> onDestroy() -> onDetach()\n\n# 실습\n\n## 프래그먼트의 생성자\n\n생성자를 오버로드할 수 없으며, 생성자를 통해 파라미터 전달을 금지하고 있다.  \n재생성 시에 정보를 자동으로 저장 및 복원하기 위한 설계가 이미 되어 있고 그것을 따르기 위한 제약이다.\n프래그먼트의 생성과 동시에 파라미터를 전달하는 방법은 **Bundle 객체**를 활용한다.\n\n```java\npublic class ColorFragment extends Fragment {\n\n    public ColorFragment() {\n        // Required empty public constructor\n    }\n\n    @Override\n    public View onCreateView(LayoutInflater inflater, ViewGroup container,\n                             Bundle savedInstanceState) {\n        // Inflate the layout for this fragment\n        return inflater.inflate(R.layout.fragment_color, container, false);\n    }\n}\n```\n\n## 프래그먼트 매니저\n\n프래그먼트 조작을 위해 프래그먼트 매니저가 필요하다.  \n프래그먼트 매니저는 액티비티 처럼 백스택을 가지고 있음.\n\n- 액티비티 내 XML에 포함된 프래그먼트를 <code class=\"codetainer\">findFragmentById()</code> 메서드로 가져오기 또는 <code class=\"codetainer\">findFragmentByTag()</code>로 가져오기\n- 액티비티 백스택에서 프래그먼트를 <code class=\"codetainer\">popBackStack()</code>메서드로 빠져나오게 하여 액티비티의 뒤로 가기와 같은 효과를 냄 ( <code class=\"codetainer\">addToBackStack()</code> : 프래그먼트 매니저의 백스택에 프래그먼트 추가하는 메서드 )\n\n```java\npublic class MainActivity extends AppCompatActivity {\n\n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n      ...생략...\n        FragmentManager fragmentManager = getSupportFragmentManager();\n        ColorFragment colorFragment = (ColorFragment) fragmentManager.findFragmentById(R.id.color_fragment);\n        colorFragment.setColor(Color.BLUE);\n    }\n}\n```\n\n## 프래그먼트에서 액티비티에 접근하는 방법\n\n```java\nView listView = getActivity().findViewById(R.id.list);\n```\n\n## 프래그먼트 교체, 삭제, 추가\n\n프래그먼트를 교체하기 위해서는 <fragment<fragment>>를 <FrameLayout<FrameLayout>>과 같은 레이아웃으로 감싸줘야한다.  \n**프래그먼트 트랜지션 수행** add(), remove(), replace() 같은 메서드를 사용하고 commit()을 수행하면 트랜지션이 적용된다.\n\n```java\npublic class MainActivity extends AppCompatActivity {\n\n  ...생략....\n\n    public void change(View view) {\n        ColorFragment fragment = new ColorFragment();\n        int red = new Random().nextInt(256);\n        int green = new Random().nextInt(256);\n        int blue = new Random().nextInt(256);\n        fragment.setColor(Color.rgb(red, green, blue));\n        getSupportFragmentManager()\n                .beginTransaction()\n                .replace(R.id.container, fragment)\n                .commit();\n    }\n}\n```\n\n## 프래그먼트와 액티비티 간의 통신\n\n일반적으로 액티비티에서 프래그먼트나 다른 뷰들의 인스턴스를 가지고 있어서 이들의 메서드를 호출하는 식이다. 따라서 프래그먼트의 상태가 변했을 때 액티비티에서 이것을 알아차리려면 계속해서 프래그먼트의 상태 값을 알아내는 메서드를 호출해야한다.\n\n그러나 콜백 인터페이스를 사용하여 프래그먼트의 상태가 변할 때마다 자동으로 액티비티에게 알려줄 수 있다.\nButton의 <code class=\"codetainer\">onClick()</code> 이벤트나 액티비티의 <code class=\"codetainer\">onCreate()</code>가 대표적인 콜백 메서드이며, 호출자 입장에서는 피호출자의 변화를 감시하다가 알아채기 때문에 리스너(Listener) 라고도 불른다.\n"}}},"previous":{"repository":{"post":{"__typename":"GitHub_Blob","oid":"e904a40fa0b358c66e6c794f773f77275fcba701","text":"# [안드로이드] 안드로이드 ViewModel에 대해 알아보자\n\n- Title : [안드로이드] 안드로이드 ViewModel에 대해 알아보자\n- Date : 2019-01-07\n- Category: Android\n\n안드로이드 아키텍쳐 중 ViewModel 클래스에 대한 내용입니다.\n\n안드로이드 프레임워크는 액티비티와 프래그먼트와 같은 UI 컨트롤러의 라이프 사이클을 관리한다.\n\n![액티비티가 회전을 거쳐 끝날 때까지의 라이프 사이클](https://raw.githubusercontent.com/devgaram/TIL/master/Android/images/2019-01-07-img/viewmodel-lifecycle.png)  \n[ UI 컨트롤러 라이프 사이클과 ViewModel 스코프]\n\n아래와 같은 구성 변경 발생 시, 안드로이드는 UI 컨트롤러를 종료하거나 재생성한다.\n\n- 런타임에 화면 방향이 전환되는 경우\n- 언어, 글꼴 배율과 같은 기기 구성이 변경되는 경우\n\n이 때 두가지 문제가 발생한다.\n\n## 1) UI에 종속된 데이터 손실\n\n해결1 - 적은 데이터의 경우 <code class=\"codetainer\">OnCreate()</code>에서 <code class=\"codetainer\">onSaveInstanceState()</code> 메서드를 사용하여 번들에서 해당 데이터를 복원할 수 있다.\n<span class=\"clr-grey\">많은 데이터와 비트맵에는 부적절하다.</span>  \n해결2 - UI가 없는 워커 프래그먼트에 UI에 필요한 데이터를 관리하고 프래그먼트를 <code class=\"codetainer\">SetRetainInstance(true)</code>로 설정함으로써 프래그먼트를 메모리에 유지(유보)시킨다.\n\n## 2) 메모리 누수, 리소스 낭비\n\nUI 컨트롤러 재생성 시 다시 데이터를 로드하므로 리소스가 낭비되며, UI 컨트롤러가 비동기 호출을 하고 콜백을 받을 때 해당 컨트롤러가 파괴되었다면 에러가 발생하거나 메모리 누수가 날 수도 있다.\n\n## 문제해결방법\n\nUI 컨트롤러는 아래와 같은 작업을 다루는 경향이 있다.\n\n- UI 데이터 표시\n- 사용자 행동에 반응\n- 권한 요청\n\n그러므로 데이터베이스 또는 네트워크에서 데이터를 요청하고 로드하는 작업은 다른 클래스에 위임하여 UI 컨트롤러 로직에서 뷰 데이터에 대한 소유권을 분리하는 것이 효율적이다.\n\n# ViewModel 클래스 구현\n\n[예제로 바로가기](/android/android-mvvm/#viewModel).\n\nArchitecture Components는 ViewModel 클래스를 제공한다.  \n**ViewModel 클래스의 인스턴스(객체)는 구성 변경에도 데이터를 유지하며, ViewModel 인스턴스는 재생성된 액티비티에서 즉시 사용될 수 있다.**\n소유자가 액티비티를 끝낼 때, 안드로이드는 ViewModel 객체의 <code class=\"codetainer\">onCleared()</code> 메서드를 호출하여 리소스를 정리한다.\n\n<span class=\"clr-note\">\nViewModel 사용 시 ViewModel에 액티비티, 프래그먼트, 뷰에 대한 컨텍스트를 저장해서는 안된다.     \n</span>\n\n<span class=\"clr-grey\">액티비티가 재생성 될 때, ViewModel은 액티비티 생명주기 외부에 존재하기 때문에 UI 컨텍스트를 ViewModel에 저장하면 메모리 락을 발생시키는 직접적인 원인이 된다. 단, Application 컨텍스트(전체 앱의 수명주기)를 저장하는 것은 괜찮다. Application 컨텐스트는 AndroidViewModel 클래스를 통해 받을 수 있다.\n"}}},"next":{"repository":{"post":{"__typename":"GitHub_Blob","oid":"d3243c845434711276363da6e3b2e4b8a276c730","text":"# [안드로이드] RecyclerView를 사용하자\n\n- Title : [안드로이드] RecyclerView를 사용하자\n- Date : 2018-12-05\n- Category: Android\n\n[될 때까지 안드로이드]의 RecyclerView 파트를 정리한 내용입니다.\n\n어댑터 뷰의 성능을 개선한 컴포넌트로 애니메이션을 지원하고 뷰홀더 패턴을 강제한다.  \n대신 이벤트 리스너와 커서를 지원하지 않는 단점이 있다.\n\n## 어댑터 뷰의 단점\n\n1. 빠르게 스크롤 할 때 성능문제와 불필요한 지연 문제가 있다.\n2. 데이터 목록이 변경되었을 때, <code class=\"codetainer\">notifyDataSetChanged()</code> 메서드를 빈번하게 호출하여 전체 아이템을 갱신하는 데 비용이 많이 든다. 이 메서드는 항상 전체 항목을 새로 로드한다.\n\n## 리사이클러 뷰 vs 어댑터 뷰\n\n- 상속 받는 클래스 : RecyclerView.Adapter vs BaseAdapter\n- 리사이클러 뷰는 레이아웃 매니저를 지정해줘야 한다.\n- 리사이클러 뷰는 뷰홀더 패턴을 반드시 구현해야한다.\n\n## 리사이클러 뷰 관련 클래스\n\n1. RecyclerView.Adapter : 어댑터 역할\n2. RecyclerView.ViewHolder : 뷰홀더 클래스가 상속받아야 할 클래스\n3. LayoutManager : 아이템을 어떻게 배치할 것 인가\n\n   - LinearLayoutManager\n   - GridLayoutManager\n   - StaggeredGridLayoutManager\n\n4. RecyclerView.ItemAnimator : 아이템이 추가, 삭제, 재정렬 시 애니메이션 어떻게 할 것인가\n5. RecyclerView.ItemDecoration : 아이템을 세부적으로 어떻게 꾸밀 것인가\n\n## 리사이클러 통지 메서드\n\n- <code class=\"codetainer\">notifyItemInserted(int position)</code> : position 위치의 아이템이 삽입된 것을 통지\n- <code class=\"codetainer\">notifyItemRemoved(int position)</code> : position 위치의 아이템이 삭제된 것을 통지\n\n## 관련 메서드\n\n- <code class=\"codetainer\">void setHasFixedSize (boolean hasFixedSize)</code> : 각 아이템의 변화가 리사이클러 뷰의 전체 크기에 영향을 끼치지 않는다면 true를 사용한다.\n"}}}},"pageContext":{"id":"21592a4a75d3f4c8d56813075597b1287f9822f2","previousPostId":"e904a40fa0b358c66e6c794f773f77275fcba701","nextPostId":"d3243c845434711276363da6e3b2e4b8a276c730"}},"staticQueryHashes":["2841359383"]}