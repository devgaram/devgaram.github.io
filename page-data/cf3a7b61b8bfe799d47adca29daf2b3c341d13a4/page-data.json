{"componentChunkName":"component---src-templates-blog-post-js","path":"/cf3a7b61b8bfe799d47adca29daf2b3c341d13a4","result":{"data":{"site":{"siteMetadata":{"title":"보노보노의 평화로운 개발 이야기"}},"current":{"repository":{"post":{"__typename":"GitHub_Blob","oid":"cf3a7b61b8bfe799d47adca29daf2b3c341d13a4","text":"# REST API에 대해\n\n- Title : REST API에 대해\n- Date : 2020-03-16\n- Category: Web\n\n## ✨ REST API 란?\n\nREST(Representational State Transfer)는 웹처럼 HTTP 기반의 시스템에 필요한 자원(리소스, DBMS 데이터, 이미지, 동영상, 서비스..등)에 접근하는 방식을 정해놓은 아키텍쳐다.\n\n### REST 구성\n\n- 자원(RESOURCE) - URI\n  - 리소스명은 동사보다는 명사를 사용\n- 행위(Verb) - HTTP METHOD(GET, POST, PUT, DELETE)\n- 표현(Representations)\n\n### REST 특징\n\n- **클라이언트/서버 구조** : REST 서버는 API 제공, 클라이언트는 사용자 인증이나 컨텍스트(세션, 로그인 정보)등을 직접 관리하는 구조로 각각의 역할이 확실히 구분되기 때문에 클라이언트와 서버에서 개발해야 할 내용이 명확해지고 서로 간 의존성이 줄어든다.\n- **무상태성(Stateless)** : 클라이언트 컨텍스트(세션, 쿠키)는 서버에 저장되어서는 안 된다. API 서버는 단순히 들어오는 요청만을 처리한다.\n- **캐시 처리 가능(Cacheable)** : HTTP가 가진 캐싱 기능 적용이 가능하다. 클라이언트 응답을 캐싱할 수 있어야 한다.\n- **계층화(Layered System)** : REST 서버는 다중 계층으로 구성될 수 있다. 하지만 클라이언트는 REST 서버에 직접 연결되었는지, 또는 중간 서버를 통해 연결되었는 지를 알 수 없게 해야한다. 중간 서버는 로드 밸런싱 기능이나 공유 캐시 기능을 제공함으로써 시스템 규모 확장성을 향상시키는 데 유용하다.\n- **유니폼 인터페이스(Uniform)** : URI로 지정한 리소스에 대한 조작을 통일되고 한정적인 인터페이스로 수행하는 아키텍처 스타일을 말한다.\n\n### URI 설계 시 주의할 점\n\n- 슬래시 구분자(/)는 계층 관계를 나타내는 데 사용한다.\n- URI 마지막 문자로 슬래시(/)를 포함하지 않는다.\n- 하이픈(-)은 URI 가독성을 높이는데 사용한다.\n- 밑줄(\\_)은 URI에 사용하지 않는다.\n- URI 경로에는 소문자가 적합하다.\n- 파일 확장자는 URI에 포함시키지 않는다.\n\n### 리소스 간의 관계 표현하는 방법\n\n사용자가 좋아하는 디바이스 목록 가져오기\n\n    GET : /users/{userid}/likes/devices\n\n### 자원을 표현하는 Collection과 Document\n\n- Collection: 문서들의 집합, 객체들의 집합\n- Document: 문서, 객체\n\n예시로 이해하기\n\n- sports, players: 컬렉션\n- soccer, 13: 다큐먼트\n\n  http:// restapi.example.com/sports/soccer/players/13\n\n**참고 99.9%**\n\n[REST API 제대로 알고 사용하기 : TOAST Meetup](https://meetup.toast.com/posts/92)\n"}}},"previous":{"repository":{"post":{"__typename":"GitHub_Blob","oid":"94ca86fd0ce6c18a378cb92e9a8e202b4974c91f","text":"# GraphQL 알아보기\n\n- Title : GraphQL 알아보기\n- Date : 2020-03-17\n- Category : 프론트\n\n# Why?\n\nTIL 레파지토리의 문서들을 얻기 위해 Github Content API를 이용했다. 루트 폴더들, 각 폴더의 문서들, 문서의 내용 등을 REST API를 사용하여 얻었는 데 아무래도 엔드 포인트가 많다 보니 코드가 복잡해졌다. 또 내가 원하는 데이터만 받고 싶은 데 응답 구조가 정해져있다보니 응답 데이터를 직접 가공하는 수 밖에 없었다. 휴 불편하네~ 😥 불편하다. 생각하던 중 Github이 GraphQL API를 제공한다는 것을 발견했다. 예전에 잠깐 공부했을 때는 REST API보다 왜 편한지 이해를 못했는 데 역시 사람은 몸소 겪어봐야 아나보다. 직접 사용해보니 너무 너무 편했다. 그래서 오늘의 TIL은 GraphQL에 대해 정리해보려한다. \n\n# ✨ GraphQL 이란?\n\nGraphQL(gql)는 API를 위한 쿼리 언어로 API 서버에서 원하는 데이터를 효율적으로 가져올 수 있다. GraphQL을 사용하는 앱은 느린 모바일 네트워크 연결에서도 빠르게 수행할 수 있다고 한다. \n\nGraphQL API 서버는 gql로 작성된 쿼리를 입력으로 받고 쿼리를 처리한 결과를 클라이언트에게 돌려준다. HTTP API 처럼 gql도 특정 데이터베이스나 플랫폼에 종속적이지않다.\n\n네트워크 방식에도 종속적이지 않다. 일반적으로 gql의 인터페이스간 송수신은 네트워크 레이어 L7의 HTTP POST 메서드와 웹 소켓 프로토콜을 활용한다. 필요에 따라서는 L4의 TCP/UDP나 L2의 이더넷 프레임을 활용할 수 있다.\n\n## REST API와 차이점?\n\n- REST API가 여러 URL에서 데이터를 얻는 것과 달리 GraphQL은 모든 데이터를 하나의 엔드 포인트를 통해 가져올 수 있다.\n- REST API는 각 엔드포인트마다 데이터베이스 SQL 쿼리가 달라지고 gql API는 gql 스키마 타입마다 데이터베이스 SQL 쿼리가 달라진다.\n- REST API는 리소스를 URL로 표현하고 GraphQL은 Query로 표현한다고 할 수 있다.\n\n# GraphQL 구조\n\n## 📌 Query\n\nHTTP Method의 `GET` 과 비슷\n\n### **Fields**\n\n    {\n    \tplayers {\n    \t\tname\n    \t}\n    }\n\n    {\n    \t\"data\": {\n    \t\t\"players\": [\n    \t\t\t{\n    \t\t\t   \"name\": \"Pogba\"\n    \t\t\t },\n    \t\t\t {\n    \t\t\t   \"name\": \"Lukaku\"\n    \t\t\t },\n    \t\t\t {\n    \t\t\t   \"name\": \"Rashford\"\n    \t\t\t },\n    \t\t\t {\n    \t\t\t   \"name\": \"Marshal\"\n    \t\t\t }\n    \t\t]\n    \t}\n    }\n\n- 객체에서 원하는 필드만 리턴 받을 수 있다.\n- 쿼리는 한번의 요청으로 객체나 필드를 순회하여 관련된 데이터들도 가져올 수 있다. 이런 작업을 REST API에서 하려면 API 호출을 여러 번 해야한다.\n\n### **Arguments**\n\n    {\n    \tplayer(id: \"Pogba\") {\n    \t\tname\n    \t\tkit {\n    \t    shirtSize,\n          bootSize\n        }\n    \t}\n    }\n\n    {\n    \t\"data\": {\n    \t\t\"players\": {\n    \t\t\t\"name\": \"Pogba\",\n    \t\t\t\"kit\": [\n    \t\t\t\t{\n    \t\t\t\t\t\"shirtSize\": \"large\",\n               \"shoeSize\": \"medium\"\n    \t\t\t\t}\t\t\t\n    \t\t\t]\n    \t\t}\n    \t}\n    }\n\n- arguments를 쿼리의 필드 및 중첩된 객체들에 전달하여 원하는 데이터만 얻을 수 있다\n- REST API에서 ?name=Pogba 또는 /Pogba (/:name 형식일 때) 와 같은 목적으로 사용한다.\n\n### Aliases\n\n    {\n    \tplayer(id: \"Pogba\") {\n    \t\tname\n    \t\tkit {\n    \t    shirtSize,\n          bootSize\n        }\n    \t}\n    \tplayer(id: \"Lukaku\") {\n    \t\tname\n    \t\tkit {\n    \t    shirtSize,\n          bootSize\n        }\n    \t}\n    }\n\n    {\n    \tplayer1: player(id: \"Pogba\") {\n    \t\tname\n    \t\tkit {\n    \t    shirtSize,\n          bootSize\n        }\n    \t}\n    \tplayer2: player(id: \"Lukaku\") {\n    \t\tname\n    \t\tkit {\n    \t    shirtSize,\n          bootSize\n        }\n    \t}\n    }\n\n    {\n    \t\"data\": {\n    \t\t\"player1\": {\n    \t\t\t\"name\": \"Pogba\",\n    \t\t\t\"kit\": [\n    \t\t\t\t{\n    \t\t\t\t\t\"shirtSize\": \"large\",\n               \"shoeSize\": \"medium\"\n    \t\t\t\t}\t\t\t\n    \t\t\t]\n    \t\t}\n    \t\t\"player2\": {\n    \t\t\t\"name\": \"Lukaku\",\n    \t\t\t\"kit\": [\n    \t\t\t\t{\n    \t\t\t\t\t\"shirtSize\": \"extralarge\",\n               \"shoeSize\": \"large\"\n    \t\t\t\t}\t\t\t\n    \t\t\t]\n    \t\t}\n    \t}\n    }\n\n- 필드 이름을 겹쳐서 사용할 수는 없기에 왼쪽처럼 할 수 없다. 오른쪽 처럼 별칭을 써서 사용하면 된다.\n\n### Operation name\n\n    query PlayerDetails {\n    \tplayer(id: \"Pogba\") {\n    \t\tname\n    \t\tkit {\n    \t    shirtSize,\n          bootSize\n        }\n    \t}\n    }\n\n- Operation Type: query, mutation과 같은 키워드\n- Operation Name: 이 작업이 무슨 일을 하는 지(메소드 명처럼..?)\n\n### Variables\n\n    query PlayerDetails($id: String) {\n    \tplayer(id: $id) {\n    \t\tname\n    \t\tkit {\n    \t    shirtSize,\n          bootSize\n        }\n    \t}\n    }\n\n- arguments를 동적으로 받고 싶을 때 사용한다.\n- Operation Name 옆에 변수를 $변수이름: 타입 형태로 정의한다. 만약  `String!` 형태로 정의했다면 id는 **반드시** String이어야 한다.\n- 실제 argument로 사용하려면 필드명: $변수이름 형태로 사용하면 된다.\n- 전달된 변수가 없으면 디폴트로 사용할 값을 정의할 수도 있다. `$id: String = \"Pogba\"` 형태로 쓰면 된다.\n\n### Fragments\n\n    {\n    \tplayer(id: \"Pogba\") {\n    \t\tname\n    \t\tkit {\n    \t    shirtSize,\n          bootSize\n        }\n    \t}\n    \tplayer(id: \"Lukaku\") {\n    \t\tname\n    \t\tkit {\n    \t    shirtSize,\n          bootSize\n        }\n    \t}\n    }\n\n    {\n    \tplayer1: player(id: \"Pogba\") {\n    \t\t...playerKit\n    \t}\n    \tplayer2: player(id: \"Lukaku\") {\n    \t\t...playerKit\n    \t}\n    }\n    \n    fragment playerKit on player {\n    \tname,\n    \tkit {\n    \t\tshirtSize,\n    \t\tshoeSize\n    \t}\n    }\n\n- 왼쪽을 보면 name과 kit이 반복된다. 이처럼 동일한 구조의 필드를 가져올 때 fragment 를 이용하면 오른쪽처럼 간편하게 쓸 수 있다.\n\n### Inline Fragments\n\n    query HeroForEpisode($ep: Episode!) {\n      hero(episode: $ep) {\n        name\n        ... on Droid {\n          primaryFunction\n        }\n        ... on Human {\n          height\n        }\n      }\n    }\n\n    {\n      \"data\": {\n        \"hero\": {\n          \"name\": \"R2-D2\",\n          \"primaryFunction\": \"Astromech\"\n        }\n      }\n    }\n\n- 위 쿼리에서 hero 필드는 $ep 인수에 따라 Human 또는 Droid 타입인 Character 인터페이스를 리턴한다.\n- 위 쿼리의 name 필드는 Character 인터페이스에 있는 값이다.\n- Fragment의 타입 질의 기능을 이용하면 Human 타입일 때, Droid 타입일 때 가져올 데이터를 정의할 수 있다.\n- 어떤 필드가 Interface나 union 타입으로 리턴된다면 inline fragment로 원하는 데이터만 받을 수 있다.\n\n    interface Character {\n      id: ID!\n      name: String!\n      friends: [Character]\n      appearsIn: [Episode]!\n    }\n    \n    type Human implements Character {\n      id: ID!\n      name: String!\n      friends: [Character]\n      appearsIn: [Episode]!\n      starships: [Starship]\n      totalCredits: Int\n    }\n    \n    type Droid implements Character {\n      id: ID!\n      name: String!\n      friends: [Character]\n      appearsIn: [Episode]!\n      primaryFunction: String\n    }\n\n### Directives\n\n    query PlayerDetails ($playerShirtDirective: Boolean!){\n        player(id: \"Pogba\") {\n            name,\n            kit {\n                shirtSize @skip(if: $playerShirtDirective)\n                bootSize\n            }\n        }\n    }\n\n- 특정 필드를 포함할 지, 스킵할 지를 정할 수 있다.\n- @skip : true면 스킵\n- @include : true면 포함\n\n## 📌 Mutation\n\nHTTP Method의 `POST` `PATCH` `DELETE` 와 비슷\n\n    mutation CreateReviewForEpisode($ep: Episode!, $review: ReviewInput!) {\n      createReview(episode: $ep, review: $review) {\n        stars\n        commentary\n      }\n    }\n\n    {\n      \"ep\": \"JEDI\",\n      \"review\": {\n        \"stars\": 5,\n        \"commentary\": \"This is a great movie!\"\n      }\n    }\n\n    {\n      \"data\": {\n        \"createReview\": {\n          \"stars\": 5,\n          \"commentary\": \"This is a great movie!\"\n        }\n      }\n    }\n\n**참고**\n\n[GraphQL 개념잡기](https://tech.kakao.com/2019/08/01/graphql-basic/)\n\n[Understanding Queries in GraphQL | DigitalOcean](https://www.digitalocean.com/community/tutorials/understanding-queries-in-graphql)"}}},"next":{"repository":{"post":{"__typename":"GitHub_Blob","oid":"d4a60dea091fb5b6e0163278ddd1345bb5131c7c","text":"# Pattern Searching - KMP Algorithm\n\n- Title : Pattern Searching - KMP Algorithm\n- Date : 2020-03-11\n- Category: Algorithm\n\n## KMP\n\nkmp 알고리즘은 Pattern Searching - Naive Alogorithm(TIL 알고리즘 파트에서 내용을 볼 수 있음)과 비슷하나 0~N(탐색문자길이) 탐색 중 적절하게 문자를 건너뛴다. 아래 예시로 이해해보자.\n\n- txt[] = ABABCAAA\n- pat[] = ABABD\n\n첫번째 윈도우 탐색 결과 패턴을 찾지는 못했다.\n\n- txt[] = `ABABC`AAA\n- pat[] = `ABABD`\n\nNaive 알고리즘 방식대로 이어서 두번째 윈도우를 탐색해보자.\n\n- txt[] = A`BABCA`AA\n- pat[] = `ABABD`\n\nNaive 알고리즘 방식대로 이어서 세번째 윈도우를 탐색해보자.\n\n- txt[] = AB`ABCAA`A\n- pat[] = `ABABD`\n\n하지만 KMP 알고리즘은 적절하게 문자를 건너뛰어서 첫번째 윈도우 후 다음으로 탐색할 두번째 윈도우는 아래와 같다.\n\n- txt[] = AB`ABCAA`A\n- pat[] = `ABABD`\n\n첫번째 윈도우 탐색 결과 ABAB까지는 패턴과 일치하는 것을 이용한 것이다. 패턴의 부분 문자열이기도한 ABAB는 접두사 AB와 접미사 AB가 일치한다. 다음 패턴의 시작점을 접미사의 시작점으로 할 수가 있는 거다.\n\n## lps[] 란?\n\n- lps 배열의 크기는 패턴의 길이와 같고 패턴 탐색 시 몇 개의 문자를 건너뛸지를 결정한다.\n- lps[i]는 패턴의 0~ i 까지의 부분 문자열에서의 접두어(prefix)와 접미어(suffix)가 같은 부분 문자열 중 가장 긴 것의 길이다. 단 접두어로 전체 문자열은 허용하지않는다.\n\n## Ips[] 예시\n\n\"AAAA\"\n\n- \"A\" : Ips[0] = **0** (prefix는 전체 문자열이 안됨)\n- \"AA\" : lps[1] = **1** ( prefix `A` suffix `A` )\n- \"AAA\" : lps[2] = **2** ( prefix `AA` suffix `AA` )\n- \"AAAA\" : lps[3] = **3** ( prefix `AAA` suffix `AAA` )\n\n\"ABCDE\"\n\n- \"A\" : Ips[0] = **0**\n- \"AB\" : lps[1] = **0**\n- \"ABC\" : lps[2] = **0**\n- \"ABCD\" : lps[3] = **0**\n- \"ABCDE\" : lps[4] = **0**\n\n\"AABAACAABAA\"\n\n- \"A\" : lps[0] = 0\n- \"`A` `A`\" : lps[1] = 1\n- \"AAB\" : lps[2] = 0\n- \"`A`AB`A`\" : lps[3] = 1\n- \"`AA`B`AA`\" : lps[4] = 2\n- \"AABAAC\" : lps[5] = 0\n- \"`A`ABAAC`A`\" : lps[6] = 1\n- \"`AA`BAAC`AA`\" : lps[7] = 2\n- \"`AAB`AAC`AAB`\" : lps[8] = 3\n- \"`AABA`AC`AABA`\" : lps[9] = 4\n- \"`AABAA`C`AABAA`\" : lps[10] = 5\n\n## lps를 이용해 탐색하기\n\n- 현재 txt 윈도우에서 pat[j] j는 0부터 비교를 시작하기\n- txt[i]와 pat[j]가 일치하면 i와 j를 증가하기\n- txt[i]와 pat[j]가 일치하지않으면\n  - 패턴 0~j-1과 탐색문자 i-j~i-1 까지는 일치한다는 것은 알고 있다.\n  - lps[j-1]은 패턴의 0~j-1 부분 문자열의 접두어 접미어가 일치하는 부분 문자열 중 길이가 가장 긴 값이라는 것은 위 정의를 통해 이미 알고 있다.\n  - 현재 윈도우 txt[i-j~i-1]에서 lps[j-1]만큼은 탐색할 필요는 없다.\n\n## C++\n\n\"AABAACAABAA\"\n\n- lps[0] = 0\n- i = 1, len = 0 ⇒ **lps[1] = 1**\n  - pat[1] == pat[0] , len=1, lps[1] = 1, i = 2\n- i = 2, len = 1\n  - pat[2] != pat[1] && len ! = 0, len = lps[1-1] =lps[0] = 0\n- i = 2, len = 0 ⇒ **lps[2] = 0**\n  - pat[2] ≠ pat[0] && len == 0, lps[2] = 0, i = 3\n\n```cpp\n    #include <iostream>\n    #include <cstring>\n    using namespace std;\n\n    void computeLPSArray(char* pat, int M, int *lps) {\n    \t// 현재까지 계산한 lps 중 가장 큰 값\n    \tint len = 0;\n    \t// 부분문자열 길이가 1이면 lps 값은 언제나 0\n    \tlps[0] = 0;\n\n    \t// i ~ M - 1 까지 계산\n    \tint i = 1;\n    \twhile (i < M) {\n    \t\tif (pat[i] == pat[len]) {\n    \t\t\tlen++;\n    \t\t\tlps[i] = len;\n    \t\t\ti++;\n    \t\t} else {\n    \t\t\tif (len != 0) {\n    \t\t\t\tlen = lps[len - 1];\n    \t\t\t} else {\n    \t\t\t\tlps[i] = 0;\n    \t\t\t\ti++;\n    \t\t\t}\n    \t\t}\n    \t}\n    }\n    void KMPSearch(char* pat, char* txt) {\n    \tint M = strlen(pat);\n    \tint N = strlen(txt);\n\n    \tint lps[M];\n\n    \tcomputeLPSArray(pat, M, lps);\n\n    \tint i = 0, j = 0;\n    \twhile (i < N) {\n    \t\tif (pat[j] == txt[i]) {\n    \t\t\tj++;\n    \t\t\ti++;\n    \t\t}\n    \t\tif (j == M) {\n    \t\t\tcout << \"Found Pattern at index \" << (i - j) << endl;\n    \t\t\tj = lps[j - 1];\n    \t\t}\n    \t\t// 패턴이 일치하지않으면\n    \t\telse if (i < N && pat[j] != txt[i]) {\n    \t\t\t// 미스매칭이 1~M이면\n    \t\t\tif (j != 0)\n    \t\t\t\tj = lps[j - 1];\n    \t\t\telse // 첫 문자부터 미스매칭\n    \t\t\t\ti = i + 1;\n    \t\t}\n    \t}\n    }\n    int main() {\n    \tchar txt[] = \"AABAACAADAABAABA\";\n    \tchar pat[] = \"AABA\";\n    \tKMPSearch(pat, txt);\n    \treturn 0;\n    }\n```\n"}}}},"pageContext":{"id":"cf3a7b61b8bfe799d47adca29daf2b3c341d13a4","previousPostId":"94ca86fd0ce6c18a378cb92e9a8e202b4974c91f","nextPostId":"d4a60dea091fb5b6e0163278ddd1345bb5131c7c"}},"staticQueryHashes":["2685952063","2841359383"]}