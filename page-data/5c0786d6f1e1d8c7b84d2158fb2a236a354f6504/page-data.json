{"componentChunkName":"component---src-templates-blog-post-js","path":"/5c0786d6f1e1d8c7b84d2158fb2a236a354f6504","result":{"data":{"site":{"siteMetadata":{"title":"보노보노의 평화로운 개발 이야기"}},"current":{"repository":{"post":{"__typename":"GitHub_Blob","oid":"5c0786d6f1e1d8c7b84d2158fb2a236a354f6504","text":"# 프로그래머스 [3차] n진수게임 Javascript\n\n- Title : 프로그래머스 [3차] n진수게임 Javascript\n- Date : 2019-11-28\n- Category: 알고리즘 풀이\n\n# 문제 설명\n\n튜브가 활동하는 코딩 동아리에서는 전통적으로 해오는 게임이 있다. 이 게임은 여러 사람이 둥글게 앉아서 숫자를 하나씩 차례대로 말하는 게임인데, 규칙은 다음과 같다.\n\n숫자를 0부터 시작해서 차례대로 말한다. 첫 번째 사람은 0, 두 번째 사람은 1, … 열 번째 사람은 9를 말한다.  \n10 이상의 숫자부터는 한 자리씩 끊어서 말한다. 즉 열한 번째 사람은 10의 첫 자리인 1, 열두 번째 사람은 둘째 자리인 0을 말한다.  \n이렇게 게임을 진행할 경우,  \n0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 0, 1, 1, 1, 2, 1, 3, 1, 4, …  \n순으로 숫자를 말하면 된다.\n\n한편 코딩 동아리 일원들은 컴퓨터를 다루는 사람답게 이진수로 이 게임을 진행하기도 하는데, 이 경우에는  \n0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, …  \n순으로 숫자를 말하면 된다.\n\n이진수로 진행하는 게임에 익숙해져 질려가던 사람들은 좀 더 난이도를 높이기 위해 이진법에서 십육진법까지 모든 진법으로 게임을 진행해보기로 했다.  \n숫자 게임이 익숙하지 않은 튜브는 게임에 져서 벌칙을 받는 굴욕을 피하기 위해, 자신이 말해야 하는 숫자를 스마트폰에 미리 출력해주는 프로그램을 만들려고 한다. 튜브의 프로그램을 구현하라.\n\n# 풀이\n\n```javascript\nfunction solution(n, t, m, p) {\n  var answer = \"\";\n  var game = new Array();\n  var number = 0;\n  while (game.length < t * m) {\n    let tmp = number;\n    let arrTmp = new Array();\n    while (tmp >= n) {\n      arrTmp.unshift(tmp % n); // 배열 맨 앞에 삽입\n      tmp = Math.floor(tmp / n); // Math.floor() 소숫점 내림\n    }\n    arrTmp.unshift(tmp);\n    game.push(...arrTmp); // game.push.apply(game, arrTmp);와 같음 확장연산자(e6)\n    //game = game.concat(arrTmp); // 배열 합치기 느리다.\n    number++;\n  }\n\n  for (let i = p - 1; i < game.length; i = i + m) {\n    answer += game[i].toString(n).toUpperCase(); // toString() number를 n진수 형태로 반환한다. abcdef를 소문자 형태로 반환해서 toUpperCase()를 사용했다.\n    if (answer.length == t) break;\n  }\n  return answer;\n}\n```\n\n## Number.prototype.toString([radix]]) 메서드\n\n- Number.prototype.toString() 은 Number 객체를 문자열로 반환하는 메서드다.\n- radix는 진수를 나타내는 기수의 값으로 2~36 범위의 정수다. 이 범위를 벗어나는 radix가 주어지면 RangeError가 발생한다. (default는 10진수)\n\nNumber 객체는 Object 객체의 toString() 메서드(**Object.prototype.toString()**)를 오버라이딩했다.\n그래서 Number 객체에서 toString() 메서드를 사용하면 특정 진수로 객체를 표현한 문자열을 리턴받을 수 있는 것이다.\n\n```javascript\nlet number = 254;\nconsole.log(number.toString(16)); // fe 출력\n```\n\n## Array.prototype.unshift([...elementN])\n\n새로운 요소를 배열의 맨 앞쪽에 추가하고, 배열의 길이를 리턴\n\n```javascript\nlet arr = [1, 2];\narr.unshift(0); // [0,1,2]\narr.unshift(-2, -1); // [-2, -1, 0, 1, 2]\n```\n\n## Array.prototype.push vs Array.prototype.concat\n\n처음에는 **game = game.concat(arrTmp)** 식으로 배열을 합쳤다. 근데 시간이 너무 많이 소요되길래 **game.push(...arrTmp)** 이렇게 바꿨더니 효율성이 좀 좋아진 듯 하다. 왜 그럴까?...\n\n[https://dev.to/uilicious/javascript-array-push-is-945x-faster-than-array-concat-1oki](https://dev.to/uilicious/javascript-array-push-is-945x-faster-than-array-concat-1oki) 이 글을 보면 알 수 있다.\n\n즉 concat은 .push로 원본 배열을 수정하면서 **새 배열**을 만들기때문에 느리고 push는 원본 배열의 뒤에 배열을 추가하며 원본 배열을 변경하기 때문에 concat 보다는 빠르다.\n\n## 다른 사람 풀이\n\n다른 사람 풀이를 봤더니 이렇게 간단하게도 풀 수 있다는 걸 알았다.\n\n```javascript\nfunction solution(n, t, m, p) {\n  let answer = \"\",\n    numbers = [],\n    j = 0;\n\n  for (let i = p; answer.length < t; i += m) {\n    let order = i - 1;\n\n    while (numbers[order] === undefined) {\n      j.toString(n)\n        .toUpperCase()\n        .split(\"\")\n        .forEach(v => numbers.push(v));\n      j++;\n    }\n    answer += numbers[order];\n  }\n  return answer;\n}\n```\n"}}},"previous":{"repository":{"post":{"__typename":"GitHub_Blob","oid":"75b2859bd64143393ac340b0b9c506a3ac7bbcba","text":"# 프로그래머스 조이스틱 Javascript\n\n- Title : 프로그래머스 조이스틱 Javascript\n- Date : 2019-11-28\n- Category: 알고리즘 풀이\n\n# 문제 설명\n\n조이스틱으로 알파벳 이름을 완성하세요. 맨 처음엔 A로만 이루어져 있습니다.  \nex) 완성해야 하는 이름이 세 글자면 AAA, 네 글자면 AAAA\n\n조이스틱을 각 방향으로 움직이면 아래와 같습니다.  \n▲ - 다음 알파벳  \n▼ - 이전 알파벳 (A에서 아래쪽으로 이동하면 Z로)  \n◀ - 커서를 왼쪽으로 이동 (첫 번째 위치에서 왼쪽으로 이동하면 마지막 문자에 커서)  \n▶ - 커서를 오른쪽으로 이동\n\n예를 들어 아래의 방법으로 JAZ를 만들 수 있습니다.\n\n- 첫 번째 위치에서 조이스틱을 위로 9번 조작하여 J를 완성합니다.\n- 조이스틱을 왼쪽으로 1번 조작하여 커서를 마지막 문자 위치로 이동시킵니다.\n- 마지막 위치에서 조이스틱을 아래로 1번 조작하여 Z를 완성합니다.\n\n따라서 11번 이동시켜 \"JAZ\"를 만들 수 있고, 이때가 최소 이동입니다.\n\n만들고자 하는 이름 name이 매개변수로 주어질 때, 이름에 대해 조이스틱 조작 횟수의 최솟값을 return 하도록 solution 함수를 만드세요.\n\n# 제한 사항\n\n- name은 알파벳 대문자로만 이루어져 있습니다.\n- name의 길이는 1 이상 20 이하입니다.\n\n# 풀이\n\n```javascript\nfunction solution(name) {\n  var arrName = Array(name.length).fill(\"A\"); // 초기값 'A...'로 셋팅해서 name과 같을 때까지 반복 돌림\n  var index = 0; // 조작할 인덱스\n  var answer = 0; // 조작 횟수\n  while (arrName.join(\"\") !== name) {\n    // 현재 인덱스의 알파벳 변경\n    arrName[index] = name[index];\n    // 알파벳 조작 횟수\n    answer += alpha(name[index]);\n    // 다음에 조작할 인덱스 찾기\n    let obj = findPos(index, name, arrName);\n    if (obj !== null) {\n      answer += obj.diff;\n      index = obj.index;\n    }\n  }\n  return answer;\n}\n\nfunction findPos(index, name, arrName) {\n  var nextRightIndex = (index + 1) % name.length;\n  var nextLeftIndex = (index - 1 + name.length) % name.length;\n  var moveSize = 1;\n\n  // 최소값을 찾는 거니깐 or로 해서 동시 탐색\n  // 'A'가 아니면서 이미 변경처리한 알파벳이 아닌 인덱스 찾기\n  while (nextRightIndex != index || nextLeftIndex != index) {\n    if (\n      name[nextRightIndex] !== \"A\" &&\n      arrName[nextRightIndex] !== name[nextRightIndex]\n    ) {\n      return {\n        index: nextRightIndex,\n        diff: moveSize\n      };\n    }\n    if (\n      name[nextLeftIndex] !== \"A\" &&\n      arrName[nextLeftIndex] !== name[nextLeftIndex]\n    ) {\n      return {\n        index: nextLeftIndex,\n        diff: moveSize\n      };\n    }\n    nextRightIndex = ++nextRightIndex % name.length;\n    nextLeftIndex = (--nextLeftIndex + name.length) % name.length;\n    moveSize++;\n  }\n  return null;\n}\n\nfunction alpha(n) {\n  return Math.min(\n    n.charCodeAt(0) - \"A\".charCodeAt(0),\n    \"Z\".charCodeAt(0) - n.charCodeAt(0) + 1\n  );\n}\n```\n"}}},"next":{"repository":{"post":{"__typename":"GitHub_Blob","oid":"e4b0c00bcef7f5a64f4941b849fa6cb2fec43752","text":"# Liquid 문법\n\n- Title : Liquid 문법\n- Date : 2019-03-05\n- Category: Jekyll\n\njekyll 블로그 운영시 알아야할 필수 liquid 문법\n\n[liquid 문법 정리된 사이트](https://shopify.github.io/liquid/basics/types/)\n\n## Liquid\n\n<table>\n<thead>\n\t<tr><th>category</th><th>Input</th><th>Output</th></tr>\n</thead>\n<tbody>\n\t<tr>\n\t\t<td>Objects</td>\n\t\t<td>\n\t\t{ { page.title } }\t\n\t\t</td>\n\t\t<td>Introduction</td>\n\t</tr>\n\t<tr>\n\t\t<td>Tags</td>\n\t\t<td>\n\t\t{ % if user % } <br/>\n\t\t  &nbsp;&nbsp;Hello { { user.name } }! <br/>\n\t\t{ % endif % }\n\t\t</td>\n\t\t<td>Hello Adam!</td>\n\t</tr>\n\t<tr>\n\t\t<td>Filters</td>\n\t\t<td>\n\t\t{ { \"/my/fancy/url\" | append: \".html\" } }\n\t\t</td>\n\t\t<td>/my/fancy/url.html</td>\n\t</tr>\n\t<tr>\n\t\t<td>Filters</td>\n\t\t<td>\n\t\t{ { \"adam!\" | capitalize | prepend: \"Hello \" } }\n\t\t</td>\n\t\t<td>Hello Adam!</td>\n\t</tr>\n\t<tr>\n\t\t<td>assing String</td>\n\t\t<td>\n\t\t{ % assign my_string = \"Hello World!\" % }\n\t\t</td>\n\t\t<td>String 타입</td>\n\t</tr>\n\t<tr>\n\t\t<td>assing Number</td>\n\t\t<td>\n\t\t{ % assign my_int = 25 % }\n\t\t</td>\n\t\t<td>Number 타입</td>\n\t</tr>\n\t<tr>\n\t\t<td>assing Boolean</td>\n\t\t<td>\n\t\t{ % assign foo = true % }\n\t\t</td>\n\t\t<td>Boolean 타입</td>\n\t</tr>\n\t<tr>\n\t\t<td>Nil (empty)</td>\n\t\t<td>\n\t\tThe current user is { { user.name } }\n\t\t</td>\n\t\t<td>The current user is</td>\n\t</tr>\n\t<tr>\n\t\t<td>Array</td>\n\t\t<td>\n\t\t{ % for user in site.users % }<br/>\n\t\t  &nbsp;&nbsp; { { user } }<br/>\n\t\t{ % endfor % }\n\t\t</td>\n\t\t<td>Tobi Laura Tetsuro Adam</td>\n\t</tr>\n\t<tr>\n\t\t<td>Array</td>\n\t\t<td>\n\t\t{ { site.users[0] } }<br/>\n\t\t{ { site.users[1] } }<br/>\n\t\t{ { site.users[3] } }\n\t\t</td>\n\t\t<td>Tobi <br/>\n\t\tLaura <br/>\n\t\tAdam</td>\n\t</tr>\n\t<tr>\n\t\t<td>plus</td>\n\t\t<td>\n\t\t{ { 4 | plus: 2 } }\n\t\t</td>\n\t\t<td>6</td>\n\t</tr>\n\t<tr>\n\t\t<td>limit</td>\n\t\t<td>\n\t\t{ % for item in array limit:2 % }<br/>\n\t       &nbsp;&nbsp; { { item } }<br/>\n\t\t{ % endfor % }\n\t\t</td>\n\t\t<td>limit를 통해 2개까지만 반복문을 돌린다.</td>\n\t</tr>\n</tbody>\n</table>\n"}}}},"pageContext":{"id":"5c0786d6f1e1d8c7b84d2158fb2a236a354f6504","previousPostId":"75b2859bd64143393ac340b0b9c506a3ac7bbcba","nextPostId":"e4b0c00bcef7f5a64f4941b849fa6cb2fec43752"}},"staticQueryHashes":["2841359383"]}