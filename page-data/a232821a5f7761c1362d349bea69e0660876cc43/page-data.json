{"componentChunkName":"component---src-templates-blog-post-js","path":"/a232821a5f7761c1362d349bea69e0660876cc43","result":{"data":{"site":{"siteMetadata":{"title":"보노보노의 평화로운 개발 이야기"}},"current":{"repository":{"post":{"__typename":"GitHub_Blob","oid":"a232821a5f7761c1362d349bea69e0660876cc43","text":"# 프로그래머스 2016년 Javascript\n\n- Title : 프로그래머스 2016년 Javascript\n- Date : 2019-11-29\n- Category: 알고리즘 풀이\n\n# 문제 설명\n\n2016년 1월 1일은 금요일입니다. 2016년 a월 b일은 무슨 요일일까요? 두 수 a ,b를 입력받아 2016년 a월 b일이 무슨 요일인지 리턴하는 함수, solution을 완성하세요. 요일의 이름은 일요일부터 토요일까지 각각 SUN,MON,TUE,WED,THU,FRI,SAT 입니다.\n\n를 들어 a=5, b=24라면 5월 24일은 화요일이므로 문자열 TUE를 반환하세요.\n\n# 제한 조건\n\n- 2016년은 윤년입니다.\n- 2016년 a월 b일은 실제로 있는 날입니다. (13월 26일이나 2월 45일같은 날짜는 주어지지 않습니다)\n\n# 풀이\n\n```javascript\nfunction solution(a, b) {\n  const month = [0, 31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];\n  const day = [\"FRI\", \"SAT\", \"SUN\", \"MON\", \"TUE\", \"WED\", \"THU\"];\n\n  let answer = b - 1;\n  for (let i = 1; i < a; i++) answer += month[i];\n\n  return day[answer % 7];\n}\n```\n\n쉬운 문제여서 금방 풀었지만, 뭔가 자바스크립트스럽지않아서 탐탁지않았다.  \n그래서 자바스크립트의 **reduce** 와 **slice** 메서드를 이용해서 다시 풀어보았다.\n\n```javascript\nfunction solution(a, b) {\n  const month = [0, 31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];\n  const day = [\"FRI\", \"SAT\", \"SUN\", \"MON\", \"TUE\", \"WED\", \"THU\"];\n\n  let answer = b - 1;\n  if (a > 1) {\n    answer += month.slice(1, a).reduce((accumlator, currentValue) => {\n      return accumlator + currentValue;\n    });\n  }\n\n  return day[answer % 7];\n}\n```\n\n# Array.prototype.reduce()\n\nreduce() 메서드는 배열의 각 요소에 reducer 함수를 실행하여 계산의 누적 결과값을 반환한다.\n\n```javascript\narr.reduce((accumulator, currentValue[,currentIndex, array][,initialValue]) => {\n //\n return //\n});\n```\n\n리듀서 함수 인수\n\n- accumulator : 콜백(리듀서함수)의 반환값 누적\n- currentValue : 처리할 현재 요소\n- 옵션 currentIndex : 처리할 현재 요소의 인덱스로 initialValue가 있으면 0, 아니면 1부터 시작\n- 옵션 array : reduce()를 호출한 배열\n\n- initialValue : 리듀서 함수 최초 호출에서 첫번째 인수로 제공할 값, 제공안하면 배열의 첫번째 요소를 사용한다. 만약 빈 배열에서 초기값 없이 reduce() 호출하면 에러난다.\n"}}},"previous":{"repository":{"post":{"__typename":"GitHub_Blob","oid":"d473c7d17840e5d9159d068cd069263b08e30591","text":"# 프로그래머스 2xn 타일링 Javascript\n\n- Title : 프로그래머스 2xn 타일링 Javascript\n- Date : 2019-11-29\n- Category: 알고리즘 풀이\n\n# 문제 설명\n\n가로 길이가 2이고 세로의 길이가 1인 직사각형모양의 타일이 있습니다. 이 직사각형 타일을 이용하여 세로의 길이가 2이고 가로의 길이가 n인 바닥을 가득 채우려고 합니다. 타일을 채울 때는 다음과 같이 2가지 방법이 있습니다.\n\n타일을 가로로 배치 하는 경우  \n타일을 세로로 배치 하는 경우\n\n직사각형의 가로의 길이 n이 매개변수로 주어질 때, 이 직사각형을 채우는 방법의 수를 return 하는 solution 함수를 완성해주세요.\n\n# 제한 사항\n\n- 가로의 길이 n은 60,000이하의 자연수 입니다.\n- 경우의 수가 많아 질 수 있으므로, 경우의 수를 1,000,000,007으로 나눈 나머지를 return해주세요.\n\n# 풀이\n\n문제를 보는 순간 규칙이 있을 거 같다는 생각을 했다.  \n근데 그 규칙 찾는 데 한참 걸렸다.. ㅠ\\_\\_ㅠ\n\n결론부터 말하자면, 이 문제의 점화식은 **DP[N] = DP[N-1][n-2]** 다. 그리고 n이 최대 60000 이므로 재귀를 쓰는 것보다 메모이제이션을 이용하는 게 낫다고 판단했다.\n\n아래는 점화식 도출 과정이다.\n\n- n = 0, 1개\n- n = 1, 1개\n- n = 2, 2개 (DP[1] + DP[0])\n- n = 3, 3개 (DP[2] + DP[1])\n- n = 4, 4개 (DP[3] + DP[2])\n- ....\n\n```javascript\nfunction solution(n) {\n  const memo = Array(n + 1).fill(0);\n  memo[0] = 1;\n  memo[1] = 1;\n  for (let i = 2; i < n + 1; i++) {\n    memo[i] = (memo[i - 1] + memo[i - 2]) % 1000000007;\n  }\n  return memo[n];\n}\n```\n"}}},"next":{"repository":{"post":{"__typename":"GitHub_Blob","oid":"002604cb528a34c3c941c0895d530037ce7296ec","text":"# 프로그래머스 모의고사 Javascript\n\n- Title : 프로그래머스 모의고사 Javascript\n- Date : 2019-11-28\n- Category: 알고리즘 풀이\n\n# 문제 설명\n\n수포자는 수학을 포기한 사람의 준말입니다. 수포자 삼인방은 모의고사에 수학 문제를 전부 찍으려 합니다. 수포자는 1번 문제부터 마지막 문제까지 다음과 같이 찍습니다.\n\n1번 수포자가 찍는 방식: 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, ...  \n2번 수포자가 찍는 방식: 2, 1, 2, 3, 2, 4, 2, 5, 2, 1, 2, 3, 2, 4, 2, 5, ...  \n3번 수포자가 찍는 방식: 3, 3, 1, 1, 2, 2, 4, 4, 5, 5, 3, 3, 1, 1, 2, 2, 4, 4, 5, 5, ...\n\n1번 문제부터 마지막 문제까지의 정답이 순서대로 들은 배열 answers가 주어졌을 때, 가장 많은 문제를 맞힌 사람이 누구인지 배열에 담아 return 하도록 solution 함수를 작성해주세요.\n\n# 제한 조건\n\n- 시험은 최대 10,000 문제로 구성되어있습니다.\n- 문제의 정답은 1, 2, 3, 4, 5중 하나입니다.\n- 가장 높은 점수를 받은 사람이 여럿일 경우, return하는 값을 오름차순 정렬해주세요.\n\n# 풀이\n\n```javascript\nfunction solution(answers) {\n  const person_ans = [\n    [1, 2, 3, 4, 5],\n    [2, 1, 2, 3, 2, 4, 2, 5],\n    [3, 3, 1, 1, 2, 2, 4, 4, 5, 5]\n  ];\n\n  const scores = Array(3).fill(0);\n\n  for (let i = 0; i < answers.length; i++) {\n    if (person_ans[0][i % 5] === answers[i]) scores[0]++;\n    if (person_ans[1][i % 8] === answers[i]) scores[1]++;\n    if (person_ans[2][i % 10] === answers[i]) scores[2]++;\n  }\n\n  let max = Math.max(...scores);\n\n  let answer = [];\n\n  scores.forEach((element, index) => {\n    if (max == element) answer.push(index + 1);\n  });\n\n  return answer;\n}\n```\n"}}}},"pageContext":{"id":"a232821a5f7761c1362d349bea69e0660876cc43","previousPostId":"d473c7d17840e5d9159d068cd069263b08e30591","nextPostId":"002604cb528a34c3c941c0895d530037ce7296ec"}},"staticQueryHashes":["2685952063","2841359383"]}