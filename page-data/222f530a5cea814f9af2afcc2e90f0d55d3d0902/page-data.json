{"componentChunkName":"component---src-templates-blog-post-js","path":"/222f530a5cea814f9af2afcc2e90f0d55d3d0902","result":{"data":{"site":{"siteMetadata":{"title":"보노보노의 평화로운 개발 이야기"}},"current":{"repository":{"post":{"__typename":"GitHub_Blob","oid":"222f530a5cea814f9af2afcc2e90f0d55d3d0902","text":"# 운영체제 - 운영체제 주요 서비스 간략하게!\n\n- Title : 운영체제 - 운영체제 주요 서비스 간략하게!\n- Date : 2019-12-25\n- Category: 운영체제\n\n경성대학교 양희재 교수님 강의를 듣고 정리했습니다.\n\n# # 운영체제의 주요 서비스\n\n- 프로세스 관리\n- 주 기억장치 관리(메인 메모리 관리)\n- 파일 관리(하드디스크의 파일)\n- 보조기억장치 관리\n- 입출력 장치 관리(프린트, 키보드, 마우스..)\n- 네트워킹\n- 보호\n- 기타..\n\n## 프로세스 관리\n\n메인 메모리에서 실행 중인 프로그램을 프로세스라고 한다.\n\n- 프로세스의 생성, 소멸(creation, deletion)\n- 프로세스 활동 일시 중지, 활동 재개(suspend, resume)\n- 프로세스간 통신(interprocess communication: IPC)\n- 프로세스간 동기화(synchromization)\n- 교착 상태 처리(deadlock handling)\n\n## 주기억장치관리(메인메모리)\n\n- 프로세스에게 메모리 공간 할당 (allocation)\n- 메모리의 어느 부분이 어느 프로세스에게 할당되었는가 추적 및 감시\n- 프로세스 종료 시 메모리 회수 (deallocation)\n- 메모리의 효과적 사용\n- 가상 메모리: 물리적 실제 메모리보다 큰 용량 갖도록\n\n## 파일 관리\n\n원래 디스크는 판 위의 Track과 sector의 집합이지만 파일이라는 논리적 관점으로 볼 수 있게 운영체제가 처리해준다.\n\n- 파일의 생성과 삭제 (file creation & deletion)\n- 디렉토리(directory)의 생성과 삭제 (또는 폴더 folder)- 기본동작지원: open, close, read, write, create, delete\n- Track/sector – file 간의 매핑(mapping) – 백업(backup)\n\n## 보조기억장치 관리\n\n하드디스크, 플래시 메모리.\n\n- 빈 공간 관리 (free space management) - 포맷 후 비워져있는 Block(섹터/트랙 집합)은 사용하다보면 비워져있는 공간, 사용되고 있는 공간으로 나눠진다. 이 공간을 관리하는 것\n- 저장공간 할당 (storage allocation)\n- 디스크 스케쥴링 (disk scheduling) : 어떻게 하면 헤더를 적게 움직이면서 원하는 트랙이나 섹터를 읽을 수 있을까?\n\n## 입출력 장치 관리\n\n- 장치 드라이브\n- 입출력 장치의 성능 향상 : <span class=\"clr-note\">buffering</span>(입출력 장치에서 읽은 내용을 일단 메모리에 가져오는 것, 한번 메모리에 가져오면 일단 빠르게 읽을 수 있음), <span class=\"clr-note\">caching</span>, <span class=\"clr-note\">spooling</span>(메모리 대신에 하드디스크를 중간 매체로 사용하는 것, 프린트로 출력할 내용을 디스크에 저장해서 cpu가 다른 일 할 수 있게)\n\n## 시스템 콜\n\n운영체제 서비스를 받기 위한 호출\n\n- <span class=\"clr-note\">Process</span>: end, abort, load, execute, create, terminate, get/set\n  attributes, wait event, signal event\n- <span class=\"clr-note\">Memory</span>: allocate, free\n- <span class=\"clr-note\">File</span>: create, delete, open, close, read, write, get/set attributes\n- <span class=\"clr-note\">Device</span>: request, release, read, write, get/set attributes,\n  attach/detache devices\n- <span class=\"clr-note\">Information</span>: get/set time, get/set system data\n- <span class=\"clr-note\">Communication</span>: socket, send, receive\n"}}},"previous":{"repository":{"post":{"__typename":"GitHub_Blob","oid":"492e9413883721c4edee853633cd2b4713e6aade","text":"# 운영체제 - 이중모드, 하드웨어 보호\n\n- Title : 운영체제 - 이중모드, 하드웨어 보호\n- Date : 2019-12-25\n- Category: 운영체제\n\n경성대학교 양희재 교수님 강의를 듣고 정리했습니다.\n\n# # 이중모드(Dual Mode)\n\n## 이중모드의 등장 배경은?\n\n하나의 서버 컴퓨터를 여러 사람이 동시에 사용하는 또는 한 사람이 여러 개의 프로그램을 동시에 사용하는 환경에서 한 사람의 고의/실수 프로그램은 전체에 영향을 끼치게 된다. 예를 들어, 한 사용자 프로그램에서 <code class=\"codetainer\">STOP, HALT, RESET, SET_TIMER, SET_HW</code>등의 명령을 실행한다면 컴퓨터 전체가 영향을 받는다. 즉, <span class=\"clr-note\">시스템에 치명적인 명령은 관리자만 실행할 수 있도록</span> 하기 위해 이중모드(사용자모드, 관리자모드)가 등장하게 된 것이다.\n\n## 이중모드란?\n\n<code class=\"codetainer\">시스템(system) 모드 = 관리자(supervisor) 모드 = 모니터(monitor) 모드 = 특권(priviliged) 모드</code> 와 <code class=\"codetainer\">사용자 모드</code>가 있다. 시스템 모드일 때, <code class=\"codetainer\">STOP, HALT</code> 와 같은 <code class=\"codetainer\">특권 명령</code>을 내릴 수 있고 사용자 프로그램에서는 치명적 명령을 사용 못하게 막는다.\n\n## 이중모드는 어떻게 동작할까?\n\nCPU에 있는 <code class=\"codetainer\">레지스터</code>는 비트를 가지고 있으며 각 비트는 <code class=\"codetainer\">carry, negative, zero, overflow</code> 발생을 알려주는 플래그 역할을 한다. 여기에 이중모드를 위한 비트를 추가하여 <span class=\"clr-note\">시스템 모드면 1</span>을 <span class=\"clr-note\">사용자 모드면 0</span>으로 표시한다. <br/><br/>\n![이중모드](https://raw.githubusercontent.com/devgaram/TIL/master/OperatingSystem/images/2019-12-25-img/dual-mode.png)<br/>\n\n- 운영체제 서비스를 실행될 때는 <span class=\"clr-note\">관리자 모드</span>\n- 사용자 프로그램 실행될 때는 <span class=\"clr-note\">사용자 모드</span>\n- 하드웨어/소프트웨어 인터럽트 발생하면 <span class=\"clr-note\">관리자 모드</span>\n- 운영체제 서비스가 끝나면 다시 <span class=\"clr-note\">사용자 모드</span>\n\n## 이중모드 예시\n\n전원을 켰을 때 하드 디스크에 있는 운영체제가 메인 메모리에 올라가는 것은 **시스템 모드**에서 동작한다. 부팅이 끝나면 **사용자 모드**가 된다. 게임 아이콘을 더블클릭하여 인터럽트가 발생하면 다시 **시스템 모드**가 되어 인터럽트 서비스 루틴이 게임을 메인 메모리에 올리고 cpu가 실행할 수 있도록 한다. 다시 **사용자 모드**로 돌아오고 열심히 게임을 한다. 이제 게임 스코어를 하드디스크에 저장해보자. 게임 프로그램이 직접 하드디스크에 저장하는 것이 아니라 소프트웨어 인터럽트를 걸어 CPU가 지금 하던 일을 멈추고 운영체제의 ISR로 점프해서 실행하도록 한다. 이 때는 **시스템 모드**이다. ISR이 완료되면 레지스터 비트를 0으로 하여 **사용자 모드**로 만들고 다시 게임으로 돌아오게 된다.\n\n하드웨어 인터럽트도 마찬가지다. **사용자 모드**에서 마우스를 움직이게 되면 CPU로 인터럽트를 보내 **시스템 모드**로 바꾼 후 ISR을 실행한다. 완료되면 다시 **사용자 모드**가 된다. 즉, <span class=\"clr-note\">하나의 프로그램이 실행되는 동안 사용자 모드, 시스템 모드가 계속 반복된다.</span>\n\n## 만약 사용자 프로그램에서 특권 명령을 내리면?\n\nCPU는 레지스터의 모니터 비트를 확인하여 특권 명령이 사용자 모드일 때 내려지면 인터럽트를 발생시킨다. 운영체제의 인터럽트 서비스 루틴이 실행되고 이 ISR은 잘못된 시도를 한 프로그램을 강제 종료시켜 메모리에서 사라지게 한다.\n\n# # 하드웨어 보호\n\n## 입출력 장치 보호\n\n사용자 A가 프린터를 사용 중인 상황에서 사용자 B가 프린트 출력 명령을 내리면 어떻게 될까? 운영체제가 없다면 A 사용자꺼 한 줄, B 사용자꺼 한 줄..식으로 출력이 될 것이다. 이같은 프린트 혼선, 리셋 등의 상황이 적절한가? 다른 예시로 하드디스크에 저장된 A의 정보를 B가 마음대로 읽고 쓰는 상황을 생각해보자. 이 것도 적절한가? 답은 <span class=\"clr-note\">NO!!</span>\n\n**어떻게 해야할까?** 컴퓨터는 바로 이렇게 해결했다.\n\n입출력 명령인 <code class=\"codetainer\">IN, OUT</code>을 특권 명령으로 하여 사용자가 직접 입출력 명령을 내릴 수 없도록 했다. 만약 사용자가 직접 내리면 <code class=\"codetainer\">Privileged instruction violation</code>이기에 강제로 프로그램을 종료시킨다. 즉, 사용자가 입출력을 하기 위해서는 <code class=\"codetainer\">소프트웨어 인터럽트</code>를 발생시켜 운영체제에 요청해야한다. 인터럽트에 의해 CPU가 시스템 모드로 전환하고 운영체제의 ISR을 실행하면 운영체제가 입출력을 대행한다. ISR에는 요청이 적절한 지를 확인하는 코드가 있어 올바른 요청에만 실행된다. 만약, 올바른 요청이 아니면 운영체제는 이를 거부한다. ISR이 완료되면 다시 사용자 모드로 복귀된다.\n\n## 메모리 보호\n\n메인 메모리에는 운영체제와 여러 개의 사용자 프로그램이 동시에 있기 때문에 다른 사용자 메모리 또는 운영체제에 접근하는 것을 막아야 한다. 보호하지 않으면 다른 사용자 정보나 프로그램을 해킹하거나 운영체제를 해킹하는 경우가 생긴다.\n\n**어떻게 메모리를 보호할까?** 컴퓨터는 바로 이렇게 해결했다.\n\nCPU와 메인 메모리 사이는 Bus로 연결되어있고 CPU -> 메모리는 <code class=\"codetainer\">Address Bus</code>, 메모리 -> CPU는 <code class=\"codetainer\">Data Bus</code>로 부른다. 컴퓨터는 다른 메모리 영역의 침범을 막기 위해 Address Bus에 <code class=\"codetainer\">MMU(Memory Management Unit)</code>을 두었고 문지기 역할을 하도록 했다. MMU에는 <code class=\"codetainer\">Base, Limit</code>가 있고 값 설정은 특권 명령으로 운영체제만 바꿀 수 있다. MMU는 Base~Limit 사이면 통과시키고 범위 밖이면 CPU로 인터럽트 신호를 발생시켜 해당 명령을 내린 프로그램을 종료시킨다. 이처럼 다른 사용자 또는 운영체제 영역 메모리에 접근하려는 것을 <code class=\"codetainer\">Segment Violation</code> 이라고 한다.\n\n## cpu 보호\n\n한 사용자가 <code class=\"codetainer\">while(n = 1)</code> 과 같은 명령을 실행하면 CPU를 계속 독점하여 다른 사용자의 프로그램을 실행할 수 없게 된다. 이를 막기 위해 CPU 보호가 필요한 것이다. <span class=\"clr-note\">컴퓨터는 Timer를 두어 일정 시간 경과 시 타이머 인터럽트를 발생시키는 방법으로 해결했다.</span> 일정 신호 주기로 타이머가 CPU에 인터럽트를 걸게 되면 CPU는 ISR을 실행시켜 프로그램이 CPU를 너무 오랜 시간 독점하고 있는 지를 확인한다. 독점하고 있다고 판단되면 CPU를 강제 전환시켜 다른 프로그램을 실행토록 한다.\n"}}},"next":{"repository":{"post":{"__typename":"GitHub_Blob","oid":"f6cb269db79cf2dc5897ed2c1c5e4e7e9526daf8","text":"# 운영체제 - 프로세스 관리\n\n- Title : 운영체제 - 프로세스 관리\n- Date : 2019-12-25\n- Category: 운영체제\n\n경성대학교 양희재 교수님 강의를 듣고 정리했습니다.\n\n# # 프로세스\n\n## 프로그램 vs 프로세스\n\n<code class=\"codetainer\">Process = task = job</code>  \n게임 프로그램이 하드디스크에 있으면 아무 것도 할 수 없다. 게임을 하기 위해 더블 클릭하면 게임 프로그램이 메인 메모리에 올라와서 실행 된다. 이렇게 실행 중인 프로그램을 <code class=\"codetainer\">프로세스</code>라고 한다\n\n## 프로세스 상태\n\n하나의 컴퓨터는 여러 개의 프로세스를 돌리고 CPU는 일정 시간을 나눠주어 이 프로세스들을 관리한다. 이 때, 프로세스는 <code class=\"codetainer\">new, ready, running, waiting, terminated</code> 상태를 겪게 된다.\n\n![프로세스 상태](https://raw.githubusercontent.com/devgaram/TIL/master/OperatingSystem/images/2019-12-25-img/process.png)<br/>\n\n- new : 하드디스크의 프로그램이 메인 메모리에 올라왔을 때\n- ready : 모든 초기화를 끝내고 실행 준비가 되었을 때\n- running : 실제로 CPU에서 실행하고 있을 때\n- waiting : 다시 CPU 할당 받을 때까지 기다릴 때\n- terminated : 프로세스가 종료된 상태\n\n- (1) : 프린트 출력 같은 I/O 발생 시 Waiting으로 감\n- (2) : I/O 완료되면 다시 Ready로 감\n- (3) : Time sharing system 에서는 일정 주기마다 프로세스 전환 인터럽트가 발생하는 데, 프로세스에게 주어진 CPU 사용 시간이 지나면 자동으로 이 프로세스는 Ready 상태로 가고 다른 프로세스가 running 상태가 된다.\n\n# # PCB(Process Control Block)\n\n사람으로 비유하면 주민등록증과 같고 프로세스를 잘 관리하기 위해서 PCB가 필요하다.\n\n- 하나의 프로세스에 하나의 PCB가 있다.(PCB는 운영체제의 프로세스 관리 부서에 있음)\n- <span class=\"clr-note\">Task Control Block(TCB)</span> 라고도 한다.\n- 프로세스에 대한 모든 정보가 들어있다.\n- <span class=\"clr-note\">process state(running, ready, waiting, …)</span>\n- <span class=\"clr-note\">PC</span> : 다시 CPU 돌아왔을 때, 그 당시의 PC 값이 필요하다.\n- <span class=\"clr-note\">registers</span> : CPU가 다른 프로그램 실행하다가 다시 돌아왔을 때, 어디서부터 다시 실행할 건지 알아야 한다.\n- <span class=\"clr-note\">MMU info (base, limit)</span> : 프로세스 스위칭 할 때마다 값을 바꿔줘야 한다\n- <span class=\"clr-note\">CPU time</span> : 현재까지 이 프로세스가 CPU 얼마나 사용했는 지\n- <span class=\"clr-note\">process id</span> : PID 프로세스마다 번호를 붙임\n- <span class=\"clr-note\">list of open files</span> : 프로세스가 지금 어떤 파일들을 사용하고 있는 지\n- 등...\n\n# # Queues\n\n## Job Queue\n\n하드디스크에 비해 메인 메모리 크기는 너무나 작아서 바로 메인 메모리에 못 올라가는 경우가 생긴다. 이 때 잡들은 큐에 줄 서게 되는 데, 이 것은 <code class=\"codetainer\">Job Queue</code> 라고 한다. 큐에 있는 작업들을 어떤 순서대로 실행할 지를 정하는 것을 <code class=\"codetainer\">Job scheduler(Long-term scheduler)</code> 라고 한다.\n\n## Ready Queue\n\n메인 메모리에 올라왔다고 바로 CPU 서비스 받는 것은 아니다. 또 <code class=\"codetainer\">Ready Queue</code>에 줄 서야 한다. 여기의 잡들도 <code class=\"codetainer\">CPU scheduler(short-term scheduler)</code>에 의해 순서가 정해진다.\n\n## Device Queue\n\nI/O, 하드 디스크 사용을 위해서도 <code class=\"codetainer\">Device Queue</code>에 줄 선다. 여기 잡을 관리하는 것은 <code class=\"codetainer\">Device scheduler</code>다.\n\n# # Multiprogramming\n\n## Degree of multiprogramming\n\n메인 메모리에 몇 개의 프로세스가 올라가 있는 지.\n\n## I/O-bound vs CPU-bound process\n\n프로세스는 크게 <code class=\"codetainer\">I/O-bound process</code>와 <code class=\"codetainer\">CPU-bound process</code>로 나눌 수 있다. I/O-bound는 주로 입출력 작업을 하는 프로세스로 문서편집 프로그램이 대표적이다. CPU-bound는 연산 작업이 많아 주로 CPU를 사용하는 경우며 예시로 슈퍼 컴퓨터 쓰는 일기 예보 프로그램을 들 수 있다.\n\n## Medium-term scheduler\n\nshort-term 보다는 적게 long-term 보다는 많게 일어난다. 운영체제는 메인 메모리를 감시하여 메모리에는 올라와있지만 아무 활동을 안하는 프로세스를 디스크에 쫒아낸다. 빈 메모리에는 새로운 프로그램을 올리거나 다른 프로세스에게 할당해준다. 이렇게 프로세스 이미지를 디스크로 쫒아내는 것을 <code class=\"codetainer\">Swapping Out</code> 이라고 하며 반대로 다시 프로세스를 사용하기 위해 메인 메모리에 올리면 <code class=\"codetainer\">Swapping In</code> 이라고 한다. 디스크를 프로세스 이미지를 쫒아내는 목적으로 사용하면 이를 <code class=\"codetainer\">Swap</code> 이라고 한다.\n\n## Context switching(문맥전환)\n\nCPU는 메인 메모리의 여러 프로세스를 동시에 서비스할 수 없어서 Process1을 사용하다가 Process2로 넘어가야한다. 이처럼 프로세스를 전환하는 것을 문맥전환이라고 한다.\n\n- <span class=\"clr-note\">Scheduler</span> : 큐에서 기다리는 잡 중에 무엇을 선택해서 작업할 지\n- <span class=\"clr-note\">Dispatcher</span> : CPU가 프로세스1을 서비스하다가 스케줄러에 의해 프로세스2로 문맥전환을 하려는 상황을 생각해보자. 운영체제는 안전한 문맥전환을 위해 Dispatcher 프로그램을 통해 다음의 2가지 일을 한다. 첫째로, 프로세스1의 현재 상태와 MMU(BASE, LIMIT) 정보를 프로세스1을 위한 PCB에 저장한다. 그 다음, 프로세스2의 정보를 복원하여 이전에 중지된 위치에서 재개할 수 있게 한다.\n- <span class=\"clr-note\">Context switching overhead</span> : 정보를 저장하고 복원하는 과정에서 오버헤드(부담)가 생기기 마련이다. 컴퓨터는 이를 Context switching overhead라고 부른다.\n"}}}},"pageContext":{"id":"222f530a5cea814f9af2afcc2e90f0d55d3d0902","previousPostId":"492e9413883721c4edee853633cd2b4713e6aade","nextPostId":"f6cb269db79cf2dc5897ed2c1c5e4e7e9526daf8"}},"staticQueryHashes":["2841359383"]}