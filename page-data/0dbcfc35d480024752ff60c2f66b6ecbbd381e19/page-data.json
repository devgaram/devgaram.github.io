{"componentChunkName":"component---src-templates-blog-post-js","path":"/0dbcfc35d480024752ff60c2f66b6ecbbd381e19","result":{"data":{"site":{"siteMetadata":{"title":"보노보노의 평화로운 개발 이야기"}},"current":{"repository":{"post":{"__typename":"GitHub_Blob","oid":"0dbcfc35d480024752ff60c2f66b6ecbbd381e19","text":"# Vue2 65분만에 배우기!\n\n- Title : Vue2 65분만에 배우기!\n- Date : 2018-04-07\n- Category: Vue\n\n유튜브 영상 The Vue Tutorial for 2018 - Learn Vue 2 in 65 Minutes 중 몰랐던 내용 정리한 글입니다.\n\n## 1. Vue-CLI 설치하기\n\nVue-CLI를 통해 Vue 프로젝트를 빠르고 쉽게 생성할 수 있다.\n\n```\n> mkdir vue-toy\n> cd vue-toy\n> npm install -g @vue/cli        -- Vue-CLI 설치\n> vue create vue-voca            -- Vue 프로젝트 생성[ vue create 프로젝트이름 ]\n```\n\n2018.04.09추가) yarn 설치 후, yarn을 통해 Vue-Cli 설치하는 방법\n\n```\n> npm install -g yarn\n> yarn global add @vue/cli\n```\n\n뷰 프로젝트를 생성하면 다음과 같은 프롬프트를 볼 수 있다.\n\n```\nVue CLI v3.0.0-beta.6\n?Please Pick a preset : (Use arrow Keys)\n> default (babel, eslint)\n   menually select features\n```\n\n2018.04.09추가)\n\n- Vue-Cli의 기본 템플릿은 babel, eslint, unit-mocha를 포함한다.\n\ndefault로 생성을 성공적으로 완료하면 다음과 같이 명령어를 실행한다.\n\n```\n> cd vue-voca\n> npm run serve\n```\n\n성공적으로 컴파일이 되면 http://localhost:8080/ 로 들어가본다.\n아래와 같은 화면을 볼 수 있다면, 성공적으로 Vue.js App을 생성한 것이다.\n\n![화면](https://raw.githubusercontent.com/devgaram/TIL/master/Vue/images/2018-04-07-img/2018-04-07-img.png)\n\n## 2. Vue Form Validation\n\nVeeValidate는 폼 유효성 체크를 위한 패키지다.\n\n설치방법\n\n```\n> yarn add vee-validate\n#또는\n> npm install vee-validate --save\n```\n\n사용방법\n\n```\nimport VeeValidate from 'vee-validate';\nVue.use(veeValidate);\n```\n\n## 3. Vue router\n\n```\n> npm add vue-router\n#또는\n> yarn add vue-router\n```\n\n```\nimport vue from 'vue'\nimport Router from 'vue-router'\n```\n\nvue 후에 vue-router를 임포트해야한다.\n\n동영상에서 진행한 프로젝트를 따라한 [깃으로 가기](https://github.com/devgaram/vueStudy). 개인적인 주석이 포함되어있습니다.\n"}}},"previous":{"repository":{"post":{"__typename":"GitHub_Blob","oid":"5c020cb338a81a219b4f92989a7d45ac5bdfe3e6","text":"# npm 시작하기\n\n- Title : npm 시작하기\n- Date : 2018-04-11\n- Category: Nodejs\n\n# 1. npm이란?\n\n## npm은 어떻게 구성되어있을까?\n\nnpm은 세 개의 컴포넌트로 구성되어있습니다.\n\n- the website - 패키지 탐색, 프로파일 설정, 개인 npm histoty 관리\n- CLI ( the Command Line Interface ) - 개발자와 npm이 소통하는 방법으로 터미널에서 동작\n- the registry - 자바스크립트 소프트웨어의 공용 데이터베이스 및 메타 정보\n\n## npm은 언제 사용할까?\n\n- 앱에 패키지를 적용시키거나, 통합시키고 싶을 때\n- 바로 사용할 수 있는 독립된 툴을 다운받고싶을 때\n- npx를 사용하여 다운로드받는 것 없이 패키지를 실행하고 싶을 때\n- 조직을 만들어서 유지보수, 개발 협업하고 싶을 때\n- 어디서든 npm 사용자와 코드를 공유하고 싶을 때\n- 코드 활용을 특정 개발자들로만 제한하고 싶을 때\n- 버전 및 코드 의존성 관리하고 싶을 때\n- 근본적인 코드가 업데이트될 때, 애플리케이션도 쉽게 업데이트되게 하고 싶을 때\n- 같은 문제를 해결하는 다양한 방법을 찾고싶을 때\n- 비슷한 프로젝트를 진행하는 개발자를 찾고 싶을 때\n\n# 2. 패키지는 어떻게 찾을까?\n\n패키지를 찾기위해서 npm의 검색창을 활용해야합니다. 그럼, 당신의 앱에 바코드(QR code) 기능을 넣고 싶다면 검색창에 QR code라고 입력해봅시다. QR Code와 관련된 패키지들이 조회되고, 패키지 선택에 도움을 줄 수 있는 랭킹 정보를 볼 수 있습니다.\n\n그렇다면 비슷한 패키지들 중, 우리는 어떤 패키지를 선택하면 될까요?\n\n## 각각의 패키지들은 npm 분석기에 의해 다음의 4가지로 랭킹되고있습니다.\n\n- Optimal - 아래 세가지 기준을 의미있게 조합하여 순위를 지정합니다.\n- Populary - 패키지가 다운로드된 횟수로 패키지 순위를 지정하며, 유용하고 안정적인 패키지가 해당됩니다.\n- Quality - readme 파일 존재여부, 안정성, 테스트, 최신 의존성주입, 사용자정의 웹사이트, 코드 복잡성등을 고려합니다.\n- Maintenance - 개발자가 관심을 기울이며, 보다 자주 유지보수되는 패키지를 순위로 지정합니다.\n\n## 패키지를 선택해서 들어가보면 패키지 정보와 사용 방법등의 다양한 정보를 얻을 수 있습니다.\n\n- Readme - 개발자가 생성한 readme 파일로 패키지의 목적과 사용방법에 대해 설명되어있습니다.\n- Dependencies - 대부분의 패키지들은 다른 패키지들로 만들어집니다. 이 패키지가 의존하고 있는 패키지들의 정보를 보여줍니다.\n- Dependents - 이 패키지를 의존하고 있는 패키지들을 보여줍니다.\n- Versions - 패키지 업데이트 정보를 보여줍니다.\n\n# 3. npm 시작하기\n\nnpm은 Node.js로 개발되었기에 npm을 사용하기 위해서는 Node.js를 설치해야합니다.  \nWindows의 경우, 반드시 LTS 버전을 설치해야합니다.\n\n```\n> node -v\n```\n\n설치가 완료되면 다음과 같이 노드의 버전을 확인해봅시다. 정상적으로 출력된다면 설치가 완료된 것입니다.  \nNode.js를 설치할 때, npm은 자동적으로 설치됩니다. 하지만, npm은 Node.js보다 더 자주 업데이트되기때문에 최신 버전으로 업데이트하는 방법을 알아야합니다.\n\n```\n> npm -v\n#npm 버전을 확인합니다.\n>npm install npm@latest -g\n#최신버전으로 업데이트합니다.\n```\n"}}},"next":{"repository":{"post":{"__typename":"GitHub_Blob","oid":"43c62d138aba5719c8fa3bc79ecccce9865fb59c","text":"# 자바스크립트 단위테스트 시작하기\n\n- Title : 자바스크립트 단위테스트 시작하기\n- Date : 2018-01-27\n- Category: Nodejs\n\nmocha 자바스크립트 테스트 프레임워크로 단위테스트 시작하는 방법입니다.\n\n# 단위테스트(Unit Test)가 필요한 이유?\n\n프로그램을 작은 단위로 쪼개서 내가 짠 프로그램이 내가 원하는 결과대로 동작하는 지 테스트할 수 있다.  \n단위테스트를 거치면 프로그램의 안정성이 높아지며, 단위테스트를 믿고 리팩토링을 할 수 있다.\n\n자바스크립트로 짜여진 프로그램에서 오류를 찾을 때, 단위테스트를 거치지 않은 프로그램의 경우는 전체 흐름을 파악해가며 원인을 찾아야한다.  \n원인을 찾아 수정한다해도 이 결과가 어떤 이펙트를 가져올지 예상하기가 어려울 수 있다.\n\n# mocha 자바스크립트 테스트 프레임워크\n\n## 1. 셋팅하기 (Windows8)\n\nmocha는 node.js가 기반인 프레임워크이기 때문에 node.js가 설치되어있어야 한다.  \n설치 후 cmd 창에 node --version 이라고 쳐서 버전 정보가 제대로 나오면 설치가 잘 된 것이다.\n\ncmd 창에 아래와 같이 입력하면 mocha 사용 준비 완료!\n\n```\n$npm install -g mocha\n```\n\n그리고 Assertion Library인 Chai를 추가해보자. 작업 디렉토리에서 아래를 cmd 창에서 실행한다.\n\n```\n$nbm install chai\n```\n\n그 결과, node_moduls 폴더가 생성된다.\n\n## 2. 사용하기\n\n[InspiredJW님의 티스토리 블로그를 참고했습니다!](http://inspiredjw.com/entry/Mocha-%EB%A1%9C-%ED%95%98%EB%8A%94-JavaScript-Testing).\n\n모카는 test 디렉토리에 있는 파일을 실행하기 때문에, 테스트 코드는 이 디렉토리 안에 위치시켜야한다.\n\nJsStudy/JsStudy.js\n\n```javascript\n\"use strict\";\nexports.foo = (a, b) => {\n  if (typeof a !== \"number\" || typeof b !== \"number\") return false;\n  return a * b;\n};\nexports.bar = callback => {};\n```\n\nJsStudy/test/JsStudyTest.js\n\n```javascript\n\"use strict\";\n\nlet chai = require(\"chai\");\nlet should = chai.should();\nlet foo = require(\"../JsStudy\").foo;\n\ndescribe(\"Function Foo\", () => {\n  describe(\"with two number params\", () => {\n    it(\"should return product\", () => {\n      let result = foo(3, 4);\n      result.should.be.a(\"number\");\n      result.should.equal(12);\n    });\n  });\n});\n\ndescribe(\"with non-number params\", () => {\n  it(\"should return false\", () => {\n    let result = foo(3, null);\n    result.should.be.false;\n  });\n});\n```\n\n테스트 실행방법은 cmd 창에서 JsStudy 폴더로 이동한후, mocha 실행하기\n\n```\n$mocha\n```\n\n<span class=\"clr-grey\">\nAPI    \n- describe() : 테이스틔 이름을 지정하며, 중첩하여 사용할 수 있다. 테스트를 구분하는 section이며, 단위테스트 부분을 콜백으로 넘겨준다.\n- it() : 단위테스트의 이름을 작성하고 실제 실행되는 코드를 콜백(done)으로 넘겨준다.\n- befor() : 테스트 코드가 실행되기 전 한번 실행된다.\n- after() : 모든 테스트 코드가 실행된 후 한 번 실행된다.\n- beforeEach() : (테스트 코드가 여러개일 경우) 각각의 테스트 코드가 실행되기 전마다 실행된다.\n- afterEach() : (테스트코드가 여러개일 경우) 각각의 테스트 코드가 실행된 후마다 실행된다.\n- .a(type[,msg]) : 지정된 타입과 동일한지 리턴.\n- .equal(val[,msg]) : === var과 주어진 타켓이 같은지.\n- .false : 타켓 === false\n</span>\n"}}}},"pageContext":{"id":"0dbcfc35d480024752ff60c2f66b6ecbbd381e19","previousPostId":"5c020cb338a81a219b4f92989a7d45ac5bdfe3e6","nextPostId":"43c62d138aba5719c8fa3bc79ecccce9865fb59c"}},"staticQueryHashes":["2841359383"]}